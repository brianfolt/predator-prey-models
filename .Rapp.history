res = as.data.frame(tableX4)
head(res)
cols = c("Scenario","ReleaseAge","Sr","Lambda","DeltaLambda","Pext","DeltaPext")#
rows = c("M","N","O","P","Q","R","S","T","U","V","W","X")#
tableX4 = matrix(c(#
	"M", "H", 1, mean(medrlamM[-c(1:5)]), "NA", PEtM, "NA",#
	"N", "H", 0.8, mean(medrlamN[-c(1:5)]), #
		((mean(medrlamN[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtN, #
		((PEtN/PEtM)-1)*100,#
	"O", "H", 0.6, mean(medrlamO[-c(1:5)]), #
		((mean(medrlamO[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtO, #
		((PEtO/PEtM)-1)*100,#
	"P", "H", 0.4, mean(medrlamP[-c(1:5)]),#
		((mean(medrlamP[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtP, #
		((PEtP/PEtM)-1)*100,#
	"Q", "J", 1, mean(medrlamQ[-c(1:5)]), "NA", PEtQ, "NA",#
	"R", "J", 0.8, mean(medrlamR[-c(1:5)]), #
		((mean(medrlamR[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtR, #
		((PEtR/PEtQ)-1)*100,#
	"S", "J", 0.6, mean(medrlamS[-c(1:5)]), #
		((mean(medrlamS[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtS, #
		((PEtS/PEtQ)-1)*100,#
	"T", "J", 0.4, mean(medrlamT[-c(1:5)]), #
		((mean(medrlamT[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtT, #
		((PEtT/PEtQ)-1)*100,#
	"U", "SA", 1, mean(medrlamU[-c(1:5)]), "NA", PEtU, "NA",#
	"V", "SA", 0.8, mean(medrlamV[-c(1:5)]),#
		((mean(medrlamV[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtV, #
		((PEtV/PEtU)-1)*100,#
	"W", "SA", 0.6, mean(medrlamW[-c(1:5)]), #
		((mean(medrlamW[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtW, #
		((PEtW/PEtU)-1)*100,#
	"X", "SA", 0.4, mean(medrlamX[-c(1:5)]),#
		((mean(medrlamX[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtX, #
		((PEtX/PEtU)-1)*100),#
nrow=12,ncol=7, byrow=TRUE, dimnames=list(rows,cols))#
tableX4
tablX4 = as.data.frame(tableX4)
tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")] = #
	lapply(tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")],#
  	function(x) as.numeric(levels(x))[x])#
head(tableX4)
head(tableXr)
head(tableX4)
cols = c("Scenario","ReleaseAge","Sr","Lambda","DeltaLambda","Pext","DeltaPext")#
rows = c("M","N","O","P","Q","R","S","T","U","V","W","X")#
tableX4 = matrix(c(#
	"M", "H", 1, mean(medrlamM[-c(1:5)]), "NA", PEtM, "NA",#
	"N", "H", 0.8, mean(medrlamN[-c(1:5)]), #
		((mean(medrlamN[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtN, #
		((PEtN/PEtM)-1)*100,#
	"O", "H", 0.6, mean(medrlamO[-c(1:5)]), #
		((mean(medrlamO[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtO, #
		((PEtO/PEtM)-1)*100,#
	"P", "H", 0.4, mean(medrlamP[-c(1:5)]),#
		((mean(medrlamP[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtP, #
		((PEtP/PEtM)-1)*100,#
	"Q", "J", 1, mean(medrlamQ[-c(1:5)]), "NA", PEtQ, "NA",#
	"R", "J", 0.8, mean(medrlamR[-c(1:5)]), #
		((mean(medrlamR[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtR, #
		((PEtR/PEtQ)-1)*100,#
	"S", "J", 0.6, mean(medrlamS[-c(1:5)]), #
		((mean(medrlamS[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtS, #
		((PEtS/PEtQ)-1)*100,#
	"T", "J", 0.4, mean(medrlamT[-c(1:5)]), #
		((mean(medrlamT[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtT, #
		((PEtT/PEtQ)-1)*100,#
	"U", "SA", 1, mean(medrlamU[-c(1:5)]), "NA", PEtU, "NA",#
	"V", "SA", 0.8, mean(medrlamV[-c(1:5)]),#
		((mean(medrlamV[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtV, #
		((PEtV/PEtU)-1)*100,#
	"W", "SA", 0.6, mean(medrlamW[-c(1:5)]), #
		((mean(medrlamW[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtW, #
		((PEtW/PEtU)-1)*100,#
	"X", "SA", 0.4, mean(medrlamX[-c(1:5)]),#
		((mean(medrlamX[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtX, #
		((PEtX/PEtU)-1)*100),#
nrow=12,ncol=7, byrow=TRUE, dimnames=list(rows,cols))#
tableX4
tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")]
tableX4 = matrix(c(#
	"M", "H", 1, mean(medrlamM[-c(1:5)]), 0, PEtM, 0,#
	"N", "H", 0.8, mean(medrlamN[-c(1:5)]), #
		((mean(medrlamN[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtN, #
		((PEtN/PEtM)-1)*100,#
	"O", "H", 0.6, mean(medrlamO[-c(1:5)]), #
		((mean(medrlamO[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtO, #
		((PEtO/PEtM)-1)*100,#
	"P", "H", 0.4, mean(medrlamP[-c(1:5)]),#
		((mean(medrlamP[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtP, #
		((PEtP/PEtM)-1)*100,#
	"Q", "J", 1, mean(medrlamQ[-c(1:5)]), 0, PEtQ, 0,#
	"R", "J", 0.8, mean(medrlamR[-c(1:5)]), #
		((mean(medrlamR[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtR, #
		((PEtR/PEtQ)-1)*100,#
	"S", "J", 0.6, mean(medrlamS[-c(1:5)]), #
		((mean(medrlamS[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtS, #
		((PEtS/PEtQ)-1)*100,#
	"T", "J", 0.4, mean(medrlamT[-c(1:5)]), #
		((mean(medrlamT[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtT, #
		((PEtT/PEtQ)-1)*100,#
	"U", "SA", 1, mean(medrlamU[-c(1:5)]), 0, PEtU, 0,#
	"V", "SA", 0.8, mean(medrlamV[-c(1:5)]),#
		((mean(medrlamV[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtV, #
		((PEtV/PEtU)-1)*100,#
	"W", "SA", 0.6, mean(medrlamW[-c(1:5)]), #
		((mean(medrlamW[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtW, #
		((PEtW/PEtU)-1)*100,#
	"X", "SA", 0.4, mean(medrlamX[-c(1:5)]),#
		((mean(medrlamX[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtX, #
		((PEtX/PEtU)-1)*100),#
nrow=12,ncol=7, byrow=TRUE, dimnames=list(rows,cols))#
tableX4
tablX4 = as.data.frame(tableX4)#
tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")] = #
	lapply(tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")],#
  	function(x) as.numeric(levels(x))[x])#
head(tableX4)
cols = c("Scenario","ReleaseAge","Sr","Lambda","DeltaLambda","Pext","DeltaPext")#
rows = c("M","N","O","P","Q","R","S","T","U","V","W","X")#
tableX4 = matrix(c(#
	"M", "H", 1, mean(medrlamM[-c(1:5)]), 0, PEtM, 0,#
	"N", "H", 0.8, mean(medrlamN[-c(1:5)]), #
		((mean(medrlamN[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtN, #
		((PEtN/PEtM)-1)*100,#
	"O", "H", 0.6, mean(medrlamO[-c(1:5)]), #
		((mean(medrlamO[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtO, #
		((PEtO/PEtM)-1)*100,#
	"P", "H", 0.4, mean(medrlamP[-c(1:5)]),#
		((mean(medrlamP[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtP, #
		((PEtP/PEtM)-1)*100,#
	"Q", "J", 1, mean(medrlamQ[-c(1:5)]), 0, PEtQ, 0,#
	"R", "J", 0.8, mean(medrlamR[-c(1:5)]), #
		((mean(medrlamR[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtR, #
		((PEtR/PEtQ)-1)*100,#
	"S", "J", 0.6, mean(medrlamS[-c(1:5)]), #
		((mean(medrlamS[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtS, #
		((PEtS/PEtQ)-1)*100,#
	"T", "J", 0.4, mean(medrlamT[-c(1:5)]), #
		((mean(medrlamT[-c(1:5)])/(mean(medrlamQ[-c(1:5)])))-1)*100, PEtT, #
		((PEtT/PEtQ)-1)*100,#
	"U", "SA", 1, mean(medrlamU[-c(1:5)]), 0, PEtU, 0,#
	"V", "SA", 0.8, mean(medrlamV[-c(1:5)]),#
		((mean(medrlamV[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtV, #
		((PEtV/PEtU)-1)*100,#
	"W", "SA", 0.6, mean(medrlamW[-c(1:5)]), #
		((mean(medrlamW[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtW, #
		((PEtW/PEtU)-1)*100,#
	"X", "SA", 0.4, mean(medrlamX[-c(1:5)]),#
		((mean(medrlamX[-c(1:5)])/(mean(medrlamU[-c(1:5)])))-1)*100, PEtX, #
		((PEtX/PEtU)-1)*100),#
nrow=12,ncol=7, byrow=TRUE, dimnames=list(rows,cols))#
tableX4
tableX4 = as.data.frame(tableX4)#
tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")] = #
	lapply(tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")],#
  	function(x) as.numeric(levels(x))[x])#
head(tableX4)
plot(tableX4$Pext ~  tableX4 $Sr)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", #
	pch=as.numeric(tableX4$ReleaseAge))
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", #
	pch=as.numeric(tableX4$ReleaseAge))#
legend("topleft", inset=c(0.05), c("Hatchlings", "Juveniles","Subadults"), #
	cex=2, lwd=2, box.lwd=2)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", #
	pch=as.numeric(tableX4$ReleaseAge))#
legend("topright", inset=c(0.05), c("Hatchlings", "Juveniles","Subadults"), #
	cex=2, lwd=2, box.lwd=2)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", #
	pch=as.numeric(tableX4$ReleaseAge))#
legend("topright", inset=c(0.05), c("Hatchlings", "Juveniles","Subadults"), #
	cex=1.5, lwd=1.5, box.lwd=2)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", #
	pch=as.numeric(tableX4$ReleaseAge))#
legend("topright", inset=c(0.05), c("Hatchlings", "Juveniles","Subadults"), #
	cex=1.5, box.lwd=2)
?legend()
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", #
	pch=as.numeric(tableX4$ReleaseAge))#
legend("topright", inset=c(0.05), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.5, box.lwd=2)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", #
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4, plot=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", #
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", #
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
#
legend("topright", inset=c(0.05), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.5, box.lwd=2)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0.4,1.0), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
legend("topright", inset=c(0.05), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.5, box.lwd=2)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0.4,1.0), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
legend("topright", inset=c(0.05), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.5, box.lwd=1.5)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0.4,1.0), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
legend("topright", inset=c(0.02), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.5, box.lwd=1.5)
plot(tableX4$Pext ~ tableX4$Sr, data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0.4,1.0), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
legend("topright", inset=c(0.02), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ 1-tableX4$Sr, data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0.4,1.0), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
legend("topright", inset=c(0.02), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0.4,1.0), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
legend("topright", inset=c(0.02), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
legend("topright", inset=c(0.02), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
legend("topleft", inset=c(0.02), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.2, box.lwd=1.5)
head(tableX4)
lines(0:0.6, subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.2, col="darkgrey")
subset(tableX4, ReleaseAge == "H")
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.2, col="darkgrey")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.4, col="darkgrey")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.8, col="darkgrey")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.8, col="darkgrey")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "J")$Pext, lty=2, lwd=1.8, col="darkgrey")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "SA")$Pext, lty=3, lwd=1.8, col="darkgrey")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), pch=c(1,2,3),#
	cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.8, col="darkgrey")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "J")$Pext, lty=2, lwd=1.8, col="darkgrey")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "SA")$Pext, lty=3, lwd=1.8, col="darkgrey")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), #
	pch=c(1,2,3), lty=c(1,2,3), cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect (survival reduciton)"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.8, col="darkgrey")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "J")$Pext, lty=2, lwd=1.8, col="darkgrey")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "SA")$Pext, lty=3, lwd=1.8, col="darkgrey")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), #
	pch=c(1,2,3), lty=c(1,2,3), cex=1.2, box.lwd=1.5)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect (survival reduction)"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.8, col="darkgrey")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "J")$Pext, lty=2, lwd=1.8, col="darkgrey")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "SA")$Pext, lty=3, lwd=1.8, col="darkgrey")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), #
	pch=c(1,2,3), lty=c(1,2,3), cex=1.2, box.lwd=1.5)
### Plot extinction as a consequence of acclimation effect#
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.8, col="darkgrey")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "J")$Pext, lty=2, lwd=1.8, col="darkgrey")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "SA")$Pext, lty=3, lwd=1.8, col="darkgrey")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), #
	pch=c(1,2,3), lty=c(1,2,3), cex=1.2, box.lwd=1.5)
### Plot extinction as a consequence of acclimation effect#
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.6), ylim=c(0,0.6),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.8, col="black")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "J")$Pext, lty=2, lwd=1.8, col="black")#
lines(c(0,0.2,0.4,0.6), subset(tableX4, ReleaseAge == "SA")$Pext, lty=3, lwd=1.8, col="black")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), #
	pch=c(1,2,3), lty=c(1,2,3), cex=1.2, box.lwd=1.5)
cols = c("Scenario","ReleaseDuration","FemalesReleased","Lambda","LambdaObs","Pext")#
rows = c("A","D","G","J","B","E","H","K","C","F","I","L")#
tableX2 = matrix(c(#
	# Hatchling scenarios#
	"A", 10, round(muNhrA), mean(medrlamA[-c(1:5)]), mean(medolamA[-c(1:5)]),PEtA,#
	"D", 5, round(muNhrD), mean(medrlamD[-c(1:5)]), mean(medolamD[-c(1:5)]),PEtD,#
	"G", 10, round(muNhrG), mean(medrlamG[-c(1:5)]), mean(medolamG[-c(1:5)]),PEtG,#
	"J", 5, round(muNhrJ), mean(medrlamJ[-c(1:5)]), mean(medolamJ[-c(1:5)]),PEtJ,#
#
	# Juvenile scenarios#
	"B", 10, round(muNjrB), mean(medrlamB[-c(1:5)]), mean(medolamB[-c(1:5)]),PEtB,#
	"E", 5, round(muNjrE), mean(medrlamE[-c(1:5)]), mean(medolamE[-c(1:5)]),PEtE,#
	"H", 10, round(muNjrH), mean(medrlamH[-c(1:5)]), mean(medolamH[-c(1:5)]),PEtH,#
	"K", 5, round(muNjrK), mean(medrlamK[-c(1:5)]), mean(medolamK[-c(1:5)]),PEtK,#
	# Subadult scenarios#
	"C", 10, round(muNsarC), mean(medrlamC[-c(1:5)]), mean(medolamC[-c(1:5)]),PEtC,#
	"F", 5, round(muNsarF), mean(medrlamF[-c(1:5)]), mean(medolamF[-c(1:5)]),PEtF,#
	"I", 10, round(muNsarI), mean(medrlamI[-c(1:5)]), mean(medolamI[-c(1:5)]),PEtI,#
	"L", 5, round(muNsarL), mean(medrlamL[-c(1:5)]), mean(medolamL[-c(1:5)]),PEtL),#
	nrow=12, ncol=6, byrow=TRUE, dimnames=list(rows,cols))#
tableX2
clip = pipe("pbcopy","w")#
write.table(tableX2, file=clip, sep="\t", row.names=FALSE)#
close(clip)
cols = c("Site","Scenario","FemalesReleased","Lambda","LambdaObs","Pext","MedAbun30")#
rows = c("CNFc","CNFp","ABRPc","ABRPp")#
tableX3 = matrix(c(#
	"AL", "Current", round(sum(CNFc[1,])), mean(medrlamCNFc[6:30]), #
		mean(medolamCNFc[6:30]), PECNFc[30], #
		median(subset(results, results$Scenario == "CNFc" & Stage == "Breeders")[,32]),#
	"AL", "Current + futures", round(sum(CNFp[1,])), mean(medrlamCNFp[6:30]),#
		mean(medolamCNFp[6:30]), PECNFp[30],#
		median(subset(results, results$Scenario == "CNFp" & Stage == "Breeders")[,32]),#
	"FL", "Current", round(sum(ABRPc[1,])), mean(medrlamABRPc[6:30]),#
		mean(medolamABRPc[6:30]), PEABRPc[30], #
		median(subset(results, results$Scenario == "ABRPc" & Stage == "Breeders")[,32]),#
	"FL", "Current + futures", round(sum(ABRPp[1,])), mean(medrlamABRPp[6:30]), #
		mean(medolamABRPp[6:30]), PEABRPp[30], #
		median(subset(results, results$Scenario == "ABRPp" & Stage == "Breeders")[,32])),#
	nrow=4, ncol=7, byrow=TRUE, dimnames=list(rows,cols))#
tableX3
clip = pipe("pbcopy","w")#
write.table(tableX2, file=clip, sep="\t", row.names=FALSE)#
close(clip)
clip = pipe("pbcopy","w")#
write.table(tableX3, file=clip, sep="\t", row.names=FALSE)#
close(clip)
t = 30		# Number of years to project simulations#
r = 1000		# Number of simulation replications #
#
### Population growth & quasi-extinction estimates#
rlam=matrix(0,r,t)		# Real (true) population growth#
olam=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext=matrix(0,r,t)		# Probability of quasi-extinction#
#
#### Preliminary modeling exercises created a repatriation strategy where 30 'head-started', 2 yr-old subadult snakes would be released each year for 10 years. This sought to create a sustainable population with relatively low risk of extinction. However, this model lacked parametric uncertainty and stochasticity, it is expensive to raise snakes through the second year, and also difficult to raise enough snakes to release that many for 10 years. So, managers were also interested in the feasability of releasing younger snakes, such as hatchlings or 1-yr old juveniles, and whether shorter release periods (e.g., 5 years) or irregular release periods (7 out of 10 years)  would be sufficient to generate viable populations with low risk of extinction. However, two problems potentially limiting success are that (1) snakes are difficult to sample and may have detection probabilities much lower than 1.0, and (2) released animals may have decreased survival in the first year (post-release acclimation effect) while th
ey try to learn and figure out how to live in the wild.  #
#
#### This provides us five factors to consider in our modeling exercise: #
## (1) annual release size (15 or 30 individuals)#
## (2) snake release age (hatchlings, juvenile, subadult)#
## (3) release duration (5 yr, 10 yr)#
## (4) probability of sampling (observing) snakes (0.05, 0.15, 0.25, 0.35)#
## (5) acclimation effects on post-release survival (1.0,0.8,0.6,0.4)#
#
#### 28 release scenarios#
#
cols = c("nrelh","nrelj","nrelsa","nyr","mPsamp","Sr")#
rows = c("A","B","C","D","E","F","G","H","I","J","K","L",#
		"M","N","O","P","Q","R","S","T","U","V","W","X",#
		"Y","Z","ZZ","CNFc","ABRPc","CNFp","ABRPp")#
#
scenarios = matrix(c(#
	# Multiple snake release scenarios with different values for#
	# hatchling releases (col 1), juvenile releases (col 2), subadult releases (col 3), #
	# release duration in years (col 4), detection probability (col 5), and #
	# survival reduction (acclimation effect) (col 6)#
#
# Scenarios A-L: release age, release number, and release program duration#
	30,0,0,10,0.2,0.5,		#scenario A#
	0,30,0,10,0.2,0.5,		#scenario B #
	0,0,30,10,0.2,0.5,		#scenario C #
	30,0,0,5,0.2,0.5,		#scenario D#
	0,30,0,5,0.2,0.5,		#scenario E#
	0,0,30,5,0.2,0.5,		#scenario F#
	15,0,0,10,0.2,0.5,		#scenario G #
	0,15,0,10,0.2,0.5,		#scenario H #
	0,0,15,10,0.2,0.5,		#scenario I #
	15,0,0,5,0.2,0.5,		#scenario J#
	0,15,0,5,0.2,0.5,		#scenario K#
	0,0,15,5,0.2,0.5,		#scenario L#
#
# Scenarios M-X: evaluate different acclimation effects & detection probabilities	#
	30,0,0,10,0.45,1.0,		#scenario M #
	30,0,0,10,0.35,0.8,		#scenario N 	#
	30,0,0,10,0.25,0.6,		#scenario O#
	30,0,0,10,0.15,0.4,		#scenario P#
	30,0,0,10,0.05,0.2,		#scenario Q#
	0,30,0,10,0.45,1.0,		#scenario R#
	0,30,0,10,0.35,0.8,		#scenario S #
	0,30,0,10,0.25,0.6,		#scenario T#
	0,30,0,10,0.15,0.4,		#scenario U#
	0,30,0,10,0.05,0.2,		#scenario V#
	0,0,30,10,0.45,1.0,		#scenario W #
	0,0,30,10,0.35,0.8,		#scenario X #
	0,0,30,10,0.25,0.6,		#scenario Y#
	0,0,30,10,0.15,0.4,		#scenario Z#
	0,0,30,10,0.05,0.2,		#scenario ZZ#
# Scenarios specific to ongoing repatriations#
	0,0,0,0,0.15,0.5,		#scenario CNF	-- current population projections for CNF#
	0,0,0,0,0.15,0.5,		#scenario ABRP	-- current population projections for ABRP	#
	0,0,0,0,0.15,0.5,		#scenario CNF	-- projected population projections for CNF#
	0,0,0,0,0.15,0.5),		#scenario ABRP	-- projected population projections for ABRP#
	nrow=31, ncol=6, byrow=TRUE, dimnames=list(rows,cols))#
n = length(scenarios[,1])#
#
### Create an empty matrix to dump all the results into#
results = matrix(0, nrow = 1, ncol = 32, dimnames=list(NA,c("Scenario","Stage",1:30)))#
### Use a for-loop to iteratively calculate demography under different management scenarios#
### by using each row of the scenarios object to provide unique combinations of parameters#
for (h in 1:n){			# For-loop for each repatriation scenario#
nrelh=scenarios[h,1] 	# Mean number of hatchlings released (both sexes)#
nrelj=scenarios[h,2]		# Mean number of 1 yr-old juveniles releases (both sexes)#
nrelsa=scenarios[h,3]	# Mean no. of 2-yr old subadults releases (both sexes)#
#
nyr=scenarios[h,4] 		# Duration of the release program (years)#
#
mPsamp=scenarios[h,5] 	# Probabilty of sampling snakes (i.e., detection probability)#
SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
#
Sr = scenarios[h,6]		# Acclimation effect on survival (i.e., survival reduction)#
						# of released individuals	#
Srt=matrix(0,r,t)#
#
### Create some matrices and parameters for the model loop:#
Nh =  matrix(0,r,t)		# Abundance of hatchlings #
Nj = matrix(0,r,t) 		# Juveniles#
Nsa = matrix(0,r,t) 		# Subadults#
Na1 = matrix(0,r,t) 		# Primiparous adults#
Na = matrix(0,r,t) 		# Adults#
#
Nh[,1]=0		# Initial abundance of hatchlings#
Nj[,1]=0		# Juveniles#
Nsa[,1]=0		# Subadults#
Na1[,1]=0		# Primiparous adults#
Na[,1]=0		# Adults#
#
Nhr = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
Njr = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
Nsar = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
#
# Specify number of FEMALES CURRENTLY released TO DATE in Conecuh and Apalachicola#
rep.row<-function(x,n){matrix(rep(x,each=n),nrow=n)}	# function to build matrix#
#
CNFc = rep.row(c(0,8,11,14,3,0,3,0,13,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),1000)#
#
ABRPc = rep.row(c(0,4,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),1000)#
#
# Specify number of FEMALES PROJECTED for release in CNF and ABRP#
CNFp = rep.row(c(0,8,11,14,3,0,3,0,13,10,14,15,14,15,14,15,#
					0,0,0,0,0,0,0,0,0,0,0,0,0,0),1000)#
#
ABRPp = rep.row(c(0,4,8,14,13,15,13,14,13,15,13,14,14,#
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),1000)#
#
#this script simulates the same release schedule for all replicates and #
#isn't subject to future stochastic variation in releases#
#
Nobreeders = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
Noimmatures = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
#
Nmax=100 			# Population ceiling for density dependence#
#### Population-projection model that accounts for imperfect detection#
#
for(i in 1:r){			# Replication loop; draws replicate-level means for survival at each stage#
#
ASai[i] = 100*Sai[i]			# Adults 		#
BSai[i] = 100*(1-Sai[i])		#
#
ASa1i[i] = 100*Sa1i[i]		 # Primiparous adults	#
BSa1i[i] = 100*(1-Sa1i[i])#
#
ASsai[i] = 100*Ssai[i]		 # Subadults	#
BSsai[i] = 100*(1-Ssai[i])#
#
ASji[i] = 100*Sji[i]			# Juveniles  		#
BSji[i] = 100*(1-Sji[i])#
#
AShi[i] = 100*Shi[i]		 	# Hatchlings	#
BShi[i] = 100*(1-Shi[i])#
#
for(j in 1:t){			# Projection loop; drawing annual demographic rates#
Sat[i,j]=rbeta(1,ASai[i],BSai[i])			# Adults#
Sa1t[i,j]=rbeta(1,ASa1i[i],BSa1i[i])		# Primiparous adults#
Ssat[i,j]=rbeta(1,ASsai[i],BSsai[i])		# Subadults#
Sjt[i,j]=rbeta(1,ASji[i],BSji[i])			# Juveniles#
Sht[i,j]=rbeta(1,aSh,bSh)					# Hatchlings#
Set[i,j]=rbeta(1,aSe,bSe)					# Egg survival#
Srt[i,j]=rbeta(1,100*Sr, 100*(1-Sr)) 		# Randomize the acclimation effect #
												# (Sr; survival reduction)#
#
# Drawing the number of released subadults and juveniles, and account for sex ratio to remove males#
if (j>0 && j<nyr+1 && scenarios[h,4]>0) Nsar[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
if (j>0 && j<nyr+1 && scenarios[h,4]>0) Njr[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
if (j>0 && j<nyr+1 && scenarios[h,4]>0) Nhr[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
#
# Specify the number of females released in CNF and ABRP (1) to date and (2) projected#
if (rownames(scenarios)[h] == "CNFc") Nsar=CNFc#
if (rownames(scenarios)[h] == "ABRPc") Nsar=ABRPc#
if (rownames(scenarios)[h] == "CNFp") Nsar=CNFp#
if (rownames(scenarios)[h] == "ABRPp") Nsar=ABRPp#
#
# Projection equation for adults#
if (j>1) Na[i,j]=round((Na[i,j-1]*Sat[i,j-1]+Na1[i,j-1]*Sa1t[i,j-1]*Ta1a[i,j-1])) else Na[i,j]=0#
round(Na[i,j],0)#
#
# Projection equation for primiparous adults#
if (j>1) Na1[i,j]=round((Na1[i,j-1]*(Sa1t[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Na1[i,j]=0#
round(Na1[i,j],0)#
#
# Density-dependence; decrease subadult survival considerably when population sizes get too high;#
# drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
if (Na[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
if (Na[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
#
# Projection equation for subadults#
if (j>1) Nsa[i,j]=round((Nsa[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa[i,j]=0#
round(Nsa[i,j],0)#
#
# Projection equation for juveniles#
if (j>1) Nj[i,j]=round((Nj[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
(Nhr[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj[i,j]=0#
round(Nj[i,j],0)#
#
# Good-year/bad-year function for probability of breeding#
if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
#
# Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
eggsa[i,j] = sum(rpois(round(Na[i,j]*Pbt[i,j],0),muFa))/2#
eggsa1[i,j] = sum(rpois(round(Na1[i,j]*Pbt[i,j],0),muFa1))/2#
round(eggsa[i,j],0)#
round(eggsa1[i,j],0)#
#
# Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
if (j>1) Nh[i,j] = round((eggsa[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggsa1[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh[i,j]=0#
round(Nh[i,j],0)#
#
# Sum the number of reproductive and immature individuals to facilitate the construction of figures#
Nbreeders = Na+Na1		# Sum all breeders at each time step#
Nimmatures = Nh+Nj+Nsa	# Sum all immatures at each time step#
#
# Implement sampling (detection) probability for adults and immatures#
Nobreeders[i,j]=sum(rbinom(Nbreeders[i,j],1,Psamp[i,j]))#
Noimmatures[i,j]=sum(rbinom(Nimmatures[i,j],1,Psamp[i,j]))#
#
# Calculate population growth rate#
if(j>5) rlam[i,j]=Nbreeders[i,j]/Nbreeders[i,j-1]#
if(j>5 && Nobreeders[i,j-1]>0) olam[i,j]= Nobreeders[i,j]/Nobreeders[i,j-1]#
if (Nbreeders[i,j]<5) Pext[i,j]=1 else Pext[i,j]=0 #
#
}}	# Close replication and projection loops#
#
# Create an categorical identifying variable of length r for each life stage#
stages = c("H","J","SA","PA","A","Imm","Breeders","ObsImm","ObsBreeders")#
for (l in 1:length(stages)){#
	Stage = as.data.frame(rep(stages[l],r))#
	assign(paste0("Stage",stages[l]),Stage)}#
#
# Bind the results from a scenario projection into a data frame#
scenario = rbind.data.frame(cbind.data.frame(StageH,Nh),cbind.data.frame(StageJ,Nj),#
	cbind.data.frame(StageSA,Nsa),cbind.data.frame(StagePA,Na1),cbind.data.frame(StageA,Na),#
	cbind.data.frame(StageImm,Nimmatures),cbind.data.frame(StageBreeders,Nbreeders), #
	cbind.data.frame(StageObsImm,Noimmatures),cbind.data.frame(StageObsBreeders,Nobreeders))#
scenario = cbind.data.frame(rep(rownames(scenarios)[h],r*length(stages)),scenario)#
colnames(scenario) = c("Scenario","Stage",1:30)#
results = rbind(results,scenario)	# Bind results from the scenario to an object with all scenario results#
#
medrlam = apply(rlam, 2, median, na.rm=TRUE)		# Median real population growth#
medolam = apply(olam, 2, median, na.rm=TRUE)		# Median observed population growth#
PE = apply(Pext,2,sum)/r							# Prob. of quasi-extinction#
PEt = PE[t]										# Prob. of q-extinction @ year t#
#
muNhr = mean(apply(Nhr,1,sum))		# Mean no. of hatchlings released#
muNjr = mean(apply(Njr,1,sum))		# Mean no. of juveniles released#
muNsar = mean(apply(Nsar,1,sum))		# Mean no. of subadults released#
#
assign(paste0("medrlam", rownames(scenarios)[h]), medrlam) #
assign(paste0("medolam", rownames(scenarios)[h]), medolam) #
assign(paste0("PE", rownames(scenarios)[h]), PE) #
assign(paste0("PEt", rownames(scenarios)[h]), PEt) #
#
assign(paste0("muNsar", rownames(scenarios)[h]), muNsar) #
assign(paste0("muNjr", rownames(scenarios)[h]), muNjr)#
assign(paste0("muNhr", rownames(scenarios)[h]), muNhr)#
#
} 	# Close scenario loop#
#
results = results[-c(1),]	# Remove top NA row from results
cols = c("Scenario","ReleaseAge","Sr","Lambda","DeltaLambda","Pext","DeltaPext")#
rows = c("M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","ZZ")#
tableX4 = matrix(c(#
	"M", "H", 1, mean(medrlamM[-c(1:5)]), 0, PEtM, 0,#
	"N", "H", 0.8, mean(medrlamN[-c(1:5)]), #
		((mean(medrlamN[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtN, #
		((PEtN/PEtM)-1)*100,#
	"O", "H", 0.6, mean(medrlamO[-c(1:5)]), #
		((mean(medrlamO[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtO, #
		((PEtO/PEtM)-1)*100,#
	"P", "H", 0.4, mean(medrlamP[-c(1:5)]),#
		((mean(medrlamP[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtP, #
		((PEtP/PEtM)-1)*100,#
	"Q", "H", 0.2, mean(medrlamQ[-c(1:5)]),#
		((mean(medrlamQ[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtQ, #
		((PEtQ/PEtM)-1)*100,#
	"R", "J", 1, mean(medrlamR[-c(1:5)]), 0, PEtR, 0,#
	"S", "J", 0.8, mean(medrlamS[-c(1:5)]), #
		((mean(medrlamS[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtS, #
		((PEtS/PEtR)-1)*100,#
	"T", "J", 0.6, mean(medrlamT[-c(1:5)]), #
		((mean(medrlamT[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtT, #
		((PEtT/PEtQ)-1)*100,#
	"U", "J", 0.4, mean(medrlamU[-c(1:5)]), #
		((mean(medrlamU[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtU, #
		((PEtU/PEtR)-1)*100,#
	"V", "J", 0.2, mean(medrlamV[-c(1:5)]), #
		((mean(medrlamV[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtV, #
		((PEtV/PEtR)-1)*100,#
	"W", "SA", 1, mean(medrlamW[-c(1:5)]), 0, PEtW, 0,#
	"X", "SA", 0.8, mean(medrlamX[-c(1:5)]),#
		((mean(medrlamX[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtX, #
		((PEtX/PEtW)-1)*100,#
	"Y", "SA", 0.6, mean(medrlamY[-c(1:5)]), #
		((mean(medrlamY[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtY, #
		((PEtY/PEtW)-1)*100,#
	"Z", "SA", 0.4, mean(medrlamZ[-c(1:5)]),#
		((mean(medrlamZ[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtZ, #
		((PEtZ/PEtW)-1)*100,#
	"ZZ", "J", 0.2, mean(medrlamZZ[-c(1:5)]), #
		((mean(medrlamZZ[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtZZ, #
		((PEtZZ/PEtW)-1)*100),#
nrow=15,ncol=7, byrow=TRUE, dimnames=list(rows,cols))#
tableX4
# Turn parameters into numeric variables for graphs#
tableX4 = as.data.frame(tableX4)#
tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")] = #
	lapply(tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")],#
  	function(x) as.numeric(levels(x))[x])#
head(tableX4)
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.8), ylim=c(0,0.8),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6,0.8), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.8, col="black")#
lines(c(0,0.2,0.4,0.6,0.8), subset(tableX4, ReleaseAge == "J")$Pext, lty=2, lwd=1.8, col="black")#
lines(c(0,0.2,0.4,0.6,0.8), subset(tableX4, ReleaseAge == "SA")$Pext, lty=3, lwd=1.8, col="black")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), #
	pch=c(1,2,3), lty=c(1,2,3), cex=1.2, box.lwd=1.5)
tableX4
cols = c("Scenario","ReleaseAge","Sr","Lambda","DeltaLambda","Pext","DeltaPext")#
rows = c("M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","ZZ")#
tableX4 = matrix(c(#
	"M", "H", 1, mean(medrlamM[-c(1:5)]), 0, PEtM, 0,#
	"N", "H", 0.8, mean(medrlamN[-c(1:5)]), #
		((mean(medrlamN[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtN, #
		((PEtN/PEtM)-1)*100,#
	"O", "H", 0.6, mean(medrlamO[-c(1:5)]), #
		((mean(medrlamO[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtO, #
		((PEtO/PEtM)-1)*100,#
	"P", "H", 0.4, mean(medrlamP[-c(1:5)]),#
		((mean(medrlamP[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtP, #
		((PEtP/PEtM)-1)*100,#
	"Q", "H", 0.2, mean(medrlamQ[-c(1:5)]),#
		((mean(medrlamQ[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtQ, #
		((PEtQ/PEtM)-1)*100,#
	"R", "J", 1, mean(medrlamR[-c(1:5)]), 0, PEtR, 0,#
	"S", "J", 0.8, mean(medrlamS[-c(1:5)]), #
		((mean(medrlamS[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtS, #
		((PEtS/PEtR)-1)*100,#
	"T", "J", 0.6, mean(medrlamT[-c(1:5)]), #
		((mean(medrlamT[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtT, #
		((PEtT/PEtQ)-1)*100,#
	"U", "J", 0.4, mean(medrlamU[-c(1:5)]), #
		((mean(medrlamU[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtU, #
		((PEtU/PEtR)-1)*100,#
	"V", "J", 0.2, mean(medrlamV[-c(1:5)]), #
		((mean(medrlamV[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtV, #
		((PEtV/PEtR)-1)*100,#
	"W", "SA", 1, mean(medrlamW[-c(1:5)]), 0, PEtW, 0,#
	"X", "SA", 0.8, mean(medrlamX[-c(1:5)]),#
		((mean(medrlamX[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtX, #
		((PEtX/PEtW)-1)*100,#
	"Y", "SA", 0.6, mean(medrlamY[-c(1:5)]), #
		((mean(medrlamY[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtY, #
		((PEtY/PEtW)-1)*100,#
	"Z", "SA", 0.4, mean(medrlamZ[-c(1:5)]),#
		((mean(medrlamZ[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtZ, #
		((PEtZ/PEtW)-1)*100,#
	"ZZ", "SA", 0.2, mean(medrlamZZ[-c(1:5)]), #
		((mean(medrlamZZ[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtZZ, #
		((PEtZZ/PEtW)-1)*100),#
nrow=15,ncol=7, byrow=TRUE, dimnames=list(rows,cols))#
tableX4
# Turn parameters into numeric variables for graphs#
tableX4 = as.data.frame(tableX4)#
tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")] = #
	lapply(tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")],#
  	function(x) as.numeric(levels(x))[x])#
head(tableX4)#
#
### Plot extinction as a consequence of acclimation effect#
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.8), ylim=c(0,0.8),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6,0.8), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.8, col="black")#
lines(c(0,0.2,0.4,0.6,0.8), subset(tableX4, ReleaseAge == "J")$Pext, lty=2, lwd=1.8, col="black")#
lines(c(0,0.2,0.4,0.6,0.8), subset(tableX4, ReleaseAge == "SA")$Pext, lty=3, lwd=1.8, col="black")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), #
	pch=c(1,2,3), lty=c(1,2,3), cex=1.2, box.lwd=1.5)
### Figure 2#
# Plot simulated adult abundance under different reintroduction scenarios using a multi-panel plot with different reintroduction scenarios#
par(mfrow=c(4,3), oma=c(5,4,0,0)+0.5, mar=c(0,0,1,1)+0.5, cex.lab=1.7) #
scenarios = c("A","B","C","D","E","F","G","H","I","J","K","L")#
max = 90		# set max for y axis & panel labels#
			# will have to adjust manually under different simulation scenarios#
for (i in 1:length(scenarios)){#
	scenario = scenarios[i]#
	plot(1:t, apply(subset(results, Scenario == scenario & Stage == "Breeders")#
		[,-c(1:2)],2,median), type="l", lty=1, lwd=4, ylim=c(0,max), #
		axes=FALSE, cex.lab=1.4, cex.axis=2, xlab="Time (years)", ylab="Abundance")#
		# plots median abundance#
	if (i > 9){	# restricts axis labels to bottom row#
		axis(side=1, c(0,5,10,15,20,25,30), lwd=4, cex.axis=1.3)} #
		else {axis(side=1, labels=FALSE, lwd=4, cex.axis=1.3)}#
	if (i %in%  c(1,4,7,10)){	# restricts y-axis labels to panels in c(1,4,7,10)#
		axis(side=2, lwd=4, cex.axis=1.3)} else {#
			axis(side=2, labels=FALSE,lwd=4, cex.axis=1.3)}	#
	lines(1:t, apply(subset(results, Scenario == scenario & Stage == "Breeders")[,-c(1:2)],#
		2,quantile,probs=c(0.025)), lty=3, lwd=4, col="darkgrey")	# adds lower CI#
	lines(1:t, apply(subset(results, Scenario == scenario & Stage == "Breeders")[,-c(1:2)],#
		2,quantile,probs=c(0.975)), lty=3, lwd=4, col="darkgrey")	# adds upper CI#
	if(scenario == "A") {legend(4,0.97*max, c("Median abundance","95% CI"), inset=0.05, cex=1,#
		lty=c(1,3), col=c("black","darkgrey"),#
		lwd=c(3,3), box.lwd=2)}#
	text(2,0.93*max, scenarios[i], cex=2)#
	title(xlab = "Time (years)", ylab = "Abundance", outer=TRUE, line=3, cex.sub=2)#
}
par(mfrow=c(2,2), oma=c(5,4,0,0)+0.5, mar=c(0,0,1,1)+0.5, cex.lab=1.7)#
scenarios = c("CNFc","CNFp","ABRPc","ABRPp")#
labels = c("A","B","C","D")#
max = 40	# set max for y axis & panel labels; may have to adjust manually to fit results#
for (i in 1:length(scenarios)){#
	scenario = scenarios[i]#
	plot(1:t, apply(subset(results, Scenario == scenario & Stage == "Breeders")[,-c(1:2)],2,median),#
		type="l", lty=1, lwd=4, ylim=c(0,max), axes=FALSE, cex.lab=1.4, cex.axis=2, #
		xlab="Time (years)", ylab="Abundance")#
	lines(1:t, 0.5*apply(subset(results, Scenario == scenario & Stage == "ObsBreeders")[,-c(1:2)],#
		2,median), lty=2, lwd=4, col="gray48")#
	lines(1:t, apply(subset(results, Scenario == scenario & Stage == "ObsBreeders")[,-c(1:2)],#
		2,median), lty=3, lwd=4, col="gray48")#
	lines(1:t, 2*apply(subset(results, Scenario == scenario & Stage == "ObsBreeders")[,-c(1:2)],#
		2,median), lty=4, lwd=4, col="gray48")#
	lines(1:t, 3*apply(subset(results, Scenario == scenario & Stage == "ObsBreeders")[,-c(1:2)],#
		2,median), lty=5, lwd=4, col="gray48")#
	if (i > 2){			# restricts x-axis labels to bottom row#
		axis(side=1, c(0,5,10,15,20,25,30), lwd=4, cex.axis=1.3)} #
		else {axis(side=1, labels=FALSE, lwd=4, cex.axis=1.3)}#
	if (i %% 2 != 0){	# restricts y-axis labels to left column#
		axis(side=2, lwd=4, cex.axis=1.3)} #
		else {axis(side=2, labels=FALSE,lwd=4, cex.axis=1.3)}#
	if(i == 1){			# adds legend to first plot#
		legend(2,0.85*max, #
		c(expression("True N"),expression(N[o]~' - '~italic( p)~'= 0.05'), #
		expression(N[o]~' - '~italic( p)~'= 0.15'),expression(N[o]~' - '~italic( p)~'= 0.25'),#
		expression(N[o]~' - '~italic( p)~'= 0.35')), inset=0.01,#
		cex=1,lty=c(1,2,3,4,5), col=c("black","gray48","gray48","gray48","gray48"),#
		lwd=c(3,3,3,3,3), box.lwd=2)#
		}#
	# manually label extinction probabilities for each scenario; obtain probs from e.g., PECNFc[30]#
	if(i == 1){text(24, 0.94*max, expression(italic(P[e])~' = 0.23'), cex=1.2)}#
	if(i == 2){text(24, 0.94*max, expression(italic(P[e])~' = 0.09'), cex=1.2)}#
	if(i == 3){text(24, 0.94*max, expression(italic(P[e])~' = 0.60'), cex=1.2)}#
	if(i == 4){text(24, 0.94*max, expression(italic(P[e])~' = 0.11'), cex=1.2)}#
	text(3,0.95*max, labels[i], cex=2)#
	title(xlab = "Time (years)", ylab = "Abundance", outer=TRUE, line=3, cex.sub=2)#
}
par(mfrow=c(2,2), oma=c(5,4,0,0)+0.5, mar=c(0,0,1,1)+0.5, cex.lab=1.7)#
scenarios = c("CNFc","CNFp","ABRPc","ABRPp")#
labels = c("A","B","C","D")#
max = 40	# set max for y axis & panel labels; may have to adjust manually to fit results#
for (i in 1:length(scenarios)){#
	scenario = scenarios[i]#
	plot(1:t, apply(subset(results, Scenario == scenario & Stage == "Breeders")[,-c(1:2)],2,median),#
		type="l", lty=1, lwd=4, ylim=c(0,max), axes=FALSE, cex.lab=1.4, cex.axis=2, #
		xlab="Time (years)", ylab="Abundance")#
	lines(1:t, 0.5*apply(subset(results, Scenario == scenario & Stage == "ObsBreeders")[,-c(1:2)],#
		2,median), lty=2, lwd=4, col="gray48")#
	lines(1:t, apply(subset(results, Scenario == scenario & Stage == "ObsBreeders")[,-c(1:2)],#
		2,median), lty=3, lwd=4, col="gray48")#
	lines(1:t, 2*apply(subset(results, Scenario == scenario & Stage == "ObsBreeders")[,-c(1:2)],#
		2,median), lty=4, lwd=4, col="gray48")#
	lines(1:t, 3*apply(subset(results, Scenario == scenario & Stage == "ObsBreeders")[,-c(1:2)],#
		2,median), lty=5, lwd=4, col="gray48")#
	if (i > 2){			# restricts x-axis labels to bottom row#
		axis(side=1, c(0,5,10,15,20,25,30), lwd=4, cex.axis=1.3)} #
		else {axis(side=1, labels=FALSE, lwd=4, cex.axis=1.3)}#
	if (i %% 2 != 0){	# restricts y-axis labels to left column#
		axis(side=2, lwd=4, cex.axis=1.3)} #
		else {axis(side=2, labels=FALSE,lwd=4, cex.axis=1.3)}#
	if(i == 1){			# adds legend to first plot#
		legend(2,0.85*max, #
		c(expression("True N"),expression(N[o]~' - '~italic( p)~'= 0.05'), #
		expression(N[o]~' - '~italic( p)~'= 0.15'),expression(N[o]~' - '~italic( p)~'= 0.25'),#
		expression(N[o]~' - '~italic( p)~'= 0.35')), inset=0.01,#
		cex=1,lty=c(1,2,3,4,5), col=c("black","gray48","gray48","gray48","gray48"),#
		lwd=c(3,3,3,3,3), box.lwd=2)#
		}#
	# manually label extinction probabilities for each scenario; obtain probs from e.g., PECNFc[30]#
	if(i == 1){text(24, 0.94*max, expression(italic(P[e])~' = 0.23'), cex=1.2)}#
	if(i == 2){text(24, 0.94*max, expression(italic(P[e])~' = 0.07'), cex=1.2)}#
	if(i == 3){text(24, 0.94*max, expression(italic(P[e])~' = 0.61'), cex=1.2)}#
	if(i == 4){text(24, 0.94*max, expression(italic(P[e])~' = 0.10'), cex=1.2)}#
	text(3,0.95*max, labels[i], cex=2)#
	title(xlab = "Time (years)", ylab = "Abundance", outer=TRUE, line=3, cex.sub=2)#
}
cols = c("Scenario","ReleaseAge","Sr","Lambda","DeltaLambda","Pext","DeltaPext")#
rows = c("M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","ZZ")#
tableX4 = matrix(c(#
	"M", "H", 1, mean(medrlamM[-c(1:5)]), 0, PEtM, 0,#
	"N", "H", 0.8, mean(medrlamN[-c(1:5)]), #
		((mean(medrlamN[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtN, #
		((PEtN/PEtM)-1)*100,#
	"O", "H", 0.6, mean(medrlamO[-c(1:5)]), #
		((mean(medrlamO[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtO, #
		((PEtO/PEtM)-1)*100,#
	"P", "H", 0.4, mean(medrlamP[-c(1:5)]),#
		((mean(medrlamP[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtP, #
		((PEtP/PEtM)-1)*100,#
	"Q", "H", 0.2, mean(medrlamQ[-c(1:5)]),#
		((mean(medrlamQ[-c(1:5)])/(mean(medrlamM[-c(1:5)])))-1)*100, PEtQ, #
		((PEtQ/PEtM)-1)*100,#
	"R", "J", 1, mean(medrlamR[-c(1:5)]), 0, PEtR, 0,#
	"S", "J", 0.8, mean(medrlamS[-c(1:5)]), #
		((mean(medrlamS[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtS, #
		((PEtS/PEtR)-1)*100,#
	"T", "J", 0.6, mean(medrlamT[-c(1:5)]), #
		((mean(medrlamT[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtT, #
		((PEtT/PEtQ)-1)*100,#
	"U", "J", 0.4, mean(medrlamU[-c(1:5)]), #
		((mean(medrlamU[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtU, #
		((PEtU/PEtR)-1)*100,#
	"V", "J", 0.2, mean(medrlamV[-c(1:5)]), #
		((mean(medrlamV[-c(1:5)])/(mean(medrlamR[-c(1:5)])))-1)*100, PEtV, #
		((PEtV/PEtR)-1)*100,#
	"W", "SA", 1, mean(medrlamW[-c(1:5)]), 0, PEtW, 0,#
	"X", "SA", 0.8, mean(medrlamX[-c(1:5)]),#
		((mean(medrlamX[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtX, #
		((PEtX/PEtW)-1)*100,#
	"Y", "SA", 0.6, mean(medrlamY[-c(1:5)]), #
		((mean(medrlamY[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtY, #
		((PEtY/PEtW)-1)*100,#
	"Z", "SA", 0.4, mean(medrlamZ[-c(1:5)]),#
		((mean(medrlamZ[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtZ, #
		((PEtZ/PEtW)-1)*100,#
	"ZZ", "SA", 0.2, mean(medrlamZZ[-c(1:5)]), #
		((mean(medrlamZZ[-c(1:5)])/(mean(medrlamW[-c(1:5)])))-1)*100, PEtZZ, #
		((PEtZZ/PEtW)-1)*100),#
nrow=15,ncol=7, byrow=TRUE, dimnames=list(rows,cols))#
tableX4#
#
# Copy and paste top-model set into Excel file to tidy for publication#
clip = pipe("pbcopy","w")#
write.table(tableX4, file=clip, sep="\t", row.names=FALSE)#
close(clip)
# Turn parameters into numeric variables for graphs#
tableX4 = as.data.frame(tableX4)#
tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")] = #
	lapply(tableX4[,c("Sr","Lambda","DeltaLambda","Pext","DeltaPext")],#
  	function(x) as.numeric(levels(x))[x])#
head(tableX4)#
#
### Plot extinction as a consequence of acclimation effect#
plot(tableX4$Pext ~ I(1-tableX4$Sr), data=tableX4, axes=FALSE,#
	xlab=c("Acclimation effect"), ylab="Prob. of extinction", xlim=c(0,0.8), ylim=c(0,0.8),#
	pch=as.numeric(tableX4$ReleaseAge), cex.lab=1.4)#
axis(side=1, lwd=4, cex.axis=1.3)#
axis(side=2, lwd=4, cex.axis=1.3)#
lines(c(0,0.2,0.4,0.6,0.8), subset(tableX4, ReleaseAge == "H")$Pext, lty=1, lwd=1.8, col="black")#
lines(c(0,0.2,0.4,0.6,0.8), subset(tableX4, ReleaseAge == "J")$Pext, lty=2, lwd=1.8, col="black")#
lines(c(0,0.2,0.4,0.6,0.8), subset(tableX4, ReleaseAge == "SA")$Pext, lty=3, lwd=1.8, col="black")#
legend("topleft", inset=c(0.03), c("Hatchlings", "Juveniles","Subadults"), #
	pch=c(1,2,3), lty=c(1,2,3), cex=1.2, box.lwd=1.5)
library(plot3D)#
#
### plot Probability of EXTINCTION all hatchling, juvenile, and subad scenarios in 3-panel graph#
par(mfrow=c(1,3), oma=c(6,0,0,1)+0.5, mar=c(1,0,3,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
t = 30		# Number of years to project simulations#
r = 50		# Number of simulation replications;#
			# r = 100 here for shorter computing times; ~12 mins#
#
start_time <- Sys.time()#
#
### Population growth & quasi-extinction estimates#
rlam=matrix(0,r,t)		# Real (true) population growth#
olam=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext=matrix(0,r,t)		# Probability of quasi-extinction#
#
# We want to create a 3-D response surface for how extinction probability is influenced by release age (juv vs subadult), propagule size (no. of snakes), and release program duration (no. of years). We will do simulations for both juveniles and subadults and then produce graphs for both stages. We will run simulations for propagule size varying from 1-20 females per year, release duration varying from 1-20 years.#
#
## (1) snake release age (hatchling, juvenile, or subadult)#
## (2) annual propagule size (4-300 individuals/year; will be split into females only later)#
## (3) release duration (1-20 yr)#
#
#### Generate a matrix with all combinations of the aforementioned variables. This #
#
require(utils)#
#
releases = rep(seq(4,300,4),20)#
zeros = rep(0,1500)#
nyr = c(rep(1,75),rep(2,75),rep(3,75),rep(4,75),rep(5,75),	#
			rep(6,75),rep(7,75),rep(8,75),rep(9,75),rep(10,75),#
			rep(11,75),rep(12,75),rep(13,75),rep(14,75),rep(15,75),#
			rep(16,75),rep(17,75),rep(18,75),rep(19,75),rep(20,75))#
total = releases*nyr#
#
# create a dataframe for hatchling release scenarios#
nrelh = as.data.frame(cbind(releases,zeros,zeros,nyr,total))#
colnames(nrelh) = c("nrelh","nrelj","nrelsa","nyr","total")#
#
# now create a dataframe for juvenile release scenarios; slightly different order#
nrelj = as.data.frame(cbind(zeros,releases,zeros,nyr,total))#
colnames(nrelj) = c("nrelh","nrelj","nrelsa","nyr","total")#
#
# create a dataframe for subadult release scenarios#
nrelsa = as.data.frame(cbind(zeros,zeros,releases,nyr,total))#
colnames(nrelsa) = c("nrelh","nrelj","nrelsa","nyr","total")#
# bind the subadult and juvenile scenarios#
releases = rbind(nrelh,nrelj,nrelsa)#
#
# the multiplication of "total = releases*nyr" creates many scenarios that #
# are impractically large; e.g., releasing 300 individuals/year for 20 years. #
# This will cost a lot of computing time and #
# is biologically unfeasible/impractical. So, we can truncate this to only #
# evaluate scenarios that  release a total of 600 individuals (or, 300 females).#
scenarios = releases[ which(releases[,5] < 600),]#
#
n = length(scenarios[,1])#
### Create an empty matrix to dump all the results into#
RESULTS = matrix(0, nrow = 1, ncol = 32, dimnames=list(NA,c("Scenario","Stage",1:30)))#
	# Population projection results#
ProbExt = matrix(0, nrow = 1, ncol = 5, dimnames=list(NA, c("HatchRel","JuvRel","SubadRel","NoYears","ProbExt")))#
	# Probability of extinction results -- for 3D graph -- most important here#
### Use a for-loop to iteratively calculate demography under different management scenarios#
### by using each row of the scenarios object to provide unique combinations of parameters#
for (h in 1:n){			# For-loop for each repatriation scenario#
nrelh=scenarios[h,1] 		# Mean no. of 2-yr old subadults releases (both sexes)#
nrelj=scenarios[h,2]			# Mean number of 1 yr-old juveniles releases (both sexes)#
nrelsa=scenarios[h,3]		# Mean number of 1 yr-old juveniles releases (both sexes)#
nyr=scenarios[h,4] 			# Duration of the release program (years)#
#
mPsamp=0.2 	# Probabilty of sampling snakes (i.e., detection probability); #
			# this is hard-coded here for convenience b/c we aren't evaluating det. prob.#
SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
aPs = mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
bPs = (1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
#
Sr = 0.5			# Acclimation effect on survival (survival reduction) of released individuals	#
Srt = matrix(0,r,t)	# also hard coded here for convenience#
#
### Create some matrices and parameters for the model loop:#
Nh =  matrix(0,r,t)		# Abundance of hatchlings #
Nj = matrix(0,r,t) 		# Juveniles#
Nsa = matrix(0,r,t) 	# Subadults#
Na1 = matrix(0,r,t) 	# Primiparous adults#
Na = matrix(0,r,t) 		# Adults#
#
Nh[,1]=0		# Initial abundance of hatchlings#
Nj[,1]=0		# Juveniles#
Nsa[,1]=0		# Subadults#
Na1[,1]=0		# Primiparous adults#
Na[,1]=0		# Adults#
#
Nhr = matrix(0,r,t)		# Number of captive-reared hatchlings (0-yr olds) released#
Njr = matrix(0,r,t) 		# Number of captive-reared juveniles (1-yr olds) released#
Nsar = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
#
Nobreeders = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
Noimmatures = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
#
Nmax=100 			# Population ceiling for density dependence#
#### Population-projection model that accounts for imperfect detection#
#
for(i in 1:r){			# Replication loop; draws replicate-level means for survival at each stage#
#
ASai[i] = 100*Sai[i]			# Adults 		#
BSai[i] = 100*(1-Sai[i])		#
#
ASa1i[i] = 100*Sa1i[i]		 	# Primiparous adults	#
BSa1i[i] = 100*(1-Sa1i[i])#
#
ASsai[i] = 100*Ssai[i]		 	# Subadults	#
BSsai[i] = 100*(1-Ssai[i])#
#
ASji[i] = 100*Sji[i]			# Juveniles  		#
BSji[i] = 100*(1-Sji[i])#
#
AShi[i] = 100*Shi[i]		 	# Hatchlings	#
BShi[i] = 100*(1-Shi[i])#
#
for(j in 1:t){			# Projection loop; drawing annual demographic rates#
Sat[i,j]=rbeta(1,ASai[i],BSai[i])			# Adults#
Sa1t[i,j]=rbeta(1,ASa1i[i],BSa1i[i])		# Primiparous adults#
Ssat[i,j]=rbeta(1,ASsai[i],BSsai[i])		# Subadults#
Sjt[i,j]=rbeta(1,ASji[i],BSji[i])			# Juveniles#
Sht[i,j]=rbeta(1,aSh,bSh)					# Hatchlings#
Set[i,j]=rbeta(1,aSe,bSe)					# Egg survival#
Srt[i,j]=rbeta(1,100*Sr, 100*(1-Sr)) 		# Randomize the acclimation effect (Sr; survival reduction)#
#
# Drawing the number of released subadults and juveniles, and account for sex ratio to remove males#
if (j>0 && j<nyr+1) Nhr[i,j]=runif(1,0.8*nrelh,1.2*nrelh)*rbeta(1,aSR,bSR)#
if (j>0 && j<nyr+1) Njr[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
if (j>0 && j<nyr+1) Nsar[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
#
# Projection equation for adults#
if (j>1) Na[i,j]=round((Na[i,j-1]*Sat[i,j-1]+Na1[i,j-1]*Sa1t[i,j-1]*Ta1a[i,j-1])) else Na[i,j]=0#
round(Na[i,j],0)#
#
# Projection equation for primiparous adults#
if (j>1) Na1[i,j]=round((Na1[i,j-1]*(Sa1t[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Na1[i,j]=0#
round(Na1[i,j],0)#
#
# Density-dependence; decrease subadult survival considerably when population sizes get too high;#
# drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
if (Na[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
if (Na[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
#
# Projection equation for subadults#
if (j>1) Nsa[i,j]=round((Nsa[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa[i,j]=0#
round(Nsa[i,j],0)#
#
# Projection equation for juveniles#
if (j>1) Nj[i,j]=round((Nj[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
(Nhr[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj[i,j]=0#
round(Nj[i,j],0)#
#
# Good-year/bad-year function for probability of breeding#
if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
#
# Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
eggsa[i,j] = sum(rpois(round(Na[i,j]*Pbt[i,j],0),muFa))/2#
eggsa1[i,j] = sum(rpois(round(Na1[i,j]*Pbt[i,j],0),muFa1))/2#
round(eggsa[i,j],0)#
round(eggsa1[i,j],0)#
#
# Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
if (j>1) Nh[i,j] = round((eggsa[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggsa1[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh[i,j]=0#
round(Nh[i,j],0)#
#
# Sum the number of reproductive and immature individuals to facilitate the construction of figures#
Nbreeders = Na+Na1		# Sum all breeders at each time step#
Nimmatures = Nh+Nj+Nsa	# Sum all immatures at each time step#
#
# Implement sampling (detection) probability for adults and immatures#
Nobreeders[i,j]=sum(rbinom(Nbreeders[i,j],1,Psamp[i,j]))#
Noimmatures[i,j]=sum(rbinom(Nimmatures[i,j],1,Psamp[i,j]))#
#
# Calculate population growth rate#
if(j>5) rlam[i,j]=Nbreeders[i,j]/Nbreeders[i,j-1]#
if(j>5 && Nobreeders[i,j-1]>0) olam[i,j]= Nobreeders[i,j]/Nobreeders[i,j-1]#
if (Nbreeders[i,j]<5) Pext[i,j]=1 else Pext[i,j]=0 #
#
}}	# Close replication and projection loops#
#
# Create an categorical identifying variable of length r for each life stage#
stages = c("H","J","SA","PA","A","Imm","Breeders","ObsImm","ObsBreeders")#
for (l in 1:length(stages)){#
	Stage = as.data.frame(rep(stages[l],r))#
	assign(paste0("Stage",stages[l]),Stage)}#
#
# Bind the results from a scenario projection into a data frame#
scenario = rbind.data.frame(cbind.data.frame(StageH,Nh),cbind.data.frame(StageJ,Nj),#
	cbind.data.frame(StageSA,Nsa),cbind.data.frame(StagePA,Na1),cbind.data.frame(StageA,Na),#
	cbind.data.frame(StageImm,Nimmatures),cbind.data.frame(StageBreeders,Nbreeders), #
	cbind.data.frame(StageObsImm,Noimmatures),cbind.data.frame(StageObsBreeders,Nobreeders))#
scenario = cbind.data.frame(rep(rownames(scenarios)[h],r*length(stages)),scenario)#
colnames(scenario) = c("Scenario","Stage",1:30)#
#
RESULTS = rbind(RESULTS,scenario)	#
# Bind results from the scenario to an object with all scenario results#
medrlam = apply(rlam, 2, median, na.rm=TRUE)#
medolam = apply(olam, 2, median, na.rm=TRUE)#
#
PE = apply(Pext,2,sum)/r#
PEt = PE[t]#
#
muNhr = mean(apply(Nhr,1,sum))#
muNjr = mean(apply(Njr,1,sum))#
muNsar = mean(apply(Nsar,1,sum))#
#
assign(paste0("medrlam", rownames(scenarios)[h]), medrlam) #
assign(paste0("medolam", rownames(scenarios)[h]), medolam) #
#
assign(paste0("PE", rownames(scenarios)[h]), PE) #
assign(paste0("PEt", rownames(scenarios)[h]), PEt) #
#
assign(paste0("muNhr", rownames(scenarios)[h]), muNhr) #
assign(paste0("muNjr", rownames(scenarios)[h]), muNjr)#
assign(paste0("muNsar", rownames(scenarios)[h]), muNsar) #
#
# Create a probability of extinction (pe) matrix row that summarizes the total number of individuals released, the release program duration, and the resulting probability of extinction#
pe = as.matrix(0, nrow=1, ncol=5, #
	dimnames=list(NA, c("HatchRel","JuvRel","SubadRel","NoYears","ProbExt")))#
pe[1:5] = c(muNhr, muNjr, muNsar, nyr, PEt)#
#
# Bind the probability of extinction (pe) matrix row to an object that has all of the probability of extinction results together#
ProbExt = rbind(ProbExt, pe)#
#
} 	# Close scenario loop#
#
RESULTS = RESULTS[-c(1),]	# Remove top NA row from RESULTS#
ProbExt = ProbExt[-c(1),]	# Remove top NA row from ProbExt#
#
end_time <- Sys.time()#
end_time - start_time		# See how long model takes to run
library(plot3D)#
#
### plot Probability of EXTINCTION all hatchling, juvenile, and subad scenarios in 3-panel graph#
par(mfrow=c(1,3), oma=c(6,0,0,1)+0.5, mar=c(1,0,3,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(6,4,0,1)+0.5, mar=c(1,0,3,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(6,2,0,1)+0.5, mar=c(1,0,3,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(6,2,2,1)+0.5, mar=c(1,0,3,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(6,2,0,4)+0.5, mar=c(1,0,3,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(6,2,0,1)+0.5, mar=c(1,0,5,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(6,2,0,1)+0.5, mar=c(1,0,3,5)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(6,2,0,1)+0.5, mar=c(,0,5,5)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(6,2,0,3)+0.5, mar=c(0,0,3,5)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
### plot Probability of EXTINCTION all hatchling, juvenile, and subad scenarios in 3-panel graph#
par(mfrow=c(1,3), oma=c(6,2,0,1)+2, mar=c(0,0,3,5)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(6,2,0,1)+4, mar=c(0,0,3,5)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
### plot Probability of EXTINCTION all hatchling, juvenile, and subad scenarios in 3-panel graph#
par(mfrow=c(1,3), oma=c(6,2,0,1)+2, mar=c(0,0,3,3)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(3,2,0,1)+2, mar=c(0,0,3,3)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
### plot Probability of EXTINCTION all hatchling, juvenile, and subad scenarios in 3-panel graph#
par(mfrow=c(1,3), oma=c(3,3,3,3)+1.5, mar=c(3,3,1,3)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
### plot Probability of EXTINCTION all hatchling, juvenile, and subad scenarios in 3-panel graph#
par(mfrow=c(1,3), oma=c(0,0,0,0)+1.5, mar=c(3,3,1,3)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
### plot Probability of EXTINCTION all hatchling, juvenile, and subad scenarios in 3-panel graph#
par(mfrow=c(1,3), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,1)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
### plot Probability of EXTINCTION all hatchling, juvenile, and subad scenarios in 3-panel graph#
par(mfrow=c(1,3), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,2), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.201)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"E",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.201)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"F",cex=2)
par(mfrow=c(1,2), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.201)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.201)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
t = 30		# Number of years to project simulations#
r = 100		# Number of simulation replications;#
			# r = 100 here for shorter computing times; ~12 mins#
#
start_time <- Sys.time()#
#
### Population growth & quasi-extinction estimates#
rlam=matrix(0,r,t)		# Real (true) population growth#
olam=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext=matrix(0,r,t)		# Probability of quasi-extinction#
#
# We want to create a 3-D response surface for how extinction probability is influenced by release age (juv vs subadult), propagule size (no. of snakes), and release program duration (no. of years). We will do simulations for both juveniles and subadults and then produce graphs for both stages. We will run simulations for propagule size varying from 1-20 females per year, release duration varying from 1-20 years.#
#
## (1) snake release age (hatchling, juvenile, or subadult)#
## (2) annual propagule size (4-300 individuals/year; will be split into females only later)#
## (3) release duration (1-20 yr)#
#
#### Generate a matrix with all combinations of the aforementioned variables. This #
#
require(utils)#
#
releases = rep(seq(4,300,4),20)#
zeros = rep(0,1500)#
nyr = c(rep(1,75),rep(2,75),rep(3,75),rep(4,75),rep(5,75),	#
			rep(6,75),rep(7,75),rep(8,75),rep(9,75),rep(10,75),#
			rep(11,75),rep(12,75),rep(13,75),rep(14,75),rep(15,75),#
			rep(16,75),rep(17,75),rep(18,75),rep(19,75),rep(20,75))#
total = releases*nyr#
#
# create a dataframe for hatchling release scenarios#
nrelh = as.data.frame(cbind(releases,zeros,zeros,nyr,total))#
colnames(nrelh) = c("nrelh","nrelj","nrelsa","nyr","total")#
#
# now create a dataframe for juvenile release scenarios; slightly different order#
nrelj = as.data.frame(cbind(zeros,releases,zeros,nyr,total))#
colnames(nrelj) = c("nrelh","nrelj","nrelsa","nyr","total")#
#
# create a dataframe for subadult release scenarios#
nrelsa = as.data.frame(cbind(zeros,zeros,releases,nyr,total))#
colnames(nrelsa) = c("nrelh","nrelj","nrelsa","nyr","total")#
# bind the subadult and juvenile scenarios#
releases = rbind(nrelh,nrelj,nrelsa)#
#
# the multiplication of "total = releases*nyr" creates many scenarios that #
# are impractically large; e.g., releasing 300 individuals/year for 20 years. #
# This will cost a lot of computing time and #
# is biologically unfeasible/impractical. So, we can truncate this to only #
# evaluate scenarios that  release a total of 600 individuals (or, 300 females).#
scenarios = releases[ which(releases[,5] < 600),]#
#
n = length(scenarios[,1])#
### Create an empty matrix to dump all the results into#
RESULTS = matrix(0, nrow = 1, ncol = 32, dimnames=list(NA,c("Scenario","Stage",1:30)))#
	# Population projection results#
ProbExt = matrix(0, nrow = 1, ncol = 5, dimnames=list(NA, c("HatchRel","JuvRel","SubadRel","NoYears","ProbExt")))#
	# Probability of extinction results -- for 3D graph -- most important here#
### Use a for-loop to iteratively calculate demography under different management scenarios#
### by using each row of the scenarios object to provide unique combinations of parameters#
for (h in 1:n){			# For-loop for each repatriation scenario#
nrelh=scenarios[h,1] 		# Mean no. of 2-yr old subadults releases (both sexes)#
nrelj=scenarios[h,2]			# Mean number of 1 yr-old juveniles releases (both sexes)#
nrelsa=scenarios[h,3]		# Mean number of 1 yr-old juveniles releases (both sexes)#
nyr=scenarios[h,4] 			# Duration of the release program (years)#
#
mPsamp=0.2 	# Probabilty of sampling snakes (i.e., detection probability); #
			# this is hard-coded here for convenience b/c we aren't evaluating det. prob.#
SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
aPs = mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
bPs = (1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
#
Sr = 0.5			# Acclimation effect on survival (survival reduction) of released individuals	#
Srt = matrix(0,r,t)	# also hard coded here for convenience#
#
### Create some matrices and parameters for the model loop:#
Nh =  matrix(0,r,t)		# Abundance of hatchlings #
Nj = matrix(0,r,t) 		# Juveniles#
Nsa = matrix(0,r,t) 	# Subadults#
Na1 = matrix(0,r,t) 	# Primiparous adults#
Na = matrix(0,r,t) 		# Adults#
#
Nh[,1]=0		# Initial abundance of hatchlings#
Nj[,1]=0		# Juveniles#
Nsa[,1]=0		# Subadults#
Na1[,1]=0		# Primiparous adults#
Na[,1]=0		# Adults#
#
Nhr = matrix(0,r,t)		# Number of captive-reared hatchlings (0-yr olds) released#
Njr = matrix(0,r,t) 		# Number of captive-reared juveniles (1-yr olds) released#
Nsar = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
#
Nobreeders = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
Noimmatures = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
#
Nmax=100 			# Population ceiling for density dependence#
#### Population-projection model that accounts for imperfect detection#
#
for(i in 1:r){			# Replication loop; draws replicate-level means for survival at each stage#
#
ASai[i] = 100*Sai[i]			# Adults 		#
BSai[i] = 100*(1-Sai[i])		#
#
ASa1i[i] = 100*Sa1i[i]		 	# Primiparous adults	#
BSa1i[i] = 100*(1-Sa1i[i])#
#
ASsai[i] = 100*Ssai[i]		 	# Subadults	#
BSsai[i] = 100*(1-Ssai[i])#
#
ASji[i] = 100*Sji[i]			# Juveniles  		#
BSji[i] = 100*(1-Sji[i])#
#
AShi[i] = 100*Shi[i]		 	# Hatchlings	#
BShi[i] = 100*(1-Shi[i])#
#
for(j in 1:t){			# Projection loop; drawing annual demographic rates#
Sat[i,j]=rbeta(1,ASai[i],BSai[i])			# Adults#
Sa1t[i,j]=rbeta(1,ASa1i[i],BSa1i[i])		# Primiparous adults#
Ssat[i,j]=rbeta(1,ASsai[i],BSsai[i])		# Subadults#
Sjt[i,j]=rbeta(1,ASji[i],BSji[i])			# Juveniles#
Sht[i,j]=rbeta(1,aSh,bSh)					# Hatchlings#
Set[i,j]=rbeta(1,aSe,bSe)					# Egg survival#
Srt[i,j]=rbeta(1,100*Sr, 100*(1-Sr)) 		# Randomize the acclimation effect (Sr; survival reduction)#
#
# Drawing the number of released subadults and juveniles, and account for sex ratio to remove males#
if (j>0 && j<nyr+1) Nhr[i,j]=runif(1,0.8*nrelh,1.2*nrelh)*rbeta(1,aSR,bSR)#
if (j>0 && j<nyr+1) Njr[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
if (j>0 && j<nyr+1) Nsar[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
#
# Projection equation for adults#
if (j>1) Na[i,j]=round((Na[i,j-1]*Sat[i,j-1]+Na1[i,j-1]*Sa1t[i,j-1]*Ta1a[i,j-1])) else Na[i,j]=0#
round(Na[i,j],0)#
#
# Projection equation for primiparous adults#
if (j>1) Na1[i,j]=round((Na1[i,j-1]*(Sa1t[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Na1[i,j]=0#
round(Na1[i,j],0)#
#
# Density-dependence; decrease subadult survival considerably when population sizes get too high;#
# drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
if (Na[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
if (Na[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
#
# Projection equation for subadults#
if (j>1) Nsa[i,j]=round((Nsa[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa[i,j]=0#
round(Nsa[i,j],0)#
#
# Projection equation for juveniles#
if (j>1) Nj[i,j]=round((Nj[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
(Nhr[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj[i,j]=0#
round(Nj[i,j],0)#
#
# Good-year/bad-year function for probability of breeding#
if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
#
# Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
eggsa[i,j] = sum(rpois(round(Na[i,j]*Pbt[i,j],0),muFa))/2#
eggsa1[i,j] = sum(rpois(round(Na1[i,j]*Pbt[i,j],0),muFa1))/2#
round(eggsa[i,j],0)#
round(eggsa1[i,j],0)#
#
# Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
if (j>1) Nh[i,j] = round((eggsa[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggsa1[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh[i,j]=0#
round(Nh[i,j],0)#
#
# Sum the number of reproductive and immature individuals to facilitate the construction of figures#
Nbreeders = Na+Na1		# Sum all breeders at each time step#
Nimmatures = Nh+Nj+Nsa	# Sum all immatures at each time step#
#
# Implement sampling (detection) probability for adults and immatures#
Nobreeders[i,j]=sum(rbinom(Nbreeders[i,j],1,Psamp[i,j]))#
Noimmatures[i,j]=sum(rbinom(Nimmatures[i,j],1,Psamp[i,j]))#
#
# Calculate population growth rate#
if(j>5) rlam[i,j]=Nbreeders[i,j]/Nbreeders[i,j-1]#
if(j>5 && Nobreeders[i,j-1]>0) olam[i,j]= Nobreeders[i,j]/Nobreeders[i,j-1]#
if (Nbreeders[i,j]<5) Pext[i,j]=1 else Pext[i,j]=0 #
#
}}	# Close replication and projection loops#
#
# Create an categorical identifying variable of length r for each life stage#
stages = c("H","J","SA","PA","A","Imm","Breeders","ObsImm","ObsBreeders")#
for (l in 1:length(stages)){#
	Stage = as.data.frame(rep(stages[l],r))#
	assign(paste0("Stage",stages[l]),Stage)}#
#
# Bind the results from a scenario projection into a data frame#
scenario = rbind.data.frame(cbind.data.frame(StageH,Nh),cbind.data.frame(StageJ,Nj),#
	cbind.data.frame(StageSA,Nsa),cbind.data.frame(StagePA,Na1),cbind.data.frame(StageA,Na),#
	cbind.data.frame(StageImm,Nimmatures),cbind.data.frame(StageBreeders,Nbreeders), #
	cbind.data.frame(StageObsImm,Noimmatures),cbind.data.frame(StageObsBreeders,Nobreeders))#
scenario = cbind.data.frame(rep(rownames(scenarios)[h],r*length(stages)),scenario)#
colnames(scenario) = c("Scenario","Stage",1:30)#
#
RESULTS = rbind(RESULTS,scenario)	#
# Bind results from the scenario to an object with all scenario results#
medrlam = apply(rlam, 2, median, na.rm=TRUE)#
medolam = apply(olam, 2, median, na.rm=TRUE)#
#
PE = apply(Pext,2,sum)/r#
PEt = PE[t]#
#
muNhr = mean(apply(Nhr,1,sum))#
muNjr = mean(apply(Njr,1,sum))#
muNsar = mean(apply(Nsar,1,sum))#
#
assign(paste0("medrlam", rownames(scenarios)[h]), medrlam) #
assign(paste0("medolam", rownames(scenarios)[h]), medolam) #
#
assign(paste0("PE", rownames(scenarios)[h]), PE) #
assign(paste0("PEt", rownames(scenarios)[h]), PEt) #
#
assign(paste0("muNhr", rownames(scenarios)[h]), muNhr) #
assign(paste0("muNjr", rownames(scenarios)[h]), muNjr)#
assign(paste0("muNsar", rownames(scenarios)[h]), muNsar) #
#
# Create a probability of extinction (pe) matrix row that summarizes the total number of individuals released, the release program duration, and the resulting probability of extinction#
pe = as.matrix(0, nrow=1, ncol=5, #
	dimnames=list(NA, c("HatchRel","JuvRel","SubadRel","NoYears","ProbExt")))#
pe[1:5] = c(muNhr, muNjr, muNsar, nyr, PEt)#
#
# Bind the probability of extinction (pe) matrix row to an object that has all of the probability of extinction results together#
ProbExt = rbind(ProbExt, pe)#
#
} 	# Close scenario loop#
#
RESULTS = RESULTS[-c(1),]	# Remove top NA row from RESULTS#
ProbExt = ProbExt[-c(1),]	# Remove top NA row from ProbExt#
#
end_time <- Sys.time()#
end_time - start_time		# See how long model takes to run
par(mfrow=c(1,3), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,2), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.201)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.201)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
par(mfrow=c(1,2), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.201)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.201)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", zlim=c(0,0.2),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
par(mfrow=c(1,2), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.11)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.11)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", zlim=c(0,0.2),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
par(mfrow=c(1,3), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,2), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.11)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,20), ylim=c(0,300), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.11)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", zlim=c(0,0.2),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
par(mfrow=c(1,2), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.11)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.11)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", zlim=c(0,0.2),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
par(mfrow=c(1,2), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.11)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.11)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h",#
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
par(mfrow=c(1,2), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h",#
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
releases
muNhr
muNsar
Nsar
apply(Nsar,1,sum)
sum(Nsar[1,])
tail(releases)
releases2 = subset(releases,releases$total<300)
tail(releases2)
### plot Probability of EXTINCTION all hatchling, juvenile, and subad scenarios#
### in 3-panel graph -- but subset to EXTINCTION < 0.20#
par(mfrow=c(1,2), oma=c(3,3,3,3)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h",#
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
par(mfrow=c(1,2), oma=c(2,2,2,2)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h",#
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
### plot Probability of EXTINCTION all hatchling, juvenile, and subad scenarios#
### in 3-panel graph -- but subset to EXTINCTION < 0.20#
par(mfrow=c(1,2), oma=c(2,2,2,2)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.5, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h",#
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
par(mfrow=c(1,2), oma=c(2,2,2,2)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=0.5, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=0.8, type="h",#
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
### in 3-panel graph -- but subset to EXTINCTION < 0.20#
par(mfrow=c(1,3), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"NA",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h",#
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)
par(mfrow=c(1,3), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
par(mfrow=c(1,3), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h",#
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"NA",cex=2)
par(mfrow=c(1,3), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
scatter3D(res[,1], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", 	#
	theta=125, phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",	#
	ticktype="detailed",  zlim=c(0,1), lwd=1, cex.axis=0.8, cex.lab=1, type="h",#
	colkey=list(plot=FALSE))#
text(locator(1),"A",cex=2)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(plot=FALSE))#
text(locator(1),"B",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"C",cex=2)
### in 3-panel graph -- but subset to EXTINCTION < 0.20#
par(mfrow=c(1,3), oma=c(0,0,0,0)+1.5, mar=c(2,2,1,2)+0.5, cex.lab=1.7)#
#
res = subset(ProbExt, ProbExt[,2] != 0)	# JUVENILES#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,1.0),#
	colkey=list(plot=FALSE))#
text(locator(1),"D",cex=2)#
#
res = subset(ProbExt, ProbExt[,3] != 0)	# SUBADULTS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,3], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h",#
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,1.0),#
	colkey=list(length=0.6,width=1,cex.clab=1,cex.axis=0.7,dist=0.1))#
text(locator(1),"E",cex=2)#
#
res = subset(ProbExt, ProbExt[,1] != 0)	# HATCHLINGS#
res = subset(res, res[,5] < 0.21)	#
scatter3D(res[,2], res[,4], res[,5], clab=expression(italic(P[e])), pch=19, bty="g", theta=125,#
	phi=5, xlab="No. of females", ylab="No. of years", zlab="Prob. of extinction",#
	ticktype="detailed", cex.axis=0.8, cex.lab=1, type="h", #
	xlim=c(0,300), ylim=c(0,20), zlim=c(0,0.20),#
	colkey=list(plot=FALSE))#
text(locator(1),"NA",cex=2)
citation()
m52 = list(psi~SP+INT+Season,p~SP)
m52
install.packages("R2WinBUGS", dependencies=TRUE)
library(R2WinBUGS)
WINE <- "/Applications/Darwine/Wine.bundle/Contents/bin/wine"
WINEPATH <- "/Applications/Darwine/Wine.bundle/Contents/bin/winepath"
BUGS.DIR <- "/Users/Brian/Wine Files/drive_c/Program Files/winbugs14_full_patched"
?ddist()
?ddist
library(R2WinBUGS)
?ddist
?ddist()
?dist()
dpois()
pois()
rpois()
qpois()
rpois()
rpois(10,10)
dpois(10,10)
qpois(10,10)
rpois(10,10)
dpois(10,10)
plot(density(rbeta(n=10000, shape1=2, shape2=4)))
hist(rbeta(10000, 2,4) nclass=100, col="gray")
hist(rbeta(10000,2,4) nclass=100, col="gray")
hist(rbeta(10000,2,4), nclass=100, col="gray")
hist(rpois(10000,2,4), nclass=100, col="gray")
hist(rpois(10000,2), nclass=100, col="gray")
hist(rpois(10000,4), nclass=100, col="gray")
hist(rpois(10000,8), nclass=100, col="gray")
hist(rbinom(10000,8), nclass=100, col="gray")
hist(rbinom(10000,prob=0.6), nclass=100, col="gray")
hist(rbinom(0.6, 10000), nclass=100, col="gray")
?rbinom()
hist(rnorm(0.6, 10000), nclass=100, col="gray")
hist(rnorm(5, 1), nclass=100, col="gray")
?rnorm()
y = c(25,14,68,79,64,139,49,119,111)#
A = factor(c(1,1,1,2,2,2,3,3,3))#
X = c(1,14,22,2,9,20,2,13,22)#
plot(X,y, col=c(rep("red",3), rep("blue",3), rep("green",3)),#
	xlim=cc(-1,25), ylim=c(0,140))
plot(X,y, col=c(rep("red",3), rep("blue",3), rep("green",3)),#
	xlim=c(-1,25), ylim=c(0,140))
summary(fm = lm(y ~ A-1 + X))
summary(fm <- lm(y ~ A-1 + X))
A
A-1
A
str(A)
model.matrix(~A + X)
library(statmod)#
library(SuppDists)
install.packages("SuppDists", dependencies=TRUE)
D
library(SuppDists)
r = 100#
t = 30
mSh = 0.52  		#
varSh = 0.1							# Variance of mean#
aSh = mSh*((mSh*(1-mSh)/(varSh^2))-1) 	 	#
bSh = (1-mSh)*((mSh*(1-mSh)/(varSh^2))-1) #
Shi = matrix(rbeta(r,aSh,bSh),r,1)	# Parametric uncertainty #
SDmShi = matrix(rinvgauss(r,varSh^2,1),r,1)#
AShi = matrix(0,r,1)				# beta distribution shape parameters#
BShi = matrix(0,r,1)				# beta distribution shape parameters#
Sht = matrix(0,r,t)
mSj = 0.60  		#
varSj = 0.1		# Variance of mean#
aSj = mSj*((mSj*(1-mSj)/(varSj^2))-1) 	 	#
bSj = (1-mSj)*((mSj*(1-mSj)/(varSj^2))-1) #
Sji = matrix(rbeta(r,aSj,bSj),r,1)			# Parametric uncertainty #
SDmSji = matrix(rinvgauss(r,varSj^2,1),r,1)#
ASji = matrix(0,r,1)				# beta distribution shape parameters#
BSji = matrix(0,r,1)				# beta distribution shape parameters#
Sjt = matrix(0,r,t)					# annual variation survival
mSsa = 0.70  		#
varSsa = 0.1		# Variance of mean #
aSsa = mSsa*((mSsa*(1-mSsa)/(varSsa^2))-1) 	 	#
bSsa = (1-mSsa)*((mSsa*(1-mSsa)/(varSsa^2))-1) #
Ssai = matrix(rbeta(r,aSsa,bSsa),r,1)			# Parametric uncertainty #
SDmSsai = matrix(rinvgauss(r,varSsa^2,1),r,1)#
ASsai = matrix(0,r,1)				# beta distribution shape parameters#
BSsai = matrix(0,r,1)				# beta distribution shape parameters#
Ssat = matrix(0,r,t)
mSa1 = 0.80	#
varSa1 = 0.1		# Variance of mean #
aSa1 = mSa1*((mSa1*(1-mSa1)/(varSa1^2))-1) 	 	#
bSa1 = (1-mSa1)*((mSa1*(1-mSa1)/(varSa1^2))-1) #
Sa1i = matrix(rbeta(r,aSa1,bSa1),r,1)			# Parametric uncertainty #
SDmSa1i = matrix(rinvgauss(r,varSa1^2,1),r,1)#
ASa1i = matrix(0,r,1)				# beta distribution shape parameters#
BSa1i = matrix(0,r,1)				# beta distribution shape parameters#
Spat = matrix(0,r,t)
mSa = 0.85 		#
varSa = 0.1		# Variance of mean#
aSa = mSa*((mSa*(1-mSa)/(varSa^2))-1) 	 	#
bSa = (1-mSa)*((mSa*(1-mSa)/(varSa^2))-1) #
Sai = matrix(rbeta(r,aSa,bSa),r,1)			# Parametric uncertainty #
SDmSai = matrix(rinvgauss(r,varSa^2,1),r,1)#
ASai = matrix(0,r,1)				# beta distribution shape parameters#
BSai = matrix(0,r,1)				# beta distribution shape parameters#
Sat = matrix(0,r,t)
### The first four stages should theoretically transition into the next age stage after one year. However, there may be uncertainty if individuals vary in growth and individuals remain in stages, especially as they age. To model this uncertainty, we modeled transition probability declining from 0.99 with each successive stage up to the primiparous adult stage, until when primiparous females all transition to be adults.#
mThj = 0.99  			# Mean transition from hatchling to juvenile#
varThj = 0.01		#
aThj = mSh*((mSh*(1-mSh)/varSh^2)-1)#
bThj = (1-mSh)*((mSh*(1-mSh)/varSh^2)-1)#
Thj = matrix(rbeta(r*t,aThj,bThj),r,t)#
mTjsa = 0.90 			# Mean transition from juvenile to subadult#
varTjsa = 0.03	#
aTjsa = mSj*((mSj*(1-mSj)/varSj^2)-1)#
bTjsa = (1-mSj)*((mSj*(1-mSj)/varSj^2)-1)#
Tjsa = matrix(rbeta(r*t,aTjsa,bTjsa),r,t)#
mTsaa1 = 0.80  			# Mean transition from subadult to primiparous adult#
varTsaa1 = 0.05	#
aTsaa1 = mSsa*((mSsa*(1-mSsa)/varSsa^2)-1)#
bTsaa1 = (1-mSsa)*((mSsa*(1-mSsa)/varSsa^2)-1)#
Tsaa1 = matrix(rbeta(r*t,aTsaa1,bTsaa1),r,t)#
mTa1a = 0.99  			# Mean transition from primiparous adult to adult#
varTa1a = 0.01	#
aTa1a = mSa1*((mSa1*(1-mSa1)/varSa1^2)-1)#
bTa1a = (1-mSa1)*((mSa1*(1-mSa1)/varSa1^2)-1)#
Ta1a = matrix(rbeta(r*t,aTa1a,bTa1a),r,t)#
### Fa -- fecundity of adults (clutch size)#
## Mean Fa = 9 (4-12, range; Hyslop et al. 2012)#
## Fa = 8.65 (6-12, range; husbandry data, C. Guyer pers. comm.)#
muFa = 8.65#
sdFa = 2#
fecundShape2Fa = log((sdFa^2)/(muFa^2)+1)#
fecundShape1Fa = log(muFa)-1/2*fecundShape2Fa#
#hist(round(rlnorm(100,fecundShape1Fa,fecundShape2Fa)))	# for visualization purposes#
round(rlnorm(1,fecundShape1Fa,fecundShape2Fa))  # Clutch size for matrix#
eggsa1 = matrix(0,r,t)				# eggs from adults#
eggsa2 = matrix(0,r,t)#
eggsa3 = matrix(0,r,t)#
### Pva -- proportion of viable eggs for adults#
Pva = 0.85 #
aPva = 100*Pva#
bPva = 100*(1-Pva)#
Pvat=matrix(rbeta(r*t,aPva,bPva),r,t)#
### Fa1 -- fecundity (clutch size) of primiparous adults#
## A primary reason why we modeled two stages of adults is because, in our experience, first-year breeding females lay clutches dominated by inviable eggs. So, we wanted to model these females as having different egg viability relative to older, more experienced individuals; clutch size was the same. #
muFa1 = 8.65							#
sdFa1 = 2								#
fecundShape2Fa1 = log((sdFa1^2)/(muFa1^2)+1)#
fecundShape1Fa1 = log(muFa1)-1/2*fecundShape2Fa1#
# hist(round(rlnorm(100,fecundShape1Fa1,fecundShape2Fa1)))	# for visualization purposes#
round(rlnorm(1,fecundShape1Fa1,fecundShape2Fa1))  # Clutch size for matrix#
eggspa1 = matrix(0,r,t)				# eggs from primiparous adults (a1)#
eggspa2 = matrix(0,r,t)#
### Pva1 -- proportion of viable eggs for primiparous adults#
Pva1 = 0.35 #
aPva1 = 100*Pva1#
bPva1 = 100*(1-Pva1)#
Pva1t=matrix(rbeta(r*t,aPva1,bPva1),r,t)#
### Se -- survival of eggs (nests); following an estimate by Hyslop et al. (2012), but no data from the field have estimated this parameter#
Se = 0.75 #
varSe = 0.15#
aSe=Se*((Se*(1-Se)/varSe^2)-1)#
bSe=(1-Se)*((Se*(1-Se)/varSe^2)-1)#
Set=matrix(0,r,t)#
### SR -- Sex ratio of eggs#
## A beta-distributed variable 0.5 (+/-0.04) to only model the proportion of females assuming a 1:1 sex ratio in clutches#
mSR = 0.5#
varSR = 0.04#
aSR=mSR*((mSR*(1-mSR)/(varSR^2))-1)#
bSR=(1-mSR)*((mSR*(1-mSR)/(varSR^2))-1)#
SRi = matrix(rbeta(r,aSR,bSR),r,1)			 #
SDmSRi = matrix(rinvgauss(r,aSR^2,1),r,1)#
ASRi = matrix(0,r,1)				#
BSRi = matrix(0,r,1)				#
SRt = matrix(0,r,t)				#
### Pbt -- proportion of individuals that breed#
## An attempt to simulate some good-year/bad-year dynamics.#
Pbt = matrix(0,r,t) #
PGY = 0.8#
GY = matrix(rbinom(r*t,1,PGY),r,t) #
SDPb=0.2#
### Proportion of individuals that breed during any given year.#
PB = 0.8#
varPB = 0.1#
aPB = PB*((PB*(1-PB)/varPB^2)-1)#
bPB = (1-PB)*((PB*(1-PB)/varPB^2)-1)#
rbeta(1,aPB,bPB)#
### Sr -- survival reduction for captives released into wild#
## Individuals being released into the wild may not perform as well as wild-born individuals, so we modeled an acclimation effect on the survival of captive-bred snakes being released, where survival during the released life stage was multiplied by this variable. #
Sr = 0.8 						#
Srt=matrix(0,r,t)#
### pSamp -- the probability of sampling snakes#
## Snakes are difficult to detect, especially fossorial species that have large homeranges. This parameter models how detection probability influences our ability to monitor population growth.#
mPsamp=0.20 #
SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
# We model pSamp = 0.20 here, but in the model for-loops we explore other values #
# Simulating parameters is now done#
detach(package:statmod)
### Population growth & quasi-extinction estimates#
rlam1=matrix(0,r,t)		# Real (true) population growth#
olam1=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext1=matrix(0,r,t)		# Probability of quasi-extinction#
rlam2=matrix(0,r,t)		# Real (true) population growth#
olam2=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext2=matrix(0,r,t)		# Probability of quasi-extinction#
rlam3=matrix(0,r,t)		# Real (true) population growth#
olam3=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext3=matrix(0,r,t)		# Probability of quasi-extinction
mPsamp=0.2#scenarios[h,5] 	# Probabilty of sampling snakes (i.e., detection probability)#
  SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
  aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)
Sr = .6#scenarios[h,6]		# Acclimation effect on survival (i.e., survival reduction)#
  # of released individuals	#
  Srt=matrix(0,r,t)
Nh1 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj1 = matrix(0,r,t) 		# Juveniles#
  Nsa1 = matrix(0,r,t) 		# Subadults#
  Npa1 = matrix(0,r,t) 		# Primiparous adults#
  Na1 = matrix(0,r,t) 		# Adults#
  Nh2 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj2 = matrix(0,r,t) 		# Juveniles#
  Nsa2 = matrix(0,r,t) 		# Subadults#
  Npa2 = matrix(0,r,t) 		# Primiparous adults#
  Na2 = matrix(0,r,t) 		# Adults#
  Nh3 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj3 = matrix(0,r,t) 		# Juveniles#
  Nsa3 = matrix(0,r,t) 		# Subadults#
  Npa3 = matrix(0,r,t) 		# Primiparous adults#
  Na3 = matrix(0,r,t) 		# Adults
Nh1[,1]=0		# Initial abundance of hatchlings#
  Nj1[,1]=0		# Juveniles#
  Nsa1[,1]=0		# Subadults#
  Npa1[,1]=0		# Primiparous adults#
  Na1[,1]=0		# Adults#
  Nh2[,1]=0		# Initial abundance of hatchlings#
  Nj2[,1]=0		# Juveniles#
  Nsa2[,1]=0		# Subadults#
  Npa2[,1]=0		# Primiparous adults#
  Na2[,1]=0		# Adults#
  Nh3[,1]=0		# Initial abundance of hatchlings#
  Nj3[,1]=0		# Juveniles#
  Nsa3[,1]=0		# Subadults#
  Npa3[,1]=0		# Primiparous adults#
  Na3[,1]=0		# Adults
Nh1
head(Nh1)
nh1[,1]
Nh1[,1]
nyr=10 #number of years for the release program
MaxR = 40 #Change this to change total captive production#
  Ph=0 #Proportion of releases that are hatchlings#
  Pj=0 #Proportion of releases that are juveniles#
  Psa=1 #Proportion of releases that are subadults#
  split=1#
  Ry=matrix(round(runif(r*t,5,MaxR),0),r,t)
Ry
r
t
Ry
Nhr1 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr1 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar1 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nhr2 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr2 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar2 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nbreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nbreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nmax=300 			# Population ceiling for density dependence
r
j
t
split
Ph
Pj
Psa
Spa
Spat
#t = 30		# Number of years to project simulations#
#r = 1000		# Number of simulation replications #
### Population growth & quasi-extinction estimates#
rlam1=matrix(0,r,t)		# Real (true) population growth#
olam1=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext1=matrix(0,r,t)		# Probability of quasi-extinction#
rlam2=matrix(0,r,t)		# Real (true) population growth#
olam2=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext2=matrix(0,r,t)		# Probability of quasi-extinction#
rlam3=matrix(0,r,t)		# Real (true) population growth#
olam3=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext3=matrix(0,r,t)		# Probability of quasi-extinction#
#### Preliminary modeling exercises created a repatriation strategy where 30 'head-started', 2 yr-old subadult snakes would be released each year for 10 years. This sought to create a sustainable population with relatively low risk of extinction. However, this model lacked parametric uncertainty and stochasticity, it is expensive to raise snakes through the second year, and also difficult to raise enough snakes to release that many for 10 years. So, managers were also interested in the feasability of releasing younger snakes, such as hatchlings or 1-yr old juveniles, and whether shorter release periods (e.g., 5 years) or irregular release periods (7 out of 10 years)  would be sufficient to generate viable populations with low risk of extinction. However, two problems potentially limiting success are that (1) snakes are difficult to sample and may have detection probabilities much lower than 1.0, and (2) released animals may have decreased survival in the first year (post-release acclimation effect) while th
ey try to learn and figure out how to live in the wild.  #
  mPsamp=0.2#scenarios[h,5] 	# Probabilty of sampling snakes (i.e., detection probability)#
  SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
  aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
  Sr = .6#scenarios[h,6]		# Acclimation effect on survival (i.e., survival reduction)#
  # of released individuals	#
  Srt=matrix(0,r,t)#
  ### Create some matrices and parameters for the model loop:#
  Nh1 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj1 = matrix(0,r,t) 		# Juveniles#
  Nsa1 = matrix(0,r,t) 		# Subadults#
  Npa1 = matrix(0,r,t) 		# Primiparous adults#
  Na1 = matrix(0,r,t) 		# Adults#
  Nh2 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj2 = matrix(0,r,t) 		# Juveniles#
  Nsa2 = matrix(0,r,t) 		# Subadults#
  Npa2 = matrix(0,r,t) 		# Primiparous adults#
  Na2 = matrix(0,r,t) 		# Adults#
  Nh3 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj3 = matrix(0,r,t) 		# Juveniles#
  Nsa3 = matrix(0,r,t) 		# Subadults#
  Npa3 = matrix(0,r,t) 		# Primiparous adults#
  Na3 = matrix(0,r,t) 		# Adults#
  Nh1[,1]=0		# Initial abundance of hatchlings#
  Nj1[,1]=0		# Juveniles#
  Nsa1[,1]=0		# Subadults#
  Npa1[,1]=0		# Primiparous adults#
  Na1[,1]=0		# Adults#
  Nh2[,1]=0		# Initial abundance of hatchlings#
  Nj2[,1]=0		# Juveniles#
  Nsa2[,1]=0		# Subadults#
  Npa2[,1]=0		# Primiparous adults#
  Na2[,1]=0		# Adults#
  Nh3[,1]=0		# Initial abundance of hatchlings#
  Nj3[,1]=0		# Juveniles#
  Nsa3[,1]=0		# Subadults#
  Npa3[,1]=0		# Primiparous adults#
  Na3[,1]=0		# Adults#
   nyr=10 #number of years for the release program#
  # nrelsa1=0#
  # nrelj1=30#
  # nrelh1=0#
  # nrelsa2=0#
  # nrelj2=30#
  # nrelh2=0#
  # nrelsa3=0#
  # nrelj3=30#
  # nrelh3=0#
  MaxR = 40 #Change this to change total captive production#
  Ph=0 #Proportion of releases that are hatchlings#
  Pj=0 #Proportion of releases that are juveniles#
  Psa=1 #Proportion of releases that are subadults#
  split=1#
  Ry=matrix(round(runif(r*t,5,MaxR),0),r,t)#
  Nhr1 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr1 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar1 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nhr2 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr2 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar2 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nbreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nbreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nmax=300 			# Population ceiling for density dependence#
  #### Population-projection model that accounts for imperfect detection#
  for(i in 1:r){			# Replication loop; draws replicate-level means for survival at each stage#
    ASai[i] = 100*Sai[i]			# Adults 		#
    BSai[i] = 100*(1-Sai[i])		#
    ASa1i[i] = 100*Sa1i[i]		 # Primiparous adults	#
    BSa1i[i] = 100*(1-Sa1i[i])#
    ASsai[i] = 100*Ssai[i]		 # Subadults	#
    BSsai[i] = 100*(1-Ssai[i])#
    ASji[i] = 100*Sji[i]			# Juveniles  		#
    BSji[i] = 100*(1-Sji[i])#
    AShi[i] = 100*Shi[i]		 	# Hatchlings	#
    BShi[i] = 100*(1-Shi[i])#
    for(j in 1:t){			# Projection loop; drawing annual demographic rates#
      Sat[i,j]=rbeta(1,ASai[i],BSai[i])			# Adults#
      Spat[i,j]=rbeta(1,ASa1i[i],BSa1i[i])		# Primiparous adults#
      Ssat[i,j]=rbeta(1,ASsai[i],BSsai[i])		# Subadults#
      Sjt[i,j]=rbeta(1,ASji[i],BSji[i])			# Juveniles#
      Sht[i,j]=rbeta(1,aSh,bSh)					# Hatchlings#
      Set[i,j]=rbeta(1,aSe,bSe)					# Egg survival#
      Srt[i,j]=rbeta(1,100*Sr, 100*(1-Sr)) 		# Randomize the acclimation effect #
      # (Sr; survival reduction)#
      # Drawing the number of released subadults and juveniles, and account for sex ratio to remove males#
      if (j>0 && j<nyr+1 ) Nhr1[i,j] = round(Ry[i,j]*Ph*split,0)		 #
      if (j>0 && j<nyr+1 ) Njr1[i,j] = round(Ry[i,j]*Pj*split,0) 	#
      if (j>0 && j<nyr+1 ) Nsar1[i,j] = round(Ry[i,j]*Psa*split,0)#
      if (j>0 && j<nyr+1 )Nhr2[i,j] = round(Ry[i,j]*Ph*(1-split),0)		#
      if (j>0 && j<nyr+1 )Njr2[i,j] = round(Ry[i,j]*Pj*(1-split),0)	#
      if (j>0 && j<nyr+1 )Nsar2[i,j] = round(Ry[i,j]*Psa*(1-split),0)#
      # #
      # if (j>0 && j<nyr+1 ) Nsar1[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Njr1[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Nhr1[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
      # #
      # if (j>0 && j<nyr+1 ) Nsar2[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Njr2[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Nhr2[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
      # # Specify the number of females released in CNF and ABRP (1) to date and (2) projected#
      # if (rownames(scenarios)[h] == "CNFc") Nsar=CNFc#
      # if (rownames(scenarios)[h] == "ABRPc") Nsar=ABRPc#
      # if (rownames(scenarios)[h] == "CNFp") Nsar=CNFp#
      # if (rownames(scenarios)[h] == "ABRPp") Nsar=ABRPp#
      #######################################################
      #######################################################
      ########*******FIRST RELEASE POPULATION#
      #######################################################
      # Projection equation for adults#
      if (j>1) Na1[i,j]=round((Na1[i,j-1]*Sat[i,j-1]+Na1[i,j-1]*Spat[i,j-1]*Ta1a[i,j-1])) else Na1[i,j]=0#
      round(Na1[i,j],0)#
      # Projection equation for primiparous adults#
      if (j>1) Npa1[i,j]=round((Npa1[i,j-1]*(Spat[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa1[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar1[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Npa1[i,j]=0#
      round(Npa1[i,j],0)#
      # Density-dependence; decrease subadult survival considerably when population sizes get too high;#
      # drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
      if (Na1[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
      if (Na1[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
      # Projection equation for subadults#
      if (j>1) Nsa1[i,j]=round((Nsa1[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj1[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr1[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa1[i,j]=0#
      round(Nsa1[i,j],0)#
      # Projection equation for juveniles#
      if (j>1) Nj1[i,j]=round((Nj1[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh1[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
                               (Nhr1[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj1[i,j]=0#
      round(Nj1[i,j],0)#
      # Good-year/bad-year function for probability of breeding#
      if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
      # Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
      eggsa1[i,j] = sum(rpois(round(Na1[i,j]*Pbt[i,j],0),muFa))/2#
      eggspa1[i,j] = sum(rpois(round(Npa1[i,j]*Pbt[i,j],0),muFa1))/2#
      round(eggsa1[i,j],0)#
      round(eggspa1[i,j],0)#
      # Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
      if (j>1) Nh1[i,j] = round((eggsa1[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggspa1[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh1[i,j]=0#
      round(Nh1[i,j],0)#
      # Sum the number of reproductive and immature individuals to facilitate the construction of figures#
      Nbreeders1[i,j] = Na1[i,j]+Npa1[i,j]		# Sum all breeders at each time step#
      Nimmatures1 = Nh1+Nj1+Nsa1	# Sum all immatures at each time step#
      # Implement sampling (detection) probability for adults and immatures#
      Nobreeders1[i,j]=sum(rbinom(Nbreeders1[i,j],1,Psamp[i,j]))#
      Noimmatures1[i,j]=sum(rbinom(Nimmatures1[i,j],1,Psamp[i,j]))#
      # Calculate population growth rate#
      if(j>5) rlam1[i,j]=Nbreeders1[i,j]/Nbreeders1[i,j-1]#
      if(j>5 && Nobreeders1[i,j-1]>0) olam1[i,j]= Nobreeders1[i,j]/Nobreeders1[i,j-1]#
      if (Nbreeders1[i,j]<5) Pext1[i,j]=1 else Pext1[i,j]=0 #
      #######################################################
      #######################################################
      ########*******SECOND RELEASE POPULATION#
      #######################################################
      # Projection equation for adults#
      if (j>1) Na2[i,j]=round((Na2[i,j-1]*Sat[i,j-1]+Npa2[i,j-1]*Spat[i,j-1]*Ta1a[i,j-1])) else Na2[i,j]=0#
      round(Na2[i,j],0)#
      # Projection equation for primiparous adults#
      if (j>1) Npa2[i,j]=round((Npa2[i,j-1]*(Spat[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa2[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar2[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Npa2[i,j]=0#
      round(Npa2[i,j],0)#
      # Density-dependence; decrease subadult survival considerably when population sizes get too high;#
      # drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
      if (Na2[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
      if (Na2[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
      # Projection equation for subadults#
      if (j>1) Nsa2[i,j]=round((Nsa2[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj2[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr2[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa2[i,j]=0#
      round(Nsa2[i,j],0)#
      # Projection equation for juveniles#
      if (j>1) Nj2[i,j]=round((Nj2[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh2[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
                               (Nhr2[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj2[i,j]=0#
      round(Nj2[i,j],0)#
      # Good-year/bad-year function for probability of breeding#
      #if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
      # Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
      eggsa2[i,j] = sum(rpois(round(Na2[i,j]*Pbt[i,j],0),muFa))/2#
      eggspa2[i,j] = sum(rpois(round(Npa2[i,j]*Pbt[i,j],0),muFa1))/2#
      round(eggsa2[i,j],0)#
      round(eggspa2[i,j],0)#
      # Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
      if (j>1) Nh2[i,j] = round((eggsa2[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggspa2[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh2[i,j]=0#
      round(Nh2[i,j],0)#
      # Sum the number of reproductive and immature individuals to facilitate the construction of figures#
      Nbreeders2[i,j] = Na2[i,j]+Npa2[i,j]		# Sum all breeders at each time step#
      Nimmatures2 = Nh2+Nj2+Nsa2	# Sum all immatures at each time step#
      # Implement sampling (detection) probability for adults and immatures#
      Nobreeders2[i,j]=sum(rbinom(Nbreeders2[i,j],1,Psamp[i,j]))#
      Noimmatures2[i,j]=sum(rbinom(Nimmatures2[i,j],1,Psamp[i,j]))#
       # Calculate population growth rate#
      if(j>5) rlam2[i,j]=Nbreeders2[i,j]/Nbreeders2[i,j-1]#
      if(j>5 && Nobreeders2[i,j-1]>0) olam2[i,j]= Nobreeders2[i,j]/Nobreeders2[i,j-1]#
      if (Nbreeders2[i,j]<5) Pext2[i,j]=1 else Pext2[i,j]=0 #
    }}	# Close replication and projection loops#
  medrlam1 = apply(rlam1, 2, median, na.rm=TRUE)		# Median real population growth#
  medolam1 = apply(olam1, 2, median, na.rm=TRUE)		# Median observed population growth#
  medNbreeders1=apply(Nbreeders1,2,median)#
  PE1 = apply(Pext1,2,sum)/r							# Prob. of quasi-extinction#
  PEt1 = PE1[t]										# Prob. of q-extinction @ year t#
  PE1#
  medNbreeders1#
  medrlam2 = apply(rlam2, 2, median, na.rm=TRUE)		# Median real population growth#
  medolam2 = apply(olam2, 2, median, na.rm=TRUE)		# Median observed population growth#
  medNbreeders2=apply(Nbreeders2,2,median)#
  PE2 = apply(Pext2,2,sum)/r							# Prob. of quasi-extinction#
  PEt2 = PE2[t]				#
  PE2#
  medNbreeders2
mPsamp=0.2#scenarios[h,5] 	# Probabilty of sampling snakes (i.e., detection probability)#
  SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
  aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
  Sr = .6#scenarios[h,6]		# Acclimation effect on survival (i.e., survival reduction)#
  # of released individuals	#
  Srt=matrix(0,r,t)#
  ### Create some matrices and parameters for the model loop:#
  Nh1 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj1 = matrix(0,r,t) 		# Juveniles#
  Nsa1 = matrix(0,r,t) 		# Subadults#
  Npa1 = matrix(0,r,t) 		# Primiparous adults#
  Na1 = matrix(0,r,t) 		# Adults#
  Nh2 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj2 = matrix(0,r,t) 		# Juveniles#
  Nsa2 = matrix(0,r,t) 		# Subadults#
  Npa2 = matrix(0,r,t) 		# Primiparous adults#
  Na2 = matrix(0,r,t) 		# Adults#
  Nh3 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj3 = matrix(0,r,t) 		# Juveniles#
  Nsa3 = matrix(0,r,t) 		# Subadults#
  Npa3 = matrix(0,r,t) 		# Primiparous adults#
  Na3 = matrix(0,r,t) 		# Adults#
  Nh1[,1]=0		# Initial abundance of hatchlings#
  Nj1[,1]=0		# Juveniles#
  Nsa1[,1]=0		# Subadults#
  Npa1[,1]=0		# Primiparous adults#
  Na1[,1]=0		# Adults#
  Nh2[,1]=0		# Initial abundance of hatchlings#
  Nj2[,1]=0		# Juveniles#
  Nsa2[,1]=0		# Subadults#
  Npa2[,1]=0		# Primiparous adults#
  Na2[,1]=0		# Adults#
  Nh3[,1]=0		# Initial abundance of hatchlings#
  Nj3[,1]=0		# Juveniles#
  Nsa3[,1]=0		# Subadults#
  Npa3[,1]=0		# Primiparous adults#
  Na3[,1]=0		# Adults#
   nyr=10 #number of years for the release program#
  # nrelsa1=0#
  # nrelj1=30#
  # nrelh1=0#
  # nrelsa2=0#
  # nrelj2=30#
  # nrelh2=0#
  # nrelsa3=0#
  # nrelj3=30#
  # nrelh3=0#
  MaxR = 40 #Change this to change total captive production#
  Ph=0 #Proportion of releases that are hatchlings#
  Pj=0 #Proportion of releases that are juveniles#
  Psa=1 #Proportion of releases that are subadults#
  split=0.5#
  Ry=matrix(round(runif(r*t,5,MaxR),0),r,t)#
  Nhr1 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr1 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar1 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nhr2 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr2 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar2 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nbreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nbreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nmax=300 			# Population ceiling for density dependence#
  #### Population-projection model that accounts for imperfect detection#
  for(i in 1:r){			# Replication loop; draws replicate-level means for survival at each stage#
    ASai[i] = 100*Sai[i]			# Adults 		#
    BSai[i] = 100*(1-Sai[i])		#
    ASa1i[i] = 100*Sa1i[i]		 # Primiparous adults	#
    BSa1i[i] = 100*(1-Sa1i[i])#
    ASsai[i] = 100*Ssai[i]		 # Subadults	#
    BSsai[i] = 100*(1-Ssai[i])#
    ASji[i] = 100*Sji[i]			# Juveniles  		#
    BSji[i] = 100*(1-Sji[i])#
    AShi[i] = 100*Shi[i]		 	# Hatchlings	#
    BShi[i] = 100*(1-Shi[i])#
    for(j in 1:t){			# Projection loop; drawing annual demographic rates#
      Sat[i,j]=rbeta(1,ASai[i],BSai[i])			# Adults#
      Spat[i,j]=rbeta(1,ASa1i[i],BSa1i[i])		# Primiparous adults#
      Ssat[i,j]=rbeta(1,ASsai[i],BSsai[i])		# Subadults#
      Sjt[i,j]=rbeta(1,ASji[i],BSji[i])			# Juveniles#
      Sht[i,j]=rbeta(1,aSh,bSh)					# Hatchlings#
      Set[i,j]=rbeta(1,aSe,bSe)					# Egg survival#
      Srt[i,j]=rbeta(1,100*Sr, 100*(1-Sr)) 		# Randomize the acclimation effect #
      # (Sr; survival reduction)#
      # Drawing the number of released subadults and juveniles, and account for sex ratio to remove males#
      if (j>0 && j<nyr+1 ) Nhr1[i,j] = round(Ry[i,j]*Ph*split,0)		 #
      if (j>0 && j<nyr+1 ) Njr1[i,j] = round(Ry[i,j]*Pj*split,0) 	#
      if (j>0 && j<nyr+1 ) Nsar1[i,j] = round(Ry[i,j]*Psa*split,0)#
      if (j>0 && j<nyr+1 )Nhr2[i,j] = round(Ry[i,j]*Ph*(split),0)		#
      if (j>0 && j<nyr+1 )Njr2[i,j] = round(Ry[i,j]*Pj*(split),0)	#
      if (j>0 && j<nyr+1 )Nsar2[i,j] = round(Ry[i,j]*Psa*(split),0)#
      # #
      # if (j>0 && j<nyr+1 ) Nsar1[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Njr1[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Nhr1[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
      # #
      # if (j>0 && j<nyr+1 ) Nsar2[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Njr2[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Nhr2[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
      # # Specify the number of females released in CNF and ABRP (1) to date and (2) projected#
      # if (rownames(scenarios)[h] == "CNFc") Nsar=CNFc#
      # if (rownames(scenarios)[h] == "ABRPc") Nsar=ABRPc#
      # if (rownames(scenarios)[h] == "CNFp") Nsar=CNFp#
      # if (rownames(scenarios)[h] == "ABRPp") Nsar=ABRPp#
      #######################################################
      #######################################################
      ########*******FIRST RELEASE POPULATION#
      #######################################################
      # Projection equation for adults#
      if (j>1) Na1[i,j]=round((Na1[i,j-1]*Sat[i,j-1]+Na1[i,j-1]*Spat[i,j-1]*Ta1a[i,j-1])) else Na1[i,j]=0#
      round(Na1[i,j],0)#
      # Projection equation for primiparous adults#
      if (j>1) Npa1[i,j]=round((Npa1[i,j-1]*(Spat[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa1[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar1[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Npa1[i,j]=0#
      round(Npa1[i,j],0)#
      # Density-dependence; decrease subadult survival considerably when population sizes get too high;#
      # drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
      if (Na1[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
      if (Na1[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
      # Projection equation for subadults#
      if (j>1) Nsa1[i,j]=round((Nsa1[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj1[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr1[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa1[i,j]=0#
      round(Nsa1[i,j],0)#
      # Projection equation for juveniles#
      if (j>1) Nj1[i,j]=round((Nj1[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh1[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
                               (Nhr1[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj1[i,j]=0#
      round(Nj1[i,j],0)#
      # Good-year/bad-year function for probability of breeding#
      if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
      # Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
      eggsa1[i,j] = sum(rpois(round(Na1[i,j]*Pbt[i,j],0),muFa))/2#
      eggspa1[i,j] = sum(rpois(round(Npa1[i,j]*Pbt[i,j],0),muFa1))/2#
      round(eggsa1[i,j],0)#
      round(eggspa1[i,j],0)#
      # Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
      if (j>1) Nh1[i,j] = round((eggsa1[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggspa1[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh1[i,j]=0#
      round(Nh1[i,j],0)#
      # Sum the number of reproductive and immature individuals to facilitate the construction of figures#
      Nbreeders1[i,j] = Na1[i,j]+Npa1[i,j]		# Sum all breeders at each time step#
      Nimmatures1 = Nh1+Nj1+Nsa1	# Sum all immatures at each time step#
      # Implement sampling (detection) probability for adults and immatures#
      Nobreeders1[i,j]=sum(rbinom(Nbreeders1[i,j],1,Psamp[i,j]))#
      Noimmatures1[i,j]=sum(rbinom(Nimmatures1[i,j],1,Psamp[i,j]))#
      # Calculate population growth rate#
      if(j>5) rlam1[i,j]=Nbreeders1[i,j]/Nbreeders1[i,j-1]#
      if(j>5 && Nobreeders1[i,j-1]>0) olam1[i,j]= Nobreeders1[i,j]/Nobreeders1[i,j-1]#
      if (Nbreeders1[i,j]<5) Pext1[i,j]=1 else Pext1[i,j]=0 #
      #######################################################
      #######################################################
      ########*******SECOND RELEASE POPULATION#
      #######################################################
      # Projection equation for adults#
      if (j>1) Na2[i,j]=round((Na2[i,j-1]*Sat[i,j-1]+Npa2[i,j-1]*Spat[i,j-1]*Ta1a[i,j-1])) else Na2[i,j]=0#
      round(Na2[i,j],0)#
      # Projection equation for primiparous adults#
      if (j>1) Npa2[i,j]=round((Npa2[i,j-1]*(Spat[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa2[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar2[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Npa2[i,j]=0#
      round(Npa2[i,j],0)#
      # Density-dependence; decrease subadult survival considerably when population sizes get too high;#
      # drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
      if (Na2[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
      if (Na2[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
      # Projection equation for subadults#
      if (j>1) Nsa2[i,j]=round((Nsa2[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj2[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr2[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa2[i,j]=0#
      round(Nsa2[i,j],0)#
      # Projection equation for juveniles#
      if (j>1) Nj2[i,j]=round((Nj2[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh2[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
                               (Nhr2[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj2[i,j]=0#
      round(Nj2[i,j],0)#
      # Good-year/bad-year function for probability of breeding#
      #if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
      # Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
      eggsa2[i,j] = sum(rpois(round(Na2[i,j]*Pbt[i,j],0),muFa))/2#
      eggspa2[i,j] = sum(rpois(round(Npa2[i,j]*Pbt[i,j],0),muFa1))/2#
      round(eggsa2[i,j],0)#
      round(eggspa2[i,j],0)#
      # Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
      if (j>1) Nh2[i,j] = round((eggsa2[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggspa2[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh2[i,j]=0#
      round(Nh2[i,j],0)#
      # Sum the number of reproductive and immature individuals to facilitate the construction of figures#
      Nbreeders2[i,j] = Na2[i,j]+Npa2[i,j]		# Sum all breeders at each time step#
      Nimmatures2 = Nh2+Nj2+Nsa2	# Sum all immatures at each time step#
      # Implement sampling (detection) probability for adults and immatures#
      Nobreeders2[i,j]=sum(rbinom(Nbreeders2[i,j],1,Psamp[i,j]))#
      Noimmatures2[i,j]=sum(rbinom(Nimmatures2[i,j],1,Psamp[i,j]))#
       # Calculate population growth rate#
      if(j>5) rlam2[i,j]=Nbreeders2[i,j]/Nbreeders2[i,j-1]#
      if(j>5 && Nobreeders2[i,j-1]>0) olam2[i,j]= Nobreeders2[i,j]/Nobreeders2[i,j-1]#
      if (Nbreeders2[i,j]<5) Pext2[i,j]=1 else Pext2[i,j]=0 #
    }}	# Close replication and projection loops#
  medrlam1 = apply(rlam1, 2, median, na.rm=TRUE)		# Median real population growth#
  medolam1 = apply(olam1, 2, median, na.rm=TRUE)		# Median observed population growth#
  medNbreeders1=apply(Nbreeders1,2,median)#
  PE1 = apply(Pext1,2,sum)/r							# Prob. of quasi-extinction#
  PEt1 = PE1[t]										# Prob. of q-extinction @ year t#
  PE1#
  medNbreeders1#
  medrlam2 = apply(rlam2, 2, median, na.rm=TRUE)		# Median real population growth#
  medolam2 = apply(olam2, 2, median, na.rm=TRUE)		# Median observed population growth#
  medNbreeders2=apply(Nbreeders2,2,median)#
  PE2 = apply(Pext2,2,sum)/r							# Prob. of quasi-extinction#
  PEt2 = PE2[t]				#
  PE2#
  medNbreeders2
Na1
#t = 30		# Number of years to project simulations#
#r = 1000		# Number of simulation replications #
### Population growth & quasi-extinction estimates#
rlam1=matrix(0,r,t)		# Real (true) population growth#
olam1=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext1=matrix(0,r,t)		# Probability of quasi-extinction#
rlam2=matrix(0,r,t)		# Real (true) population growth#
olam2=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext2=matrix(0,r,t)		# Probability of quasi-extinction#
rlam3=matrix(0,r,t)		# Real (true) population growth#
olam3=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext3=matrix(0,r,t)		# Probability of quasi-extinction#
#### Preliminary modeling exercises created a repatriation strategy where 30 'head-started', 2 yr-old subadult snakes would be released each year for 10 years. This sought to create a sustainable population with relatively low risk of extinction. However, this model lacked parametric uncertainty and stochasticity, it is expensive to raise snakes through the second year, and also difficult to raise enough snakes to release that many for 10 years. So, managers were also interested in the feasability of releasing younger snakes, such as hatchlings or 1-yr old juveniles, and whether shorter release periods (e.g., 5 years) or irregular release periods (7 out of 10 years)  would be sufficient to generate viable populations with low risk of extinction. However, two problems potentially limiting success are that (1) snakes are difficult to sample and may have detection probabilities much lower than 1.0, and (2) released animals may have decreased survival in the first year (post-release acclimation effect) while th
ey try to learn and figure out how to live in the wild.  #
  mPsamp=0.2#scenarios[h,5] 	# Probabilty of sampling snakes (i.e., detection probability)#
  SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
  aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
  Sr = .6#scenarios[h,6]		# Acclimation effect on survival (i.e., survival reduction)#
  # of released individuals	#
  Srt=matrix(0,r,t)#
  ### Create some matrices and parameters for the model loop:#
  Nh1 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj1 = matrix(0,r,t) 		# Juveniles#
  Nsa1 = matrix(0,r,t) 		# Subadults#
  Npa1 = matrix(0,r,t) 		# Primiparous adults#
  Na1 = matrix(0,r,t) 		# Adults#
  Nh2 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj2 = matrix(0,r,t) 		# Juveniles#
  Nsa2 = matrix(0,r,t) 		# Subadults#
  Npa2 = matrix(0,r,t) 		# Primiparous adults#
  Na2 = matrix(0,r,t) 		# Adults#
  Nh3 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj3 = matrix(0,r,t) 		# Juveniles#
  Nsa3 = matrix(0,r,t) 		# Subadults#
  Npa3 = matrix(0,r,t) 		# Primiparous adults#
  Na3 = matrix(0,r,t) 		# Adults#
  Nh1[,1]=0		# Initial abundance of hatchlings#
  Nj1[,1]=0		# Juveniles#
  Nsa1[,1]=0		# Subadults#
  Npa1[,1]=0		# Primiparous adults#
  Na1[,1]=0		# Adults#
  Nh2[,1]=0		# Initial abundance of hatchlings#
  Nj2[,1]=0		# Juveniles#
  Nsa2[,1]=0		# Subadults#
  Npa2[,1]=0		# Primiparous adults#
  Na2[,1]=0		# Adults#
  Nh3[,1]=0		# Initial abundance of hatchlings#
  Nj3[,1]=0		# Juveniles#
  Nsa3[,1]=0		# Subadults#
  Npa3[,1]=0		# Primiparous adults#
  Na3[,1]=0		# Adults#
   nyr=10 #number of years for the release program#
  # nrelsa1=0#
  # nrelj1=30#
  # nrelh1=0#
  # nrelsa2=0#
  # nrelj2=30#
  # nrelh2=0#
  # nrelsa3=0#
  # nrelj3=30#
  # nrelh3=0#
  MaxR = 40 #Change this to change total captive production#
  Ph=0 #Proportion of releases that are hatchlings#
  Pj=0 #Proportion of releases that are juveniles#
  Psa=1 #Proportion of releases that are subadults#
  split=0.5#
  Ry=matrix(round(runif(r*t,5,MaxR),0),r,t)#
  Nhr1 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr1 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar1 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nhr2 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr2 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar2 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nbreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nbreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nmax=300 			# Population ceiling for density dependence#
  #### Population-projection model that accounts for imperfect detection#
  for(i in 1:r){			# Replication loop; draws replicate-level means for survival at each stage#
    ASai[i] = 100*Sai[i]			# Adults 		#
    BSai[i] = 100*(1-Sai[i])		#
    ASa1i[i] = 100*Sa1i[i]		 # Primiparous adults	#
    BSa1i[i] = 100*(1-Sa1i[i])#
    ASsai[i] = 100*Ssai[i]		 # Subadults	#
    BSsai[i] = 100*(1-Ssai[i])#
    ASji[i] = 100*Sji[i]			# Juveniles  		#
    BSji[i] = 100*(1-Sji[i])#
    AShi[i] = 100*Shi[i]		 	# Hatchlings	#
    BShi[i] = 100*(1-Shi[i])#
    for(j in 1:t){			# Projection loop; drawing annual demographic rates#
      Sat[i,j]=rbeta(1,ASai[i],BSai[i])			# Adults#
      Spat[i,j]=rbeta(1,ASa1i[i],BSa1i[i])		# Primiparous adults#
      Ssat[i,j]=rbeta(1,ASsai[i],BSsai[i])		# Subadults#
      Sjt[i,j]=rbeta(1,ASji[i],BSji[i])			# Juveniles#
      Sht[i,j]=rbeta(1,aSh,bSh)					# Hatchlings#
      Set[i,j]=rbeta(1,aSe,bSe)					# Egg survival#
      Srt[i,j]=rbeta(1,100*Sr, 100*(1-Sr)) 		# Randomize the acclimation effect #
      # (Sr; survival reduction)#
      # Drawing the number of released subadults and juveniles, and account for sex ratio to remove males#
      if (j>0 && j<nyr+1 ) Nhr1[i,j] = round(Ry[i,j]*Ph*split,0)		 #
      if (j>0 && j<nyr+1 ) Njr1[i,j] = round(Ry[i,j]*Pj*split,0) 	#
      if (j>0 && j<nyr+1 ) Nsar1[i,j] = round(Ry[i,j]*Psa*split,0)#
      if (j>0 && j<nyr+1 )Nhr2[i,j] = round(Ry[i,j]*Ph*split,0)		#
      if (j>0 && j<nyr+1 )Njr2[i,j] = round(Ry[i,j]*Pj*split,0)	#
      if (j>0 && j<nyr+1 )Nsar2[i,j] = round(Ry[i,j]*Psa*split,0)#
      # #
      # if (j>0 && j<nyr+1 ) Nsar1[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Njr1[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Nhr1[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
      # #
      # if (j>0 && j<nyr+1 ) Nsar2[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Njr2[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Nhr2[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
      # # Specify the number of females released in CNF and ABRP (1) to date and (2) projected#
      # if (rownames(scenarios)[h] == "CNFc") Nsar=CNFc#
      # if (rownames(scenarios)[h] == "ABRPc") Nsar=ABRPc#
      # if (rownames(scenarios)[h] == "CNFp") Nsar=CNFp#
      # if (rownames(scenarios)[h] == "ABRPp") Nsar=ABRPp#
      #######################################################
      #######################################################
      ########*******FIRST RELEASE POPULATION#
      #######################################################
      # Projection equation for adults#
      if (j>1) Na1[i,j]=round((Na1[i,j-1]*Sat[i,j-1]+Npa1[i,j-1]*Spat[i,j-1]*Ta1a[i,j-1])) else Na1[i,j]=0#
      round(Na1[i,j],0)#
      # Projection equation for primiparous adults#
      if (j>1) Npa1[i,j]=round((Npa1[i,j-1]*(Spat[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa1[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar1[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Npa1[i,j]=0#
      round(Npa1[i,j],0)#
      # Density-dependence; decrease subadult survival considerably when population sizes get too high;#
      # drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
      if (Na1[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
      if (Na1[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
      # Projection equation for subadults#
      if (j>1) Nsa1[i,j]=round((Nsa1[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj1[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr1[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa1[i,j]=0#
      round(Nsa1[i,j],0)#
      # Projection equation for juveniles#
      if (j>1) Nj1[i,j]=round((Nj1[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh1[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
                               (Nhr1[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj1[i,j]=0#
      round(Nj1[i,j],0)#
      # Good-year/bad-year function for probability of breeding#
      if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
      # Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
      eggsa1[i,j] = sum(rpois(round(Na1[i,j]*Pbt[i,j],0),muFa))/2#
      eggspa1[i,j] = sum(rpois(round(Npa1[i,j]*Pbt[i,j],0),muFa1))/2#
      round(eggsa1[i,j],0)#
      round(eggspa1[i,j],0)#
      # Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
      if (j>1) Nh1[i,j] = round((eggsa1[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggspa1[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh1[i,j]=0#
      round(Nh1[i,j],0)#
      # Sum the number of reproductive and immature individuals to facilitate the construction of figures#
      Nbreeders1[i,j] = Na1[i,j]+Npa1[i,j]		# Sum all breeders at each time step#
      Nimmatures1 = Nh1+Nj1+Nsa1	# Sum all immatures at each time step#
      # Implement sampling (detection) probability for adults and immatures#
      Nobreeders1[i,j]=sum(rbinom(Nbreeders1[i,j],1,Psamp[i,j]))#
      Noimmatures1[i,j]=sum(rbinom(Nimmatures1[i,j],1,Psamp[i,j]))#
      # Calculate population growth rate#
      if(j>5) rlam1[i,j]=Nbreeders1[i,j]/Nbreeders1[i,j-1]#
      if(j>5 && Nobreeders1[i,j-1]>0) olam1[i,j]= Nobreeders1[i,j]/Nobreeders1[i,j-1]#
      if (Nbreeders1[i,j]<5) Pext1[i,j]=1 else Pext1[i,j]=0 #
      #######################################################
      #######################################################
      ########*******SECOND RELEASE POPULATION#
      #######################################################
      # Projection equation for adults#
      if (j>1) Na2[i,j]=round((Na2[i,j-1]*Sat[i,j-1]+Npa2[i,j-1]*Spat[i,j-1]*Ta1a[i,j-1])) else Na2[i,j]=0#
      round(Na2[i,j],0)#
      # Projection equation for primiparous adults#
      if (j>1) Npa2[i,j]=round((Npa2[i,j-1]*(Spat[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa2[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar2[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Npa2[i,j]=0#
      round(Npa2[i,j],0)#
      # Density-dependence; decrease subadult survival considerably when population sizes get too high;#
      # drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
      if (Na2[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
      if (Na2[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
      # Projection equation for subadults#
      if (j>1) Nsa2[i,j]=round((Nsa2[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj2[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr2[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa2[i,j]=0#
      round(Nsa2[i,j],0)#
      # Projection equation for juveniles#
      if (j>1) Nj2[i,j]=round((Nj2[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh2[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
                               (Nhr2[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj2[i,j]=0#
      round(Nj2[i,j],0)#
      # Good-year/bad-year function for probability of breeding#
      #if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
      # Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
      eggsa2[i,j] = sum(rpois(round(Na2[i,j]*Pbt[i,j],0),muFa))/2#
      eggspa2[i,j] = sum(rpois(round(Npa2[i,j]*Pbt[i,j],0),muFa1))/2#
      round(eggsa2[i,j],0)#
      round(eggspa2[i,j],0)#
      # Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
      if (j>1) Nh2[i,j] = round((eggsa2[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggspa2[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh2[i,j]=0#
      round(Nh2[i,j],0)#
      # Sum the number of reproductive and immature individuals to facilitate the construction of figures#
      Nbreeders2[i,j] = Na2[i,j]+Npa2[i,j]		# Sum all breeders at each time step#
      Nimmatures2 = Nh2+Nj2+Nsa2	# Sum all immatures at each time step#
      # Implement sampling (detection) probability for adults and immatures#
      Nobreeders2[i,j]=sum(rbinom(Nbreeders2[i,j],1,Psamp[i,j]))#
      Noimmatures2[i,j]=sum(rbinom(Nimmatures2[i,j],1,Psamp[i,j]))#
       # Calculate population growth rate#
      if(j>5) rlam2[i,j]=Nbreeders2[i,j]/Nbreeders2[i,j-1]#
      if(j>5 && Nobreeders2[i,j-1]>0) olam2[i,j]= Nobreeders2[i,j]/Nobreeders2[i,j-1]#
      if (Nbreeders2[i,j]<5) Pext2[i,j]=1 else Pext2[i,j]=0 #
    }}	# Close replication and projection loops#
  medrlam1 = apply(rlam1, 2, median, na.rm=TRUE)		# Median real population growth#
  medolam1 = apply(olam1, 2, median, na.rm=TRUE)		# Median observed population growth#
  medNbreeders1=apply(Nbreeders1,2,median)#
  PE1 = apply(Pext1,2,sum)/r							# Prob. of quasi-extinction#
  PEt1 = PE1[t]										# Prob. of q-extinction @ year t#
  PE1#
  medNbreeders1#
  medrlam2 = apply(rlam2, 2, median, na.rm=TRUE)		# Median real population growth#
  medolam2 = apply(olam2, 2, median, na.rm=TRUE)		# Median observed population growth#
  medNbreeders2=apply(Nbreeders2,2,median)#
  PE2 = apply(Pext2,2,sum)/r							# Prob. of quasi-extinction#
  PEt2 = PE2[t]				#
  PE2#
  medNbreeders2
#install.packages("statmod", dependencies=TRUE)#
library(statmod)#
library(SuppDists)#
### To simulate these parameters, we will use 1000 replications (r) that are projected over 30 years (t)#
r = 100#
t = 30#
######## Define and parameterize each of the above variables here using realistical values estimated from the literature: Hyslop et al. 2012 Population Ecology#
### Sh -- survival of hatchlings#
## This stage is comparable to the hatchling/juvenile stage from Hyslop et al. 2012, where they estimated survival in the first year by two components: hatchling survival during the first three months (0.49) and juvenile survival during the subsequent nine months (0.59). We modeled this as a conservative estimate of the two; 0.52#
mSh = 0.52  		#
varSh = 0.1							# Variance of mean#
aSh = mSh*((mSh*(1-mSh)/(varSh^2))-1) 	 	#
bSh = (1-mSh)*((mSh*(1-mSh)/(varSh^2))-1) #
Shi = matrix(rbeta(r,aSh,bSh),r,1)	# Parametric uncertainty #
SDmShi = matrix(rinvgauss(r,varSh^2,1),r,1)#
AShi = matrix(0,r,1)				# beta distribution shape parameters#
BShi = matrix(0,r,1)				# beta distribution shape parameters#
Sht = matrix(0,r,t)					# annual variation survival#
### Sj -- survival of juveniles #
## This stage is somewhat comparable to the subadult stage from Hyslop et al. 2012, where they estimated survival as 0.52 (0.20 SE). However, their sample size was low for individuals in this stage, and it seems unlikely that second year individuals would have lower survival than the hatchling stage. So we modeled survival in the second year (0.60) as a modest increase relative to survival in the first year.#
mSj = 0.60  		#
varSj = 0.1		# Variance of mean#
aSj = mSj*((mSj*(1-mSj)/(varSj^2))-1) 	 	#
bSj = (1-mSj)*((mSj*(1-mSj)/(varSj^2))-1) #
Sji = matrix(rbeta(r,aSj,bSj),r,1)			# Parametric uncertainty #
SDmSji = matrix(rinvgauss(r,varSj^2,1),r,1)#
ASji = matrix(0,r,1)				# beta distribution shape parameters#
BSji = matrix(0,r,1)				# beta distribution shape parameters#
Sjt = matrix(0,r,t)					# annual variation survival#
### Ssa -- survival of subadults  #
## This stage roughly translates to the first-year adults from Hyslop et al. 2012's adult survival stage (0.74), so we estimated this as 0.70 as a slightly reduced estimate of that.#
mSsa = 0.70  		#
varSsa = 0.1		# Variance of mean #
aSsa = mSsa*((mSsa*(1-mSsa)/(varSsa^2))-1) 	 	#
bSsa = (1-mSsa)*((mSsa*(1-mSsa)/(varSsa^2))-1) #
Ssai = matrix(rbeta(r,aSsa,bSsa),r,1)			# Parametric uncertainty #
SDmSsai = matrix(rinvgauss(r,varSsa^2,1),r,1)#
ASsai = matrix(0,r,1)				# beta distribution shape parameters#
BSsai = matrix(0,r,1)				# beta distribution shape parameters#
Ssat = matrix(0,r,t)					# annual variation survival#
### Sa1 -- survival of first-year adults #
## This stage roughly translates to the second-year adults from Hyslop et al. 2012's adult survival stage (0.74), so we estimated this as 0.70 as an increased estimate of that (0.80)#
mSa1 = 0.80	#
varSa1 = 0.1		# Variance of mean #
aSa1 = mSa1*((mSa1*(1-mSa1)/(varSa1^2))-1) 	 	#
bSa1 = (1-mSa1)*((mSa1*(1-mSa1)/(varSa1^2))-1) #
Sa1i = matrix(rbeta(r,aSa1,bSa1),r,1)			# Parametric uncertainty #
SDmSa1i = matrix(rinvgauss(r,varSa1^2,1),r,1)#
ASa1i = matrix(0,r,1)				# beta distribution shape parameters#
BSa1i = matrix(0,r,1)				# beta distribution shape parameters#
Spat = matrix(0,r,t)					# annual variation survival#
### Sa -- survival of adults #
## Radiotelemetered individuals in CNF that survive one year proceed to have high #
## survival (0.90) (Stiles 2013). #
mSa = 0.85 		#
varSa = 0.1		# Variance of mean#
aSa = mSa*((mSa*(1-mSa)/(varSa^2))-1) 	 	#
bSa = (1-mSa)*((mSa*(1-mSa)/(varSa^2))-1) #
Sai = matrix(rbeta(r,aSa,bSa),r,1)			# Parametric uncertainty #
SDmSai = matrix(rinvgauss(r,varSa^2,1),r,1)#
ASai = matrix(0,r,1)				# beta distribution shape parameters#
BSai = matrix(0,r,1)				# beta distribution shape parameters#
Sat = matrix(0,r,t)					# annual variation survival#
### The first four stages should theoretically transition into the next age stage after one year. However, there may be uncertainty if individuals vary in growth and individuals remain in stages, especially as they age. To model this uncertainty, we modeled transition probability declining from 0.99 with each successive stage up to the primiparous adult stage, until when primiparous females all transition to be adults.#
mThj = 0.99  			# Mean transition from hatchling to juvenile#
varThj = 0.01		#
aThj = mSh*((mSh*(1-mSh)/varSh^2)-1)#
bThj = (1-mSh)*((mSh*(1-mSh)/varSh^2)-1)#
Thj = matrix(rbeta(r*t,aThj,bThj),r,t)#
mTjsa = 0.90 			# Mean transition from juvenile to subadult#
varTjsa = 0.03	#
aTjsa = mSj*((mSj*(1-mSj)/varSj^2)-1)#
bTjsa = (1-mSj)*((mSj*(1-mSj)/varSj^2)-1)#
Tjsa = matrix(rbeta(r*t,aTjsa,bTjsa),r,t)#
mTsaa1 = 0.80  			# Mean transition from subadult to primiparous adult#
varTsaa1 = 0.05	#
aTsaa1 = mSsa*((mSsa*(1-mSsa)/varSsa^2)-1)#
bTsaa1 = (1-mSsa)*((mSsa*(1-mSsa)/varSsa^2)-1)#
Tsaa1 = matrix(rbeta(r*t,aTsaa1,bTsaa1),r,t)#
mTa1a = 0.99  			# Mean transition from primiparous adult to adult#
varTa1a = 0.01	#
aTa1a = mSa1*((mSa1*(1-mSa1)/varSa1^2)-1)#
bTa1a = (1-mSa1)*((mSa1*(1-mSa1)/varSa1^2)-1)#
Ta1a = matrix(rbeta(r*t,aTa1a,bTa1a),r,t)#
### Fa -- fecundity of adults (clutch size)#
## Mean Fa = 9 (4-12, range; Hyslop et al. 2012)#
## Fa = 8.65 (6-12, range; husbandry data, C. Guyer pers. comm.)#
muFa = 8.65#
sdFa = 2#
fecundShape2Fa = log((sdFa^2)/(muFa^2)+1)#
fecundShape1Fa = log(muFa)-1/2*fecundShape2Fa#
#hist(round(rlnorm(100,fecundShape1Fa,fecundShape2Fa)))	# for visualization purposes#
round(rlnorm(1,fecundShape1Fa,fecundShape2Fa))  # Clutch size for matrix#
eggsa1 = matrix(0,r,t)				# eggs from adults#
eggsa2 = matrix(0,r,t)#
eggsa3 = matrix(0,r,t)#
### Pva -- proportion of viable eggs for adults#
Pva = 0.85 #
aPva = 100*Pva#
bPva = 100*(1-Pva)#
Pvat=matrix(rbeta(r*t,aPva,bPva),r,t)#
### Fa1 -- fecundity (clutch size) of primiparous adults#
## A primary reason why we modeled two stages of adults is because, in our experience, first-year breeding females lay clutches dominated by inviable eggs. So, we wanted to model these females as having different egg viability relative to older, more experienced individuals; clutch size was the same. #
muFa1 = 8.65							#
sdFa1 = 2								#
fecundShape2Fa1 = log((sdFa1^2)/(muFa1^2)+1)#
fecundShape1Fa1 = log(muFa1)-1/2*fecundShape2Fa1#
# hist(round(rlnorm(100,fecundShape1Fa1,fecundShape2Fa1)))	# for visualization purposes#
round(rlnorm(1,fecundShape1Fa1,fecundShape2Fa1))  # Clutch size for matrix#
eggspa1 = matrix(0,r,t)				# eggs from primiparous adults (a1)#
eggspa2 = matrix(0,r,t)#
### Pva1 -- proportion of viable eggs for primiparous adults#
Pva1 = 0.35 #
aPva1 = 100*Pva1#
bPva1 = 100*(1-Pva1)#
Pva1t=matrix(rbeta(r*t,aPva1,bPva1),r,t)#
### Se -- survival of eggs (nests); following an estimate by Hyslop et al. (2012), but no data from the field have estimated this parameter#
Se = 0.75 #
varSe = 0.15#
aSe=Se*((Se*(1-Se)/varSe^2)-1)#
bSe=(1-Se)*((Se*(1-Se)/varSe^2)-1)#
Set=matrix(0,r,t)#
### SR -- Sex ratio of eggs#
## A beta-distributed variable 0.5 (+/-0.04) to only model the proportion of females assuming a 1:1 sex ratio in clutches#
mSR = 0.5#
varSR = 0.04#
aSR=mSR*((mSR*(1-mSR)/(varSR^2))-1)#
bSR=(1-mSR)*((mSR*(1-mSR)/(varSR^2))-1)#
SRi = matrix(rbeta(r,aSR,bSR),r,1)			 #
SDmSRi = matrix(rinvgauss(r,aSR^2,1),r,1)#
ASRi = matrix(0,r,1)				#
BSRi = matrix(0,r,1)				#
SRt = matrix(0,r,t)				#
### Pbt -- proportion of individuals that breed#
## An attempt to simulate some good-year/bad-year dynamics.#
Pbt = matrix(0,r,t) #
PGY = 0.8#
GY = matrix(rbinom(r*t,1,PGY),r,t) #
SDPb=0.2#
### Proportion of individuals that breed during any given year.#
PB = 0.8#
varPB = 0.1#
aPB = PB*((PB*(1-PB)/varPB^2)-1)#
bPB = (1-PB)*((PB*(1-PB)/varPB^2)-1)#
rbeta(1,aPB,bPB)#
### Sr -- survival reduction for captives released into wild#
## Individuals being released into the wild may not perform as well as wild-born individuals, so we modeled an acclimation effect on the survival of captive-bred snakes being released, where survival during the released life stage was multiplied by this variable. #
Sr = 0.8 						#
Srt=matrix(0,r,t)#
### pSamp -- the probability of sampling snakes#
## Snakes are difficult to detect, especially fossorial species that have large homeranges. This parameter models how detection probability influences our ability to monitor population growth.#
mPsamp=0.20 #
SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
# We model pSamp = 0.20 here, but in the model for-loops we explore other values #
# Simulating parameters is now done#
detach(package:statmod)#
############## Part 2)#
############## Project the population growth and extinction risk of D. couperi  #
############## under different repatriation scenarios #
#t = 30		# Number of years to project simulations#
#r = 1000		# Number of simulation replications #
### Population growth & quasi-extinction estimates#
rlam1=matrix(0,r,t)		# Real (true) population growth#
olam1=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext1=matrix(0,r,t)		# Probability of quasi-extinction#
rlam2=matrix(0,r,t)		# Real (true) population growth#
olam2=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext2=matrix(0,r,t)		# Probability of quasi-extinction#
rlam3=matrix(0,r,t)		# Real (true) population growth#
olam3=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext3=matrix(0,r,t)		# Probability of quasi-extinction#
#### Preliminary modeling exercises created a repatriation strategy where 30 'head-started', 2 yr-old subadult snakes would be released each year for 10 years. This sought to create a sustainable population with relatively low risk of extinction. However, this model lacked parametric uncertainty and stochasticity, it is expensive to raise snakes through the second year, and also difficult to raise enough snakes to release that many for 10 years. So, managers were also interested in the feasability of releasing younger snakes, such as hatchlings or 1-yr old juveniles, and whether shorter release periods (e.g., 5 years) or irregular release periods (7 out of 10 years)  would be sufficient to generate viable populations with low risk of extinction. However, two problems potentially limiting success are that (1) snakes are difficult to sample and may have detection probabilities much lower than 1.0, and (2) released animals may have decreased survival in the first year (post-release acclimation effect) while th
ey try to learn and figure out how to live in the wild.  #
  mPsamp=0.2#scenarios[h,5] 	# Probabilty of sampling snakes (i.e., detection probability)#
  SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
  aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
  Sr = .6#scenarios[h,6]		# Acclimation effect on survival (i.e., survival reduction)#
  # of released individuals	#
  Srt=matrix(0,r,t)#
  ### Create some matrices and parameters for the model loop:#
  Nh1 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj1 = matrix(0,r,t) 		# Juveniles#
  Nsa1 = matrix(0,r,t) 		# Subadults#
  Npa1 = matrix(0,r,t) 		# Primiparous adults#
  Na1 = matrix(0,r,t) 		# Adults#
  Nh2 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj2 = matrix(0,r,t) 		# Juveniles#
  Nsa2 = matrix(0,r,t) 		# Subadults#
  Npa2 = matrix(0,r,t) 		# Primiparous adults#
  Na2 = matrix(0,r,t) 		# Adults#
  Nh3 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj3 = matrix(0,r,t) 		# Juveniles#
  Nsa3 = matrix(0,r,t) 		# Subadults#
  Npa3 = matrix(0,r,t) 		# Primiparous adults#
  Na3 = matrix(0,r,t) 		# Adults#
  Nh1[,1]=0		# Initial abundance of hatchlings#
  Nj1[,1]=0		# Juveniles#
  Nsa1[,1]=0		# Subadults#
  Npa1[,1]=0		# Primiparous adults#
  Na1[,1]=0		# Adults#
  Nh2[,1]=0		# Initial abundance of hatchlings#
  Nj2[,1]=0		# Juveniles#
  Nsa2[,1]=0		# Subadults#
  Npa2[,1]=0		# Primiparous adults#
  Na2[,1]=0		# Adults#
  Nh3[,1]=0		# Initial abundance of hatchlings#
  Nj3[,1]=0		# Juveniles#
  Nsa3[,1]=0		# Subadults#
  Npa3[,1]=0		# Primiparous adults#
  Na3[,1]=0		# Adults#
   nyr=10 #number of years for the release program#
  # nrelsa1=0#
  # nrelj1=30#
  # nrelh1=0#
  # nrelsa2=0#
  # nrelj2=30#
  # nrelh2=0#
  # nrelsa3=0#
  # nrelj3=30#
  # nrelh3=0#
  MaxR = 40 #Change this to change total captive production#
  Ph=0 #Proportion of releases that are hatchlings#
  Pj=0 #Proportion of releases that are juveniles#
  Psa=1 #Proportion of releases that are subadults#
  split=0.5#
  Ry=matrix(round(runif(r*t,5,MaxR),0),r,t)#
  Nhr1 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr1 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar1 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nhr2 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr2 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar2 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nbreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nbreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nmax=300 			# Population ceiling for density dependence
MaxR = 30 #Change this to change total captive production
rm(list=ls())#
############## Part 1) Modeling demographic parameters for#
############## Eastern Indigo Snakes (Drymarchon couperi)#
# Model female populations of D. couperi as a population with five distinct life stages:#
# 1) hatchlings/first-year snakes (ages 0-1)#
# 2) juveniles (ca. 1-2 yr) #
# 3) subadults (ca. 2-3 yr)#
# 4) first-year adults (ca. 3-4 yr)#
# 5) adults (ca. 4<= yr)#
# The survival within each life stage and transition between stages can be conceptualized with a population transition matrix:#
# #
#		| 0			0				0				Sa1*Fa1*Ba1		Sa*Fa*Ba	|#
#		| Sh*Thj	Sj(1-Tjsa)		0				0				0		|#
# A =	| 0			Sj*Tjsa		Ssa(1-Tsaa1)			0	    			0		|, where:#
#		| 0			0				Ssa*Tsaa1		Sa1(1-Ta1a)		0		|#
#		| 0 		0				0				Sa1*Ta1a			Sa		|#
#	#
# S is the survival rate at stage i, where i can be h=hatchling, j=juvenile, sa=subadult, a1=primiparous adult, a=adult#
# F is the fecundity at stages a1 and a, and #
# B is the likelihood of breeding at stages a1 and a.#
#install.packages("statmod", dependencies=TRUE)#
library(statmod)#
library(SuppDists)#
### To simulate these parameters, we will use 1000 replications (r) that are projected over 30 years (t)#
r = 100#
t = 30#
######## Define and parameterize each of the above variables here using realistical values estimated from the literature: Hyslop et al. 2012 Population Ecology#
### Sh -- survival of hatchlings#
## This stage is comparable to the hatchling/juvenile stage from Hyslop et al. 2012, where they estimated survival in the first year by two components: hatchling survival during the first three months (0.49) and juvenile survival during the subsequent nine months (0.59). We modeled this as a conservative estimate of the two; 0.52#
mSh = 0.52  		#
varSh = 0.1							# Variance of mean#
aSh = mSh*((mSh*(1-mSh)/(varSh^2))-1) 	 	#
bSh = (1-mSh)*((mSh*(1-mSh)/(varSh^2))-1) #
Shi = matrix(rbeta(r,aSh,bSh),r,1)	# Parametric uncertainty #
SDmShi = matrix(rinvgauss(r,varSh^2,1),r,1)#
AShi = matrix(0,r,1)				# beta distribution shape parameters#
BShi = matrix(0,r,1)				# beta distribution shape parameters#
Sht = matrix(0,r,t)					# annual variation survival#
### Sj -- survival of juveniles #
## This stage is somewhat comparable to the subadult stage from Hyslop et al. 2012, where they estimated survival as 0.52 (0.20 SE). However, their sample size was low for individuals in this stage, and it seems unlikely that second year individuals would have lower survival than the hatchling stage. So we modeled survival in the second year (0.60) as a modest increase relative to survival in the first year.#
mSj = 0.60  		#
varSj = 0.1		# Variance of mean#
aSj = mSj*((mSj*(1-mSj)/(varSj^2))-1) 	 	#
bSj = (1-mSj)*((mSj*(1-mSj)/(varSj^2))-1) #
Sji = matrix(rbeta(r,aSj,bSj),r,1)			# Parametric uncertainty #
SDmSji = matrix(rinvgauss(r,varSj^2,1),r,1)#
ASji = matrix(0,r,1)				# beta distribution shape parameters#
BSji = matrix(0,r,1)				# beta distribution shape parameters#
Sjt = matrix(0,r,t)					# annual variation survival#
### Ssa -- survival of subadults  #
## This stage roughly translates to the first-year adults from Hyslop et al. 2012's adult survival stage (0.74), so we estimated this as 0.70 as a slightly reduced estimate of that.#
mSsa = 0.70  		#
varSsa = 0.1		# Variance of mean #
aSsa = mSsa*((mSsa*(1-mSsa)/(varSsa^2))-1) 	 	#
bSsa = (1-mSsa)*((mSsa*(1-mSsa)/(varSsa^2))-1) #
Ssai = matrix(rbeta(r,aSsa,bSsa),r,1)			# Parametric uncertainty #
SDmSsai = matrix(rinvgauss(r,varSsa^2,1),r,1)#
ASsai = matrix(0,r,1)				# beta distribution shape parameters#
BSsai = matrix(0,r,1)				# beta distribution shape parameters#
Ssat = matrix(0,r,t)					# annual variation survival#
### Sa1 -- survival of first-year adults #
## This stage roughly translates to the second-year adults from Hyslop et al. 2012's adult survival stage (0.74), so we estimated this as 0.70 as an increased estimate of that (0.80)#
mSa1 = 0.80	#
varSa1 = 0.1		# Variance of mean #
aSa1 = mSa1*((mSa1*(1-mSa1)/(varSa1^2))-1) 	 	#
bSa1 = (1-mSa1)*((mSa1*(1-mSa1)/(varSa1^2))-1) #
Sa1i = matrix(rbeta(r,aSa1,bSa1),r,1)			# Parametric uncertainty #
SDmSa1i = matrix(rinvgauss(r,varSa1^2,1),r,1)#
ASa1i = matrix(0,r,1)				# beta distribution shape parameters#
BSa1i = matrix(0,r,1)				# beta distribution shape parameters#
Spat = matrix(0,r,t)					# annual variation survival#
### Sa -- survival of adults #
## Radiotelemetered individuals in CNF that survive one year proceed to have high #
## survival (0.90) (Stiles 2013). #
mSa = 0.85 		#
varSa = 0.1		# Variance of mean#
aSa = mSa*((mSa*(1-mSa)/(varSa^2))-1) 	 	#
bSa = (1-mSa)*((mSa*(1-mSa)/(varSa^2))-1) #
Sai = matrix(rbeta(r,aSa,bSa),r,1)			# Parametric uncertainty #
SDmSai = matrix(rinvgauss(r,varSa^2,1),r,1)#
ASai = matrix(0,r,1)				# beta distribution shape parameters#
BSai = matrix(0,r,1)				# beta distribution shape parameters#
Sat = matrix(0,r,t)					# annual variation survival#
### The first four stages should theoretically transition into the next age stage after one year. However, there may be uncertainty if individuals vary in growth and individuals remain in stages, especially as they age. To model this uncertainty, we modeled transition probability declining from 0.99 with each successive stage up to the primiparous adult stage, until when primiparous females all transition to be adults.#
mThj = 0.99  			# Mean transition from hatchling to juvenile#
varThj = 0.01		#
aThj = mSh*((mSh*(1-mSh)/varSh^2)-1)#
bThj = (1-mSh)*((mSh*(1-mSh)/varSh^2)-1)#
Thj = matrix(rbeta(r*t,aThj,bThj),r,t)#
mTjsa = 0.90 			# Mean transition from juvenile to subadult#
varTjsa = 0.03	#
aTjsa = mSj*((mSj*(1-mSj)/varSj^2)-1)#
bTjsa = (1-mSj)*((mSj*(1-mSj)/varSj^2)-1)#
Tjsa = matrix(rbeta(r*t,aTjsa,bTjsa),r,t)#
mTsaa1 = 0.80  			# Mean transition from subadult to primiparous adult#
varTsaa1 = 0.05	#
aTsaa1 = mSsa*((mSsa*(1-mSsa)/varSsa^2)-1)#
bTsaa1 = (1-mSsa)*((mSsa*(1-mSsa)/varSsa^2)-1)#
Tsaa1 = matrix(rbeta(r*t,aTsaa1,bTsaa1),r,t)#
mTa1a = 0.99  			# Mean transition from primiparous adult to adult#
varTa1a = 0.01	#
aTa1a = mSa1*((mSa1*(1-mSa1)/varSa1^2)-1)#
bTa1a = (1-mSa1)*((mSa1*(1-mSa1)/varSa1^2)-1)#
Ta1a = matrix(rbeta(r*t,aTa1a,bTa1a),r,t)#
### Fa -- fecundity of adults (clutch size)#
## Mean Fa = 9 (4-12, range; Hyslop et al. 2012)#
## Fa = 8.65 (6-12, range; husbandry data, C. Guyer pers. comm.)#
muFa = 8.65#
sdFa = 2#
fecundShape2Fa = log((sdFa^2)/(muFa^2)+1)#
fecundShape1Fa = log(muFa)-1/2*fecundShape2Fa#
#hist(round(rlnorm(100,fecundShape1Fa,fecundShape2Fa)))	# for visualization purposes#
round(rlnorm(1,fecundShape1Fa,fecundShape2Fa))  # Clutch size for matrix#
eggsa1 = matrix(0,r,t)				# eggs from adults#
eggsa2 = matrix(0,r,t)#
eggsa3 = matrix(0,r,t)#
### Pva -- proportion of viable eggs for adults#
Pva = 0.85 #
aPva = 100*Pva#
bPva = 100*(1-Pva)#
Pvat=matrix(rbeta(r*t,aPva,bPva),r,t)#
### Fa1 -- fecundity (clutch size) of primiparous adults#
## A primary reason why we modeled two stages of adults is because, in our experience, first-year breeding females lay clutches dominated by inviable eggs. So, we wanted to model these females as having different egg viability relative to older, more experienced individuals; clutch size was the same. #
muFa1 = 8.65							#
sdFa1 = 2								#
fecundShape2Fa1 = log((sdFa1^2)/(muFa1^2)+1)#
fecundShape1Fa1 = log(muFa1)-1/2*fecundShape2Fa1#
# hist(round(rlnorm(100,fecundShape1Fa1,fecundShape2Fa1)))	# for visualization purposes#
round(rlnorm(1,fecundShape1Fa1,fecundShape2Fa1))  # Clutch size for matrix#
eggspa1 = matrix(0,r,t)				# eggs from primiparous adults (a1)#
eggspa2 = matrix(0,r,t)#
### Pva1 -- proportion of viable eggs for primiparous adults#
Pva1 = 0.35 #
aPva1 = 100*Pva1#
bPva1 = 100*(1-Pva1)#
Pva1t=matrix(rbeta(r*t,aPva1,bPva1),r,t)#
### Se -- survival of eggs (nests); following an estimate by Hyslop et al. (2012), but no data from the field have estimated this parameter#
Se = 0.75 #
varSe = 0.15#
aSe=Se*((Se*(1-Se)/varSe^2)-1)#
bSe=(1-Se)*((Se*(1-Se)/varSe^2)-1)#
Set=matrix(0,r,t)#
### SR -- Sex ratio of eggs#
## A beta-distributed variable 0.5 (+/-0.04) to only model the proportion of females assuming a 1:1 sex ratio in clutches#
mSR = 0.5#
varSR = 0.04#
aSR=mSR*((mSR*(1-mSR)/(varSR^2))-1)#
bSR=(1-mSR)*((mSR*(1-mSR)/(varSR^2))-1)#
SRi = matrix(rbeta(r,aSR,bSR),r,1)			 #
SDmSRi = matrix(rinvgauss(r,aSR^2,1),r,1)#
ASRi = matrix(0,r,1)				#
BSRi = matrix(0,r,1)				#
SRt = matrix(0,r,t)				#
### Pbt -- proportion of individuals that breed#
## An attempt to simulate some good-year/bad-year dynamics.#
Pbt = matrix(0,r,t) #
PGY = 0.8#
GY = matrix(rbinom(r*t,1,PGY),r,t) #
SDPb=0.2#
### Proportion of individuals that breed during any given year.#
PB = 0.8#
varPB = 0.1#
aPB = PB*((PB*(1-PB)/varPB^2)-1)#
bPB = (1-PB)*((PB*(1-PB)/varPB^2)-1)#
rbeta(1,aPB,bPB)#
### Sr -- survival reduction for captives released into wild#
## Individuals being released into the wild may not perform as well as wild-born individuals, so we modeled an acclimation effect on the survival of captive-bred snakes being released, where survival during the released life stage was multiplied by this variable. #
Sr = 0.8 						#
Srt=matrix(0,r,t)#
### pSamp -- the probability of sampling snakes#
## Snakes are difficult to detect, especially fossorial species that have large homeranges. This parameter models how detection probability influences our ability to monitor population growth.#
mPsamp=0.20 #
SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
# We model pSamp = 0.20 here, but in the model for-loops we explore other values #
# Simulating parameters is now done#
detach(package:statmod)#
############## Part 2)#
############## Project the population growth and extinction risk of D. couperi  #
############## under different repatriation scenarios #
#t = 30		# Number of years to project simulations#
#r = 1000		# Number of simulation replications #
### Population growth & quasi-extinction estimates#
rlam1=matrix(0,r,t)		# Real (true) population growth#
olam1=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext1=matrix(0,r,t)		# Probability of quasi-extinction#
rlam2=matrix(0,r,t)		# Real (true) population growth#
olam2=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext2=matrix(0,r,t)		# Probability of quasi-extinction#
rlam3=matrix(0,r,t)		# Real (true) population growth#
olam3=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext3=matrix(0,r,t)		# Probability of quasi-extinction#
#### Preliminary modeling exercises created a repatriation strategy where 30 'head-started', 2 yr-old subadult snakes would be released each year for 10 years. This sought to create a sustainable population with relatively low risk of extinction. However, this model lacked parametric uncertainty and stochasticity, it is expensive to raise snakes through the second year, and also difficult to raise enough snakes to release that many for 10 years. So, managers were also interested in the feasability of releasing younger snakes, such as hatchlings or 1-yr old juveniles, and whether shorter release periods (e.g., 5 years) or irregular release periods (7 out of 10 years)  would be sufficient to generate viable populations with low risk of extinction. However, two problems potentially limiting success are that (1) snakes are difficult to sample and may have detection probabilities much lower than 1.0, and (2) released animals may have decreased survival in the first year (post-release acclimation effect) while th
ey try to learn and figure out how to live in the wild.  #
  mPsamp=0.2#scenarios[h,5] 	# Probabilty of sampling snakes (i.e., detection probability)#
  SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
  aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
  Sr = .6#scenarios[h,6]		# Acclimation effect on survival (i.e., survival reduction)#
  # of released individuals	#
  Srt=matrix(0,r,t)#
  ### Create some matrices and parameters for the model loop:#
  Nh1 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj1 = matrix(0,r,t) 		# Juveniles#
  Nsa1 = matrix(0,r,t) 		# Subadults#
  Npa1 = matrix(0,r,t) 		# Primiparous adults#
  Na1 = matrix(0,r,t) 		# Adults#
  Nh2 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj2 = matrix(0,r,t) 		# Juveniles#
  Nsa2 = matrix(0,r,t) 		# Subadults#
  Npa2 = matrix(0,r,t) 		# Primiparous adults#
  Na2 = matrix(0,r,t) 		# Adults#
  Nh3 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj3 = matrix(0,r,t) 		# Juveniles#
  Nsa3 = matrix(0,r,t) 		# Subadults#
  Npa3 = matrix(0,r,t) 		# Primiparous adults#
  Na3 = matrix(0,r,t) 		# Adults#
  Nh1[,1]=0		# Initial abundance of hatchlings#
  Nj1[,1]=0		# Juveniles#
  Nsa1[,1]=0		# Subadults#
  Npa1[,1]=0		# Primiparous adults#
  Na1[,1]=0		# Adults#
  Nh2[,1]=0		# Initial abundance of hatchlings#
  Nj2[,1]=0		# Juveniles#
  Nsa2[,1]=0		# Subadults#
  Npa2[,1]=0		# Primiparous adults#
  Na2[,1]=0		# Adults#
  Nh3[,1]=0		# Initial abundance of hatchlings#
  Nj3[,1]=0		# Juveniles#
  Nsa3[,1]=0		# Subadults#
  Npa3[,1]=0		# Primiparous adults#
  Na3[,1]=0		# Adults#
   nyr=10 #number of years for the release program#
  # nrelsa1=0#
  # nrelj1=30#
  # nrelh1=0#
  # nrelsa2=0#
  # nrelj2=30#
  # nrelh2=0#
  # nrelsa3=0#
  # nrelj3=30#
  # nrelh3=0#
  MaxR = 30 #Change this to change total captive production#
  Ph=0 #Proportion of releases that are hatchlings#
  Pj=0 #Proportion of releases that are juveniles#
  Psa=1 #Proportion of releases that are subadults#
  split=0.5#
  Ry=matrix(round(runif(r*t,5,MaxR),0),r,t)#
  Nhr1 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr1 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar1 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nhr2 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr2 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar2 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nbreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nbreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nmax=300 			# Population ceiling for density dependence
#### Population-projection model that accounts for imperfect detection#
  for(i in 1:r){			# Replication loop; draws replicate-level means for survival at each stage#
    ASai[i] = 100*Sai[i]			# Adults 		#
    BSai[i] = 100*(1-Sai[i])		#
    ASa1i[i] = 100*Sa1i[i]		 # Primiparous adults	#
    BSa1i[i] = 100*(1-Sa1i[i])#
    ASsai[i] = 100*Ssai[i]		 # Subadults	#
    BSsai[i] = 100*(1-Ssai[i])#
    ASji[i] = 100*Sji[i]			# Juveniles  		#
    BSji[i] = 100*(1-Sji[i])#
    AShi[i] = 100*Shi[i]		 	# Hatchlings	#
    BShi[i] = 100*(1-Shi[i])#
    for(j in 1:t){			# Projection loop; drawing annual demographic rates#
      Sat[i,j]=rbeta(1,ASai[i],BSai[i])			# Adults#
      Spat[i,j]=rbeta(1,ASa1i[i],BSa1i[i])		# Primiparous adults#
      Ssat[i,j]=rbeta(1,ASsai[i],BSsai[i])		# Subadults#
      Sjt[i,j]=rbeta(1,ASji[i],BSji[i])			# Juveniles#
      Sht[i,j]=rbeta(1,aSh,bSh)					# Hatchlings#
      Set[i,j]=rbeta(1,aSe,bSe)					# Egg survival#
      Srt[i,j]=rbeta(1,100*Sr, 100*(1-Sr)) 		# Randomize the acclimation effect #
      # (Sr; survival reduction)#
      # Drawing the number of released subadults and juveniles, and account for sex ratio to remove males#
      if (j>0 && j<nyr+1 ) Nhr1[i,j] = round(Ry[i,j]*Ph*split,0)*rbeta(1,aSR,bSR)		 #
      if (j>0 && j<nyr+1 ) Njr1[i,j] = round(Ry[i,j]*Pj*split,0)*rbeta(1,aSR,bSR) 	#
      if (j>0 && j<nyr+1 ) Nsar1[i,j] = round(Ry[i,j]*Psa*split,0)*rbeta(1,aSR,bSR)#
      if (j>0 && j<nyr+1 )Nhr2[i,j] = round(Ry[i,j]*Ph*split,0)*rbeta(1,aSR,bSR)		#
      if (j>0 && j<nyr+1 )Njr2[i,j] = round(Ry[i,j]*Pj*split,0)*rbeta(1,aSR,bSR)	#
      if (j>0 && j<nyr+1 )Nsar2[i,j] = round(Ry[i,j]*Psa*split,0)*rbeta(1,aSR,bSR)#
      # #
      # if (j>0 && j<nyr+1 ) Nsar1[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Njr1[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Nhr1[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
      # #
      # if (j>0 && j<nyr+1 ) Nsar2[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Njr2[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Nhr2[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
      # # Specify the number of females released in CNF and ABRP (1) to date and (2) projected#
      # if (rownames(scenarios)[h] == "CNFc") Nsar=CNFc#
      # if (rownames(scenarios)[h] == "ABRPc") Nsar=ABRPc#
      # if (rownames(scenarios)[h] == "CNFp") Nsar=CNFp#
      # if (rownames(scenarios)[h] == "ABRPp") Nsar=ABRPp#
      #######################################################
      #######################################################
      ########*******FIRST RELEASE POPULATION#
      #######################################################
      # Projection equation for adults#
      if (j>1) Na1[i,j]=round((Na1[i,j-1]*Sat[i,j-1]+Npa1[i,j-1]*Spat[i,j-1]*Ta1a[i,j-1])) else Na1[i,j]=0#
      round(Na1[i,j],0)#
      # Projection equation for primiparous adults#
      if (j>1) Npa1[i,j]=round((Npa1[i,j-1]*(Spat[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa1[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar1[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Npa1[i,j]=0#
      round(Npa1[i,j],0)#
      # Density-dependence; decrease subadult survival considerably when population sizes get too high;#
      # drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
      if (Na1[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
      if (Na1[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
      # Projection equation for subadults#
      if (j>1) Nsa1[i,j]=round((Nsa1[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj1[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr1[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa1[i,j]=0#
      round(Nsa1[i,j],0)#
      # Projection equation for juveniles#
      if (j>1) Nj1[i,j]=round((Nj1[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh1[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
                               (Nhr1[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj1[i,j]=0#
      round(Nj1[i,j],0)#
      # Good-year/bad-year function for probability of breeding#
      if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
      # Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
      eggsa1[i,j] = sum(rpois(round(Na1[i,j]*Pbt[i,j],0),muFa))/2#
      eggspa1[i,j] = sum(rpois(round(Npa1[i,j]*Pbt[i,j],0),muFa1))/2#
      round(eggsa1[i,j],0)#
      round(eggspa1[i,j],0)#
      # Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
      if (j>1) Nh1[i,j] = round((eggsa1[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggspa1[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh1[i,j]=0#
      round(Nh1[i,j],0)#
      # Sum the number of reproductive and immature individuals to facilitate the construction of figures#
      Nbreeders1[i,j] = Na1[i,j]+Npa1[i,j]		# Sum all breeders at each time step#
      Nimmatures1 = Nh1+Nj1+Nsa1	# Sum all immatures at each time step#
      # Implement sampling (detection) probability for adults and immatures#
      Nobreeders1[i,j]=sum(rbinom(Nbreeders1[i,j],1,Psamp[i,j]))#
      Noimmatures1[i,j]=sum(rbinom(Nimmatures1[i,j],1,Psamp[i,j]))#
      # Calculate population growth rate#
      if(j>5) rlam1[i,j]=Nbreeders1[i,j]/Nbreeders1[i,j-1]#
      if(j>5 && Nobreeders1[i,j-1]>0) olam1[i,j]= Nobreeders1[i,j]/Nobreeders1[i,j-1]#
      if (Nbreeders1[i,j]<5) Pext1[i,j]=1 else Pext1[i,j]=0 #
      #######################################################
      #######################################################
      ########*******SECOND RELEASE POPULATION#
      #######################################################
      # Projection equation for adults#
      if (j>1) Na2[i,j]=round((Na2[i,j-1]*Sat[i,j-1]+Npa2[i,j-1]*Spat[i,j-1]*Ta1a[i,j-1])) else Na2[i,j]=0#
      round(Na2[i,j],0)#
      # Projection equation for primiparous adults#
      if (j>1) Npa2[i,j]=round((Npa2[i,j-1]*(Spat[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa2[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar2[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Npa2[i,j]=0#
      round(Npa2[i,j],0)#
      # Density-dependence; decrease subadult survival considerably when population sizes get too high;#
      # drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
      if (Na2[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
      if (Na2[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
      # Projection equation for subadults#
      if (j>1) Nsa2[i,j]=round((Nsa2[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj2[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr2[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa2[i,j]=0#
      round(Nsa2[i,j],0)#
      # Projection equation for juveniles#
      if (j>1) Nj2[i,j]=round((Nj2[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh2[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
                               (Nhr2[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj2[i,j]=0#
      round(Nj2[i,j],0)#
      # Good-year/bad-year function for probability of breeding#
      #if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
      # Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
      eggsa2[i,j] = sum(rpois(round(Na2[i,j]*Pbt[i,j],0),muFa))/2#
      eggspa2[i,j] = sum(rpois(round(Npa2[i,j]*Pbt[i,j],0),muFa1))/2#
      round(eggsa2[i,j],0)#
      round(eggspa2[i,j],0)#
      # Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
      if (j>1) Nh2[i,j] = round((eggsa2[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggspa2[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh2[i,j]=0#
      round(Nh2[i,j],0)#
      # Sum the number of reproductive and immature individuals to facilitate the construction of figures#
      Nbreeders2[i,j] = Na2[i,j]+Npa2[i,j]		# Sum all breeders at each time step#
      Nimmatures2 = Nh2+Nj2+Nsa2	# Sum all immatures at each time step#
      # Implement sampling (detection) probability for adults and immatures#
      Nobreeders2[i,j]=sum(rbinom(Nbreeders2[i,j],1,Psamp[i,j]))#
      Noimmatures2[i,j]=sum(rbinom(Nimmatures2[i,j],1,Psamp[i,j]))#
       # Calculate population growth rate#
      if(j>5) rlam2[i,j]=Nbreeders2[i,j]/Nbreeders2[i,j-1]#
      if(j>5 && Nobreeders2[i,j-1]>0) olam2[i,j]= Nobreeders2[i,j]/Nobreeders2[i,j-1]#
      if (Nbreeders2[i,j]<5) Pext2[i,j]=1 else Pext2[i,j]=0 #
    }}	# Close replication and projection loops#
  medrlam1 = apply(rlam1, 2, median, na.rm=TRUE)		# Median real population growth#
  medolam1 = apply(olam1, 2, median, na.rm=TRUE)		# Median observed population growth#
  medNbreeders1=apply(Nbreeders1,2,median)#
  PE1 = apply(Pext1,2,sum)/r							# Prob. of quasi-extinction#
  PEt1 = PE1[t]										# Prob. of q-extinction @ year t#
  PE1#
  medNbreeders1#
  medrlam2 = apply(rlam2, 2, median, na.rm=TRUE)		# Median real population growth#
  medolam2 = apply(olam2, 2, median, na.rm=TRUE)		# Median observed population growth#
  medNbreeders2=apply(Nbreeders2,2,median)#
  PE2 = apply(Pext2,2,sum)/r							# Prob. of quasi-extinction#
  PEt2 = PE2[t]				#
  PE2#
  medNbreeders2
rm(list=ls())#
############## Part 1) Modeling demographic parameters for#
############## Eastern Indigo Snakes (Drymarchon couperi)#
# Model female populations of D. couperi as a population with five distinct life stages:#
# 1) hatchlings/first-year snakes (ages 0-1)#
# 2) juveniles (ca. 1-2 yr) #
# 3) subadults (ca. 2-3 yr)#
# 4) first-year adults (ca. 3-4 yr)#
# 5) adults (ca. 4<= yr)#
# The survival within each life stage and transition between stages can be conceptualized with a population transition matrix:#
# #
#		| 0			0				0				Sa1*Fa1*Ba1		Sa*Fa*Ba	|#
#		| Sh*Thj	Sj(1-Tjsa)		0				0				0		|#
# A =	| 0			Sj*Tjsa		Ssa(1-Tsaa1)			0	    			0		|, where:#
#		| 0			0				Ssa*Tsaa1		Sa1(1-Ta1a)		0		|#
#		| 0 		0				0				Sa1*Ta1a			Sa		|#
#	#
# S is the survival rate at stage i, where i can be h=hatchling, j=juvenile, sa=subadult, a1=primiparous adult, a=adult#
# F is the fecundity at stages a1 and a, and #
# B is the likelihood of breeding at stages a1 and a.#
#install.packages("statmod", dependencies=TRUE)#
library(statmod)#
library(SuppDists)#
### To simulate these parameters, we will use 1000 replications (r) that are projected over 30 years (t)#
r = 100#
t = 30#
######## Define and parameterize each of the above variables here using realistical values estimated from the literature: Hyslop et al. 2012 Population Ecology#
### Sh -- survival of hatchlings#
## This stage is comparable to the hatchling/juvenile stage from Hyslop et al. 2012, where they estimated survival in the first year by two components: hatchling survival during the first three months (0.49) and juvenile survival during the subsequent nine months (0.59). We modeled this as a conservative estimate of the two; 0.52#
mSh = 0.52  		#
varSh = 0.1							# Variance of mean#
aSh = mSh*((mSh*(1-mSh)/(varSh^2))-1) 	 	#
bSh = (1-mSh)*((mSh*(1-mSh)/(varSh^2))-1) #
Shi = matrix(rbeta(r,aSh,bSh),r,1)	# Parametric uncertainty #
SDmShi = matrix(rinvgauss(r,varSh^2,1),r,1)#
AShi = matrix(0,r,1)				# beta distribution shape parameters#
BShi = matrix(0,r,1)				# beta distribution shape parameters#
Sht = matrix(0,r,t)					# annual variation survival#
### Sj -- survival of juveniles #
## This stage is somewhat comparable to the subadult stage from Hyslop et al. 2012, where they estimated survival as 0.52 (0.20 SE). However, their sample size was low for individuals in this stage, and it seems unlikely that second year individuals would have lower survival than the hatchling stage. So we modeled survival in the second year (0.60) as a modest increase relative to survival in the first year.#
mSj = 0.60  		#
varSj = 0.1		# Variance of mean#
aSj = mSj*((mSj*(1-mSj)/(varSj^2))-1) 	 	#
bSj = (1-mSj)*((mSj*(1-mSj)/(varSj^2))-1) #
Sji = matrix(rbeta(r,aSj,bSj),r,1)			# Parametric uncertainty #
SDmSji = matrix(rinvgauss(r,varSj^2,1),r,1)#
ASji = matrix(0,r,1)				# beta distribution shape parameters#
BSji = matrix(0,r,1)				# beta distribution shape parameters#
Sjt = matrix(0,r,t)					# annual variation survival#
### Ssa -- survival of subadults  #
## This stage roughly translates to the first-year adults from Hyslop et al. 2012's adult survival stage (0.74), so we estimated this as 0.70 as a slightly reduced estimate of that.#
mSsa = 0.70  		#
varSsa = 0.1		# Variance of mean #
aSsa = mSsa*((mSsa*(1-mSsa)/(varSsa^2))-1) 	 	#
bSsa = (1-mSsa)*((mSsa*(1-mSsa)/(varSsa^2))-1) #
Ssai = matrix(rbeta(r,aSsa,bSsa),r,1)			# Parametric uncertainty #
SDmSsai = matrix(rinvgauss(r,varSsa^2,1),r,1)#
ASsai = matrix(0,r,1)				# beta distribution shape parameters#
BSsai = matrix(0,r,1)				# beta distribution shape parameters#
Ssat = matrix(0,r,t)					# annual variation survival#
### Sa1 -- survival of first-year adults #
## This stage roughly translates to the second-year adults from Hyslop et al. 2012's adult survival stage (0.74), so we estimated this as 0.70 as an increased estimate of that (0.80)#
mSa1 = 0.80	#
varSa1 = 0.1		# Variance of mean #
aSa1 = mSa1*((mSa1*(1-mSa1)/(varSa1^2))-1) 	 	#
bSa1 = (1-mSa1)*((mSa1*(1-mSa1)/(varSa1^2))-1) #
Sa1i = matrix(rbeta(r,aSa1,bSa1),r,1)			# Parametric uncertainty #
SDmSa1i = matrix(rinvgauss(r,varSa1^2,1),r,1)#
ASa1i = matrix(0,r,1)				# beta distribution shape parameters#
BSa1i = matrix(0,r,1)				# beta distribution shape parameters#
Spat = matrix(0,r,t)					# annual variation survival#
### Sa -- survival of adults #
## Radiotelemetered individuals in CNF that survive one year proceed to have high #
## survival (0.90) (Stiles 2013). #
mSa = 0.85 		#
varSa = 0.1		# Variance of mean#
aSa = mSa*((mSa*(1-mSa)/(varSa^2))-1) 	 	#
bSa = (1-mSa)*((mSa*(1-mSa)/(varSa^2))-1) #
Sai = matrix(rbeta(r,aSa,bSa),r,1)			# Parametric uncertainty #
SDmSai = matrix(rinvgauss(r,varSa^2,1),r,1)#
ASai = matrix(0,r,1)				# beta distribution shape parameters#
BSai = matrix(0,r,1)				# beta distribution shape parameters#
Sat = matrix(0,r,t)					# annual variation survival#
### The first four stages should theoretically transition into the next age stage after one year. However, there may be uncertainty if individuals vary in growth and individuals remain in stages, especially as they age. To model this uncertainty, we modeled transition probability declining from 0.99 with each successive stage up to the primiparous adult stage, until when primiparous females all transition to be adults.#
mThj = 0.99  			# Mean transition from hatchling to juvenile#
varThj = 0.01		#
aThj = mSh*((mSh*(1-mSh)/varSh^2)-1)#
bThj = (1-mSh)*((mSh*(1-mSh)/varSh^2)-1)#
Thj = matrix(rbeta(r*t,aThj,bThj),r,t)#
mTjsa = 0.90 			# Mean transition from juvenile to subadult#
varTjsa = 0.03	#
aTjsa = mSj*((mSj*(1-mSj)/varSj^2)-1)#
bTjsa = (1-mSj)*((mSj*(1-mSj)/varSj^2)-1)#
Tjsa = matrix(rbeta(r*t,aTjsa,bTjsa),r,t)#
mTsaa1 = 0.80  			# Mean transition from subadult to primiparous adult#
varTsaa1 = 0.05	#
aTsaa1 = mSsa*((mSsa*(1-mSsa)/varSsa^2)-1)#
bTsaa1 = (1-mSsa)*((mSsa*(1-mSsa)/varSsa^2)-1)#
Tsaa1 = matrix(rbeta(r*t,aTsaa1,bTsaa1),r,t)#
mTa1a = 0.99  			# Mean transition from primiparous adult to adult#
varTa1a = 0.01	#
aTa1a = mSa1*((mSa1*(1-mSa1)/varSa1^2)-1)#
bTa1a = (1-mSa1)*((mSa1*(1-mSa1)/varSa1^2)-1)#
Ta1a = matrix(rbeta(r*t,aTa1a,bTa1a),r,t)#
### Fa -- fecundity of adults (clutch size)#
## Mean Fa = 9 (4-12, range; Hyslop et al. 2012)#
## Fa = 8.65 (6-12, range; husbandry data, C. Guyer pers. comm.)#
muFa = 8.65#
sdFa = 2#
fecundShape2Fa = log((sdFa^2)/(muFa^2)+1)#
fecundShape1Fa = log(muFa)-1/2*fecundShape2Fa#
#hist(round(rlnorm(100,fecundShape1Fa,fecundShape2Fa)))	# for visualization purposes#
round(rlnorm(1,fecundShape1Fa,fecundShape2Fa))  # Clutch size for matrix#
eggsa1 = matrix(0,r,t)				# eggs from adults#
eggsa2 = matrix(0,r,t)#
eggsa3 = matrix(0,r,t)#
### Pva -- proportion of viable eggs for adults#
Pva = 0.85 #
aPva = 100*Pva#
bPva = 100*(1-Pva)#
Pvat=matrix(rbeta(r*t,aPva,bPva),r,t)#
### Fa1 -- fecundity (clutch size) of primiparous adults#
## A primary reason why we modeled two stages of adults is because, in our experience, first-year breeding females lay clutches dominated by inviable eggs. So, we wanted to model these females as having different egg viability relative to older, more experienced individuals; clutch size was the same. #
muFa1 = 8.65							#
sdFa1 = 2								#
fecundShape2Fa1 = log((sdFa1^2)/(muFa1^2)+1)#
fecundShape1Fa1 = log(muFa1)-1/2*fecundShape2Fa1#
# hist(round(rlnorm(100,fecundShape1Fa1,fecundShape2Fa1)))	# for visualization purposes#
round(rlnorm(1,fecundShape1Fa1,fecundShape2Fa1))  # Clutch size for matrix#
eggspa1 = matrix(0,r,t)				# eggs from primiparous adults (a1)#
eggspa2 = matrix(0,r,t)#
### Pva1 -- proportion of viable eggs for primiparous adults#
Pva1 = 0.35 #
aPva1 = 100*Pva1#
bPva1 = 100*(1-Pva1)#
Pva1t=matrix(rbeta(r*t,aPva1,bPva1),r,t)#
### Se -- survival of eggs (nests); following an estimate by Hyslop et al. (2012), but no data from the field have estimated this parameter#
Se = 0.75 #
varSe = 0.15#
aSe=Se*((Se*(1-Se)/varSe^2)-1)#
bSe=(1-Se)*((Se*(1-Se)/varSe^2)-1)#
Set=matrix(0,r,t)#
### SR -- Sex ratio of eggs#
## A beta-distributed variable 0.5 (+/-0.04) to only model the proportion of females assuming a 1:1 sex ratio in clutches#
mSR = 0.5#
varSR = 0.04#
aSR=mSR*((mSR*(1-mSR)/(varSR^2))-1)#
bSR=(1-mSR)*((mSR*(1-mSR)/(varSR^2))-1)#
SRi = matrix(rbeta(r,aSR,bSR),r,1)			 #
SDmSRi = matrix(rinvgauss(r,aSR^2,1),r,1)#
ASRi = matrix(0,r,1)				#
BSRi = matrix(0,r,1)				#
SRt = matrix(0,r,t)				#
### Pbt -- proportion of individuals that breed#
## An attempt to simulate some good-year/bad-year dynamics.#
Pbt = matrix(0,r,t) #
PGY = 0.8#
GY = matrix(rbinom(r*t,1,PGY),r,t) #
SDPb=0.2#
### Proportion of individuals that breed during any given year.#
PB = 0.8#
varPB = 0.1#
aPB = PB*((PB*(1-PB)/varPB^2)-1)#
bPB = (1-PB)*((PB*(1-PB)/varPB^2)-1)#
rbeta(1,aPB,bPB)#
### Sr -- survival reduction for captives released into wild#
## Individuals being released into the wild may not perform as well as wild-born individuals, so we modeled an acclimation effect on the survival of captive-bred snakes being released, where survival during the released life stage was multiplied by this variable. #
Sr = 0.5						#
Srt=matrix(0,r,t)#
### pSamp -- the probability of sampling snakes#
## Snakes are difficult to detect, especially fossorial species that have large homeranges. This parameter models how detection probability influences our ability to monitor population growth.#
mPsamp=0.20 #
SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
# We model pSamp = 0.20 here, but in the model for-loops we explore other values #
# Simulating parameters is now done#
detach(package:statmod)#
############## Part 2)#
############## Project the population growth and extinction risk of D. couperi  #
############## under different repatriation scenarios #
#t = 30		# Number of years to project simulations#
#r = 1000		# Number of simulation replications #
### Population growth & quasi-extinction estimates#
rlam1=matrix(0,r,t)		# Real (true) population growth#
olam1=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext1=matrix(0,r,t)		# Probability of quasi-extinction#
rlam2=matrix(0,r,t)		# Real (true) population growth#
olam2=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext2=matrix(0,r,t)		# Probability of quasi-extinction#
rlam3=matrix(0,r,t)		# Real (true) population growth#
olam3=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext3=matrix(0,r,t)		# Probability of quasi-extinction#
#### Preliminary modeling exercises created a repatriation strategy where 30 'head-started', 2 yr-old subadult snakes would be released each year for 10 years. This sought to create a sustainable population with relatively low risk of extinction. However, this model lacked parametric uncertainty and stochasticity, it is expensive to raise snakes through the second year, and also difficult to raise enough snakes to release that many for 10 years. So, managers were also interested in the feasability of releasing younger snakes, such as hatchlings or 1-yr old juveniles, and whether shorter release periods (e.g., 5 years) or irregular release periods (7 out of 10 years)  would be sufficient to generate viable populations with low risk of extinction. However, two problems potentially limiting success are that (1) snakes are difficult to sample and may have detection probabilities much lower than 1.0, and (2) released animals may have decreased survival in the first year (post-release acclimation effect) while th
ey try to learn and figure out how to live in the wild.  #
  mPsamp=0.2#scenarios[h,5] 	# Probabilty of sampling snakes (i.e., detection probability)#
  SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
  aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
  Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
  Sr = .5#scenarios[h,6]		# Acclimation effect on survival (i.e., survival reduction)#
  # of released individuals	#
  Srt=matrix(0,r,t)#
  ### Create some matrices and parameters for the model loop:#
  Nh1 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj1 = matrix(0,r,t) 		# Juveniles#
  Nsa1 = matrix(0,r,t) 		# Subadults#
  Npa1 = matrix(0,r,t) 		# Primiparous adults#
  Na1 = matrix(0,r,t) 		# Adults#
  Nh2 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj2 = matrix(0,r,t) 		# Juveniles#
  Nsa2 = matrix(0,r,t) 		# Subadults#
  Npa2 = matrix(0,r,t) 		# Primiparous adults#
  Na2 = matrix(0,r,t) 		# Adults#
  Nh3 =  matrix(0,r,t)		# Abundance of hatchlings #
  Nj3 = matrix(0,r,t) 		# Juveniles#
  Nsa3 = matrix(0,r,t) 		# Subadults#
  Npa3 = matrix(0,r,t) 		# Primiparous adults#
  Na3 = matrix(0,r,t) 		# Adults#
  Nh1[,1]=0		# Initial abundance of hatchlings#
  Nj1[,1]=0		# Juveniles#
  Nsa1[,1]=0		# Subadults#
  Npa1[,1]=0		# Primiparous adults#
  Na1[,1]=0		# Adults#
  Nh2[,1]=0		# Initial abundance of hatchlings#
  Nj2[,1]=0		# Juveniles#
  Nsa2[,1]=0		# Subadults#
  Npa2[,1]=0		# Primiparous adults#
  Na2[,1]=0		# Adults#
  Nh3[,1]=0		# Initial abundance of hatchlings#
  Nj3[,1]=0		# Juveniles#
  Nsa3[,1]=0		# Subadults#
  Npa3[,1]=0		# Primiparous adults#
  Na3[,1]=0		# Adults#
   nyr=10 #number of years for the release program#
  # nrelsa1=0#
  # nrelj1=30#
  # nrelh1=0#
  # nrelsa2=0#
  # nrelj2=30#
  # nrelh2=0#
  # nrelsa3=0#
  # nrelj3=30#
  # nrelh3=0#
  MaxR = 30 #Change this to change total captive production#
  Ph=0 #Proportion of releases that are hatchlings#
  Pj=0 #Proportion of releases that are juveniles#
  Psa=1 #Proportion of releases that are subadults#
  split=0.5#
  Ry=matrix(round(runif(r*t,5,MaxR),0),r,t)#
  Nhr1 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr1 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar1 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nhr2 = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
  Njr2 = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
  Nsar2 = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
  Nbreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nbreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
  Nimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders1 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures1 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
   Nobreeders2 = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
   Noimmatures2 = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
  Nmax=300 			# Population ceiling for density dependence#
  #### Population-projection model that accounts for imperfect detection#
  for(i in 1:r){			# Replication loop; draws replicate-level means for survival at each stage#
    ASai[i] = 100*Sai[i]			# Adults 		#
    BSai[i] = 100*(1-Sai[i])		#
    ASa1i[i] = 100*Sa1i[i]		 # Primiparous adults	#
    BSa1i[i] = 100*(1-Sa1i[i])#
    ASsai[i] = 100*Ssai[i]		 # Subadults	#
    BSsai[i] = 100*(1-Ssai[i])#
    ASji[i] = 100*Sji[i]			# Juveniles  		#
    BSji[i] = 100*(1-Sji[i])#
    AShi[i] = 100*Shi[i]		 	# Hatchlings	#
    BShi[i] = 100*(1-Shi[i])#
    for(j in 1:t){			# Projection loop; drawing annual demographic rates#
      Sat[i,j]=rbeta(1,ASai[i],BSai[i])			# Adults#
      Spat[i,j]=rbeta(1,ASa1i[i],BSa1i[i])		# Primiparous adults#
      Ssat[i,j]=rbeta(1,ASsai[i],BSsai[i])		# Subadults#
      Sjt[i,j]=rbeta(1,ASji[i],BSji[i])			# Juveniles#
      Sht[i,j]=rbeta(1,aSh,bSh)					# Hatchlings#
      Set[i,j]=rbeta(1,aSe,bSe)					# Egg survival#
      Srt[i,j]=rbeta(1,100*Sr, 100*(1-Sr)) 		# Randomize the acclimation effect #
      # (Sr; survival reduction)#
      # Drawing the number of released subadults and juveniles, and account for sex ratio to remove males#
      if (j>0 && j<nyr+1 ) Nhr1[i,j] = round(Ry[i,j]*Ph*split,0)*rbeta(1,aSR,bSR)		 #
      if (j>0 && j<nyr+1 ) Njr1[i,j] = round(Ry[i,j]*Pj*split,0)*rbeta(1,aSR,bSR) 	#
      if (j>0 && j<nyr+1 ) Nsar1[i,j] = round(Ry[i,j]*Psa*split,0)*rbeta(1,aSR,bSR)#
      if (j>0 && j<nyr+1 )Nhr2[i,j] = round(Ry[i,j]*Ph*split,0)*rbeta(1,aSR,bSR)		#
      if (j>0 && j<nyr+1 )Njr2[i,j] = round(Ry[i,j]*Pj*split,0)*rbeta(1,aSR,bSR)	#
      if (j>0 && j<nyr+1 )Nsar2[i,j] = round(Ry[i,j]*Psa*split,0)*rbeta(1,aSR,bSR)#
      # #
      # if (j>0 && j<nyr+1 ) Nsar1[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Njr1[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Nhr1[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
      # #
      # if (j>0 && j<nyr+1 ) Nsar2[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Njr2[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
      # if (j>0 && j<nyr+1 ) Nhr2[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
      # # Specify the number of females released in CNF and ABRP (1) to date and (2) projected#
      # if (rownames(scenarios)[h] == "CNFc") Nsar=CNFc#
      # if (rownames(scenarios)[h] == "ABRPc") Nsar=ABRPc#
      # if (rownames(scenarios)[h] == "CNFp") Nsar=CNFp#
      # if (rownames(scenarios)[h] == "ABRPp") Nsar=ABRPp#
      #######################################################
      #######################################################
      ########*******FIRST RELEASE POPULATION#
      #######################################################
      # Projection equation for adults#
      if (j>1) Na1[i,j]=round((Na1[i,j-1]*Sat[i,j-1]+Npa1[i,j-1]*Spat[i,j-1]*Ta1a[i,j-1])) else Na1[i,j]=0#
      round(Na1[i,j],0)#
      # Projection equation for primiparous adults#
      if (j>1) Npa1[i,j]=round((Npa1[i,j-1]*(Spat[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa1[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar1[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Npa1[i,j]=0#
      round(Npa1[i,j],0)#
      # Density-dependence; decrease subadult survival considerably when population sizes get too high;#
      # drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
      if (Na1[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
      if (Na1[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
      # Projection equation for subadults#
      if (j>1) Nsa1[i,j]=round((Nsa1[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj1[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr1[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa1[i,j]=0#
      round(Nsa1[i,j],0)#
      # Projection equation for juveniles#
      if (j>1) Nj1[i,j]=round((Nj1[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh1[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
                               (Nhr1[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj1[i,j]=0#
      round(Nj1[i,j],0)#
      # Good-year/bad-year function for probability of breeding#
      if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
      # Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
      eggsa1[i,j] = sum(rpois(round(Na1[i,j]*Pbt[i,j],0),muFa))/2#
      eggspa1[i,j] = sum(rpois(round(Npa1[i,j]*Pbt[i,j],0),muFa1))/2#
      round(eggsa1[i,j],0)#
      round(eggspa1[i,j],0)#
      # Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
      if (j>1) Nh1[i,j] = round((eggsa1[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggspa1[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh1[i,j]=0#
      round(Nh1[i,j],0)#
      # Sum the number of reproductive and immature individuals to facilitate the construction of figures#
      Nbreeders1[i,j] = Na1[i,j]+Npa1[i,j]		# Sum all breeders at each time step#
      Nimmatures1 = Nh1+Nj1+Nsa1	# Sum all immatures at each time step#
      # Implement sampling (detection) probability for adults and immatures#
      Nobreeders1[i,j]=sum(rbinom(Nbreeders1[i,j],1,Psamp[i,j]))#
      Noimmatures1[i,j]=sum(rbinom(Nimmatures1[i,j],1,Psamp[i,j]))#
      # Calculate population growth rate#
      if(j>5) rlam1[i,j]=Nbreeders1[i,j]/Nbreeders1[i,j-1]#
      if(j>5 && Nobreeders1[i,j-1]>0) olam1[i,j]= Nobreeders1[i,j]/Nobreeders1[i,j-1]#
      if (Nbreeders1[i,j]<5) Pext1[i,j]=1 else Pext1[i,j]=0 #
      #######################################################
      #######################################################
      ########*******SECOND RELEASE POPULATION#
      #######################################################
      # Projection equation for adults#
      if (j>1) Na2[i,j]=round((Na2[i,j-1]*Sat[i,j-1]+Npa2[i,j-1]*Spat[i,j-1]*Ta1a[i,j-1])) else Na2[i,j]=0#
      round(Na2[i,j],0)#
      # Projection equation for primiparous adults#
      if (j>1) Npa2[i,j]=round((Npa2[i,j-1]*(Spat[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa2[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar2[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Npa2[i,j]=0#
      round(Npa2[i,j],0)#
      # Density-dependence; decrease subadult survival considerably when population sizes get too high;#
      # drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
      if (Na2[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
      if (Na2[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
      # Projection equation for subadults#
      if (j>1) Nsa2[i,j]=round((Nsa2[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj2[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr2[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa2[i,j]=0#
      round(Nsa2[i,j],0)#
      # Projection equation for juveniles#
      if (j>1) Nj2[i,j]=round((Nj2[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh2[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
                               (Nhr2[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj2[i,j]=0#
      round(Nj2[i,j],0)#
      # Good-year/bad-year function for probability of breeding#
      #if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
      # Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
      eggsa2[i,j] = sum(rpois(round(Na2[i,j]*Pbt[i,j],0),muFa))/2#
      eggspa2[i,j] = sum(rpois(round(Npa2[i,j]*Pbt[i,j],0),muFa1))/2#
      round(eggsa2[i,j],0)#
      round(eggspa2[i,j],0)#
      # Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
      if (j>1) Nh2[i,j] = round((eggsa2[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggspa2[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh2[i,j]=0#
      round(Nh2[i,j],0)#
      # Sum the number of reproductive and immature individuals to facilitate the construction of figures#
      Nbreeders2[i,j] = Na2[i,j]+Npa2[i,j]		# Sum all breeders at each time step#
      Nimmatures2 = Nh2+Nj2+Nsa2	# Sum all immatures at each time step#
      # Implement sampling (detection) probability for adults and immatures#
      Nobreeders2[i,j]=sum(rbinom(Nbreeders2[i,j],1,Psamp[i,j]))#
      Noimmatures2[i,j]=sum(rbinom(Nimmatures2[i,j],1,Psamp[i,j]))#
       # Calculate population growth rate#
      if(j>5) rlam2[i,j]=Nbreeders2[i,j]/Nbreeders2[i,j-1]#
      if(j>5 && Nobreeders2[i,j-1]>0) olam2[i,j]= Nobreeders2[i,j]/Nobreeders2[i,j-1]#
      if (Nbreeders2[i,j]<5) Pext2[i,j]=1 else Pext2[i,j]=0 #
    }}	# Close replication and projection loops#
  medrlam1 = apply(rlam1, 2, median, na.rm=TRUE)		# Median real population growth#
  medolam1 = apply(olam1, 2, median, na.rm=TRUE)		# Median observed population growth#
  medNbreeders1=apply(Nbreeders1,2,median)#
  PE1 = apply(Pext1,2,sum)/r							# Prob. of quasi-extinction#
  PEt1 = PE1[t]										# Prob. of q-extinction @ year t#
  PE1#
  medNbreeders1#
  medrlam2 = apply(rlam2, 2, median, na.rm=TRUE)		# Median real population growth#
  medolam2 = apply(olam2, 2, median, na.rm=TRUE)		# Median observed population growth#
  medNbreeders2=apply(Nbreeders2,2,median)#
  PE2 = apply(Pext2,2,sum)/r							# Prob. of quasi-extinction#
  PEt2 = PE2[t]				#
  PE2#
  medNbreeders2
install.packages("XLConnect", dependencies=TRUE)
library(XLConnec t)
library(XLConnect)
install.packages("XLConnectJars", dependencies=TRUE)
library(XLConnect)
library(XLConnectJars)
# Model female populations of D. couperi as a population with five distinct life stages:#
# 1) hatchlings/first-year snakes (ages 0-1)#
# 2) juveniles (ca. 1-2 yr) #
# 3) subadults (ca. 2-3 yr)#
# 4) first-year adults (ca. 3-4 yr)#
# 5) adults (ca. 4<= yr)#
#
# The survival within each life stage and transition between stages can be conceptualized with a population transition matrix:#
# #
#		| 0			0				0				Sa1*Fa1*Ba1		Sa*Fa*Ba	|#
#		| Sh*Thj	Sj(1-Tjsa)		0				0				0		|#
# A =	| 0			Sj*Tjsa		Ssa(1-Tsaa1)			0	    			0		|, where:#
#		| 0			0				Ssa*Tsaa1		Sa1(1-Ta1a)		0		|#
#		| 0 		0				0				Sa1*Ta1a			Sa		|#
#	#
# S is the survival rate at stage i, where i can be h=hatchling, j=juvenile, sa=subadult, a1=primiparous adult, a=adult#
# F is the fecundity at stages a1 and a, and #
# B is the likelihood of breeding at stages a1 and a.#
#
install.packages("statmod", dependencies=TRUE)#
#
library(statmod)#
#
### To simulate these parameters, we will use 1000 replications (r) that are projected over 30 years (t)#
r = 1000#
t = 30#
######## Define and parameterize each of the above variables here using realistical values estimated from the literature: Hyslop et al. 2012 Population Ecology#
#
### Sh -- survival of hatchlings#
## This stage is comparable to the hatchling/juvenile stage from Hyslop et al. 2012, where they estimated survival in the first year by two components: hatchling survival during the first three months (0.49) and juvenile survival during the subsequent nine months (0.59). We modeled this as a conservative estimate of the two; 0.52#
mSh = 0.52  		#
varSh = 0.1							# Variance of mean#
aSh = mSh*((mSh*(1-mSh)/(varSh^2))-1) 	 	#
bSh = (1-mSh)*((mSh*(1-mSh)/(varSh^2))-1) #
Shi = matrix(rbeta(r,aSh,bSh),r,1)	# Parametric uncertainty #
SDmShi = matrix(rinvgauss(r,varSh^2,1),r,1)#
AShi = matrix(0,r,1)				# beta distribution shape parameters#
BShi = matrix(0,r,1)				# beta distribution shape parameters#
Sht = matrix(0,r,t)					# annual variation survival#
### Sj -- survival of juveniles #
## This stage is somewhat comparable to the subadult stage from Hyslop et al. 2012, where they estimated survival as 0.52 (0.20 SE). However, their sample size was low for individuals in this stage, and it seems unlikely that second year individuals would have lower survival than the hatchling stage. So we modeled survival in the second year (0.60) as a modest increase relative to survival in the first year.#
mSj = 0.60  		#
varSj = 0.1		# Variance of mean#
aSj = mSj*((mSj*(1-mSj)/(varSj^2))-1) 	 	#
bSj = (1-mSj)*((mSj*(1-mSj)/(varSj^2))-1) #
Sji = matrix(rbeta(r,aSj,bSj),r,1)			# Parametric uncertainty #
SDmSji = matrix(rinvgauss(r,varSj^2,1),r,1)#
ASji = matrix(0,r,1)				# beta distribution shape parameters#
BSji = matrix(0,r,1)				# beta distribution shape parameters#
Sjt = matrix(0,r,t)					# annual variation survival#
#
### Ssa -- survival of subadults  #
## This stage roughly translates to the first-year adults from Hyslop et al. 2012's adult survival stage (0.74), so we estimated this as 0.70 as a slightly reduced estimate of that.#
mSsa = 0.70  		#
varSsa = 0.1		# Variance of mean #
aSsa = mSsa*((mSsa*(1-mSsa)/(varSsa^2))-1) 	 	#
bSsa = (1-mSsa)*((mSsa*(1-mSsa)/(varSsa^2))-1) #
Ssai = matrix(rbeta(r,aSsa,bSsa),r,1)			# Parametric uncertainty #
SDmSsai = matrix(rinvgauss(r,varSsa^2,1),r,1)#
ASsai = matrix(0,r,1)				# beta distribution shape parameters#
BSsai = matrix(0,r,1)				# beta distribution shape parameters#
Ssat = matrix(0,r,t)					# annual variation survival#
#
### Sa1 -- survival of first-year adults #
## This stage roughly translates to the second-year adults from Hyslop et al. 2012's adult survival stage (0.74), so we estimated this as 0.70 as an increased estimate of that (0.80)#
mSa1 = 0.80	#
varSa1 = 0.1		# Variance of mean #
aSa1 = mSa1*((mSa1*(1-mSa1)/(varSa1^2))-1) 	 	#
bSa1 = (1-mSa1)*((mSa1*(1-mSa1)/(varSa1^2))-1) #
Sa1i = matrix(rbeta(r,aSa1,bSa1),r,1)			# Parametric uncertainty #
SDmSa1i = matrix(rinvgauss(r,varSa1^2,1),r,1)#
ASa1i = matrix(0,r,1)				# beta distribution shape parameters#
BSa1i = matrix(0,r,1)				# beta distribution shape parameters#
Sa1t = matrix(0,r,t)					# annual variation survival#
#
### Sa -- survival of adults #
## Radiotelemetered individuals in CNF that survive one year proceed to have high #
## survival (0.90) (Stiles 2013). #
mSa = 0.85 		#
varSa = 0.1		# Variance of mean#
aSa = mSa*((mSa*(1-mSa)/(varSa^2))-1) 	 	#
bSa = (1-mSa)*((mSa*(1-mSa)/(varSa^2))-1) #
Sai = matrix(rbeta(r,aSa,bSa),r,1)			# Parametric uncertainty #
SDmSai = matrix(rinvgauss(r,varSa^2,1),r,1)#
ASai = matrix(0,r,1)				# beta distribution shape parameters#
BSai = matrix(0,r,1)				# beta distribution shape parameters#
Sat = matrix(0,r,t)					# annual variation survival#
#
### The first four stages should theoretically transition into the next age stage after one year. However, there may be uncertainty if individuals vary in growth and individuals remain in stages, especially as they age. To model this uncertainty, we modeled transition probability declining from 0.99 with each successive stage up to the primiparous adult stage, until when primiparous females all transition to be adults.#
mThj = 0.99  			# Mean transition from hatchling to juvenile#
varThj = 0.01		#
aThj = mSh*((mSh*(1-mSh)/varSh^2)-1)#
bThj = (1-mSh)*((mSh*(1-mSh)/varSh^2)-1)#
Thj = matrix(rbeta(r*t,aThj,bThj),r,t)#
#
mTjsa = 0.90 			# Mean transition from juvenile to subadult#
varTjsa = 0.03	#
aTjsa = mSj*((mSj*(1-mSj)/varSj^2)-1)#
bTjsa = (1-mSj)*((mSj*(1-mSj)/varSj^2)-1)#
Tjsa = matrix(rbeta(r*t,aTjsa,bTjsa),r,t)#
#
mTsaa1 = 0.80  			# Mean transition from subadult to primiparous adult#
varTsaa1 = 0.05	#
aTsaa1 = mSsa*((mSsa*(1-mSsa)/varSsa^2)-1)#
bTsaa1 = (1-mSsa)*((mSsa*(1-mSsa)/varSsa^2)-1)#
Tsaa1 = matrix(rbeta(r*t,aTsaa1,bTsaa1),r,t)#
#
mTa1a = 0.99  			# Mean transition from primiparous adult to adult#
varTa1a = 0.01	#
aTa1a = mSa1*((mSa1*(1-mSa1)/varSa1^2)-1)#
bTa1a = (1-mSa1)*((mSa1*(1-mSa1)/varSa1^2)-1)#
Ta1a = matrix(rbeta(r*t,aTa1a,bTa1a),r,t)#
#
### Fa -- fecundity of adults (clutch size)#
## Mean Fa = 9 (4-12, range; Hyslop et al. 2012)#
## Fa = 8.65 (6-12, range; husbandry data, C. Guyer pers. comm.)#
muFa = 8.65#
sdFa = 2#
fecundShape2Fa = log((sdFa^2)/(muFa^2)+1)#
fecundShape1Fa = log(muFa)-1/2*fecundShape2Fa#
#hist(round(rlnorm(100,fecundShape1Fa,fecundShape2Fa)))	# for visualization purposes#
round(rlnorm(1,fecundShape1Fa,fecundShape2Fa))  # Clutch size for matrix#
eggsa = matrix(0,r,t)				# eggs from adults#
#
### Pva -- proportion of viable eggs for adults#
Pva = 0.85 #
aPva = 100*Pva#
bPva = 100*(1-Pva)#
Pvat=matrix(rbeta(r*t,aPva,bPva),r,t)#
#
### Fa1 -- fecundity (clutch size) of primiparous adults#
## A primary reason why we modeled two stages of adults is because, in our experience, first-year breeding females lay clutches dominated by inviable eggs. So, we wanted to model these females as having different egg viability relative to older, more experienced individuals; clutch size was the same. #
muFa1 = 8.65							#
sdFa1 = 2								#
fecundShape2Fa1 = log((sdFa1^2)/(muFa1^2)+1)#
fecundShape1Fa1 = log(muFa1)-1/2*fecundShape2Fa1#
# hist(round(rlnorm(100,fecundShape1Fa1,fecundShape2Fa1)))	# for visualization purposes#
round(rlnorm(1,fecundShape1Fa1,fecundShape2Fa1))  # Clutch size for matrix#
eggsa1 = matrix(0,r,t)				# eggs from primiparous adults (a1)#
#
### Pva1 -- proportion of viable eggs for primiparous adults#
Pva1 = 0.35 #
aPva1 = 100*Pva1#
bPva1 = 100*(1-Pva1)#
Pva1t=matrix(rbeta(r*t,aPva1,bPva1),r,t)#
#
### Se -- survival of eggs (nests); following an estimate by Hyslop et al. (2012), but no data from the field have estimated this parameter#
Se = 0.75 #
varSe = 0.15#
aSe=Se*((Se*(1-Se)/varSe^2)-1)#
bSe=(1-Se)*((Se*(1-Se)/varSe^2)-1)#
Set=matrix(0,r,t)#
#
### SR -- Sex ratio of eggs#
## A beta-distributed variable 0.5 (+/-0.04) to only model the proportion of females assuming a 1:1 sex ratio in clutches#
mSR = 0.5#
varSR = 0.04#
aSR=mSR*((mSR*(1-mSR)/(varSR^2))-1)#
bSR=(1-mSR)*((mSR*(1-mSR)/(varSR^2))-1)#
SRi = matrix(rbeta(r,aSR,bSR),r,1)			 #
SDmSRi = matrix(rinvgauss(r,aSR^2,1),r,1)#
ASRi = matrix(0,r,1)				#
BSRi = matrix(0,r,1)				#
SRt = matrix(0,r,t)				#
#
### Pbt -- proportion of individuals that breed#
## An attempt to simulate some good-year/bad-year dynamics.#
Pbt = matrix(0,r,t) #
PGY = 0.8#
GY = matrix(rbinom(r*t,1,PGY),r,t) #
SDPb=0.2#
#
### Proportion of individuals that breed during any given year.#
PB = 0.8#
varPB = 0.1#
aPB = PB*((PB*(1-PB)/varPB^2)-1)#
bPB = (1-PB)*((PB*(1-PB)/varPB^2)-1)#
rbeta(1,aPB,bPB)#
#
### Sr -- survival reduction for captives released into wild#
## Individuals being released into the wild may not perform as well as wild-born individuals, so we modeled an acclimation effect on the survival of captive-bred snakes being released, where survival during the released life stage was multiplied by this variable. #
Sr = 0.5 						#
Srt=matrix(0,r,t)#
### pSamp -- the probability of sampling snakes#
## Snakes are difficult to detect, especially fossorial species that have large homeranges. This parameter models how detection probability influences our ability to monitor population growth.#
mPsamp=0.20 #
SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
# We model pSamp = 0.20 here, but in the model for-loops we explore other values #
# Simulating parameters is now done#
detach(package:statmod)#
############## Part 2)#
############## Project the population growth and extinction risk of D. couperi  #
############## under different repatriation scenarios #
#
t = 30		# Number of years to project simulations#
r = 1000		# Number of simulation replications #
#
### Population growth & quasi-extinction estimates#
rlam=matrix(0,r,t)		# Real (true) population growth#
olam=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext=matrix(0,r,t)		# Probability of quasi-extinction#
#
#### Preliminary modeling exercises created a repatriation strategy where 30 'head-started', 2 yr-old subadult snakes would be released each year for 10 years. This sought to create a sustainable population with relatively low risk of extinction. However, this model lacked parametric uncertainty and stochasticity, it is expensive to raise snakes through the second year, and also difficult to raise enough snakes to release that many for 10 years. So, managers were also interested in the feasability of releasing younger snakes, such as hatchlings or 1-yr old juveniles, and whether shorter release periods (e.g., 5 years) or irregular release periods (7 out of 10 years)  would be sufficient to generate viable populations with low risk of extinction. However, two problems potentially limiting success are that (1) snakes are difficult to sample and may have detection probabilities much lower than 1.0, and (2) released animals may have decreased survival in the first year (post-release acclimation effect) while th
ey try to learn and figure out how to live in the wild.  #
#
#### This provides us five factors to consider in our modeling exercise: #
## (1) annual release size (15 or 30 individuals)#
## (2) snake release age (hatchlings, juvenile, subadult)#
## (3) release duration (5 yr, 10 yr)#
## (4) probability of sampling (observing) snakes (0.05, 0.15, 0.25, 0.35)#
## (5) acclimation effects on post-release survival (1.0,0.8,0.6,0.4)#
#
#### 28 release scenarios#
#
cols = c("nrelh","nrelj","nrelsa","nyr","mPsamp","Sr")#
rows = c("A","B","C","D","E","F","G","H","I","J","K","L",#
		"M","N","O","P","Q","R","S","T","U","V","W","X",#
		"Y","Z","ZZ","CNFc","ABRPc","CNFp","ABRPp")#
#
scenarios = matrix(c(#
	# Multiple snake release scenarios with different values for#
	# hatchling releases (col 1), juvenile releases (col 2), subadult releases (col 3), #
	# release duration in years (col 4), detection probability (col 5), and #
	# survival reduction (acclimation effect) (col 6)#
#
# Scenarios A-L: release age, release number, and release program duration#
	30,0,0,10,0.2,0.5,		#scenario A#
	0,30,0,10,0.2,0.5,		#scenario B #
	0,0,30,10,0.2,0.5,		#scenario C #
	30,0,0,5,0.2,0.5,		#scenario D#
	0,30,0,5,0.2,0.5,		#scenario E#
	0,0,30,5,0.2,0.5,		#scenario F#
	15,0,0,10,0.2,0.5,		#scenario G #
	0,15,0,10,0.2,0.5,		#scenario H #
	0,0,15,10,0.2,0.5,		#scenario I #
	15,0,0,5,0.2,0.5,		#scenario J#
	0,15,0,5,0.2,0.5,		#scenario K#
	0,0,15,5,0.2,0.5,		#scenario L#
#
# Scenarios M-X: evaluate different acclimation effects & detection probabilities	#
	30,0,0,10,0.45,1.0,		#scenario M #
	30,0,0,10,0.35,0.8,		#scenario N 	#
	30,0,0,10,0.25,0.6,		#scenario O#
	30,0,0,10,0.15,0.4,		#scenario P#
	30,0,0,10,0.05,0.2,		#scenario Q#
	0,30,0,10,0.45,1.0,		#scenario R#
	0,30,0,10,0.35,0.8,		#scenario S #
	0,30,0,10,0.25,0.6,		#scenario T#
	0,30,0,10,0.15,0.4,		#scenario U#
	0,30,0,10,0.05,0.2,		#scenario V#
	0,0,30,10,0.45,1.0,		#scenario W #
	0,0,30,10,0.35,0.8,		#scenario X #
	0,0,30,10,0.25,0.6,		#scenario Y#
	0,0,30,10,0.15,0.4,		#scenario Z#
	0,0,30,10,0.05,0.2,		#scenario ZZ#
# Scenarios specific to ongoing repatriations#
	0,0,0,0,0.15,0.5,		#scenario CNF	-- current population projections for CNF#
	0,0,0,0,0.15,0.5,		#scenario ABRP	-- current population projections for ABRP	#
	0,0,0,0,0.15,0.5,		#scenario CNF	-- projected population projections for CNF#
	0,0,0,0,0.15,0.5),		#scenario ABRP	-- projected population projections for ABRP#
	nrow=31, ncol=6, byrow=TRUE, dimnames=list(rows,cols))#
n = length(scenarios[,1])#
#
### Create an empty matrix to dump all the results into#
results = matrix(0, nrow = 1, ncol = 32, dimnames=list(NA,c("Scenario","Stage",1:30)))#
### Use a for-loop to iteratively calculate demography under different management scenarios#
### by using each row of the scenarios object to provide unique combinations of parameters#
for (h in 1:n){			# For-loop for each repatriation scenario#
nrelh=scenarios[h,1] 	# Mean number of hatchlings released (both sexes)#
nrelj=scenarios[h,2]		# Mean number of 1 yr-old juveniles releases (both sexes)#
nrelsa=scenarios[h,3]	# Mean no. of 2-yr old subadults releases (both sexes)#
#
nyr=scenarios[h,4] 		# Duration of the release program (years)#
#
mPsamp=scenarios[h,5] 	# Probabilty of sampling snakes (i.e., detection probability)#
SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
aPs= mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
bPs=(1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
#
Sr = scenarios[h,6]		# Acclimation effect on survival (i.e., survival reduction)#
						# of released individuals	#
Srt=matrix(0,r,t)#
#
### Create some matrices and parameters for the model loop:#
Nh =  matrix(0,r,t)		# Abundance of hatchlings #
Nj = matrix(0,r,t) 		# Juveniles#
Nsa = matrix(0,r,t) 		# Subadults#
Na1 = matrix(0,r,t) 		# Primiparous adults#
Na = matrix(0,r,t) 		# Adults#
#
Nh[,1]=0		# Initial abundance of hatchlings#
Nj[,1]=0		# Juveniles#
Nsa[,1]=0		# Subadults#
Na1[,1]=0		# Primiparous adults#
Na[,1]=0		# Adults#
#
Nhr = matrix(0,r,t)		# Number of hatchlings (0-yr olds) released #
Njr = matrix(0,r,t) 	# Number of captive-reared juveniles (1-yr olds) released#
Nsar = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
#
# Specify number of FEMALES CURRENTLY released TO DATE in Conecuh and Apalachicola#
rep.row<-function(x,n){matrix(rep(x,each=n),nrow=n)}	# function to build matrix#
#
CNFc = rep.row(c(0,8,11,14,3,0,3,0,13,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),1000)#
#
ABRPc = rep.row(c(0,4,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),1000)#
#
# Specify number of FEMALES PROJECTED for release in CNF and ABRP#
CNFp = rep.row(c(0,8,11,14,3,0,3,0,13,10,14,15,14,15,14,15,#
					0,0,0,0,0,0,0,0,0,0,0,0,0,0),1000)#
#
ABRPp = rep.row(c(0,4,8,14,13,15,13,14,13,15,13,14,14,#
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),1000)#
#
#this script simulates the same release schedule for all replicates and #
#isn't subject to future stochastic variation in releases#
#
Nobreeders = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
Noimmatures = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
#
Nmax=100 			# Population ceiling for density dependence#
#### Population-projection model that accounts for imperfect detection#
#
for(i in 1:r){			# Replication loop; draws replicate-level means for survival at each stage#
#
ASai[i] = 100*Sai[i]			# Adults 		#
BSai[i] = 100*(1-Sai[i])		#
#
ASa1i[i] = 100*Sa1i[i]		 # Primiparous adults	#
BSa1i[i] = 100*(1-Sa1i[i])#
#
ASsai[i] = 100*Ssai[i]		 # Subadults	#
BSsai[i] = 100*(1-Ssai[i])#
#
ASji[i] = 100*Sji[i]			# Juveniles  		#
BSji[i] = 100*(1-Sji[i])#
#
AShi[i] = 100*Shi[i]		 	# Hatchlings	#
BShi[i] = 100*(1-Shi[i])#
#
for(j in 1:t){			# Projection loop; drawing annual demographic rates#
Sat[i,j]=rbeta(1,ASai[i],BSai[i])			# Adults#
Sa1t[i,j]=rbeta(1,ASa1i[i],BSa1i[i])		# Primiparous adults#
Ssat[i,j]=rbeta(1,ASsai[i],BSsai[i])		# Subadults#
Sjt[i,j]=rbeta(1,ASji[i],BSji[i])			# Juveniles#
Sht[i,j]=rbeta(1,aSh,bSh)					# Hatchlings#
Set[i,j]=rbeta(1,aSe,bSe)					# Egg survival#
Srt[i,j]=rbeta(1,100*Sr, 100*(1-Sr)) 		# Randomize the acclimation effect #
												# (Sr; survival reduction)#
#
# Drawing the number of released subadults and juveniles, and account for sex ratio to remove males#
if (j>0 && j<nyr+1 && scenarios[h,4]>0) Nsar[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
if (j>0 && j<nyr+1 && scenarios[h,4]>0) Njr[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
if (j>0 && j<nyr+1 && scenarios[h,4]>0) Nhr[i,j]=runif(1,0.8*nrelh,1.2* nrelh)*rbeta(1,aSR,bSR)#
#
# Specify the number of females released in CNF and ABRP (1) to date and (2) projected#
if (rownames(scenarios)[h] == "CNFc") Nsar=CNFc#
if (rownames(scenarios)[h] == "ABRPc") Nsar=ABRPc#
if (rownames(scenarios)[h] == "CNFp") Nsar=CNFp#
if (rownames(scenarios)[h] == "ABRPp") Nsar=ABRPp#
#
# Projection equation for adults#
if (j>1) Na[i,j]=round((Na[i,j-1]*Sat[i,j-1]+Na1[i,j-1]*Sa1t[i,j-1]*Ta1a[i,j-1])) else Na[i,j]=0#
round(Na[i,j],0)#
#
# Projection equation for primiparous adults#
if (j>1) Na1[i,j]=round((Na1[i,j-1]*(Sa1t[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Na1[i,j]=0#
round(Na1[i,j],0)#
#
# Density-dependence; decrease subadult survival considerably when population sizes get too high;#
# drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
if (Na[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
if (Na[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
#
# Projection equation for subadults#
if (j>1) Nsa[i,j]=round((Nsa[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa[i,j]=0#
round(Nsa[i,j],0)#
#
# Projection equation for juveniles#
if (j>1) Nj[i,j]=round((Nj[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
(Nhr[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj[i,j]=0#
round(Nj[i,j],0)#
#
# Good-year/bad-year function for probability of breeding#
if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
#
# Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
eggsa[i,j] = sum(rpois(round(Na[i,j]*Pbt[i,j],0),muFa))/2#
eggsa1[i,j] = sum(rpois(round(Na1[i,j]*Pbt[i,j],0),muFa1))/2#
round(eggsa[i,j],0)#
round(eggsa1[i,j],0)#
#
# Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
if (j>1) Nh[i,j] = round((eggsa[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggsa1[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh[i,j]=0#
round(Nh[i,j],0)#
#
# Sum the number of reproductive and immature individuals to facilitate the construction of figures#
Nbreeders = Na+Na1		# Sum all breeders at each time step#
Nimmatures = Nh+Nj+Nsa	# Sum all immatures at each time step#
#
# Implement sampling (detection) probability for adults and immatures#
Nobreeders[i,j]=sum(rbinom(Nbreeders[i,j],1,Psamp[i,j]))#
Noimmatures[i,j]=sum(rbinom(Nimmatures[i,j],1,Psamp[i,j]))#
#
# Calculate population growth rate#
if(j>5) rlam[i,j]=Nbreeders[i,j]/Nbreeders[i,j-1]#
if(j>5 && Nobreeders[i,j-1]>0) olam[i,j]= Nobreeders[i,j]/Nobreeders[i,j-1]#
if (Nbreeders[i,j]<5) Pext[i,j]=1 else Pext[i,j]=0 #
#
}}	# Close replication and projection loops#
#
# Create an categorical identifying variable of length r for each life stage#
stages = c("H","J","SA","PA","A","Imm","Breeders","ObsImm","ObsBreeders")#
for (l in 1:length(stages)){#
	Stage = as.data.frame(rep(stages[l],r))#
	assign(paste0("Stage",stages[l]),Stage)}#
#
# Bind the results from a scenario projection into a data frame#
scenario = rbind.data.frame(cbind.data.frame(StageH,Nh),cbind.data.frame(StageJ,Nj),#
	cbind.data.frame(StageSA,Nsa),cbind.data.frame(StagePA,Na1),cbind.data.frame(StageA,Na),#
	cbind.data.frame(StageImm,Nimmatures),cbind.data.frame(StageBreeders,Nbreeders), #
	cbind.data.frame(StageObsImm,Noimmatures),cbind.data.frame(StageObsBreeders,Nobreeders))#
scenario = cbind.data.frame(rep(rownames(scenarios)[h],r*length(stages)),scenario)#
colnames(scenario) = c("Scenario","Stage",1:30)#
results = rbind(results,scenario)	# Bind results from the scenario to an object with all scenario results#
#
medrlam = apply(rlam, 2, median, na.rm=TRUE)		# Median real population growth#
medolam = apply(olam, 2, median, na.rm=TRUE)		# Median observed population growth#
PE = apply(Pext,2,sum)/r							# Prob. of quasi-extinction#
PEt = PE[t]										# Prob. of q-extinction @ year t#
#
muNhr = mean(apply(Nhr,1,sum))		# Mean no. of hatchlings released#
muNjr = mean(apply(Njr,1,sum))		# Mean no. of juveniles released#
muNsar = mean(apply(Nsar,1,sum))		# Mean no. of subadults released#
#
assign(paste0("medrlam", rownames(scenarios)[h]), medrlam) #
assign(paste0("medolam", rownames(scenarios)[h]), medolam) #
assign(paste0("PE", rownames(scenarios)[h]), PE) #
assign(paste0("PEt", rownames(scenarios)[h]), PEt) #
#
assign(paste0("muNsar", rownames(scenarios)[h]), muNsar) #
assign(paste0("muNjr", rownames(scenarios)[h]), muNjr)#
assign(paste0("muNhr", rownames(scenarios)[h]), muNhr)#
#
} 	# Close scenario loop#
#
results = results[-c(1),]	# Remove top NA row from results#
############## Part 3)#
############## Project the population growth and extinction risk of D. couperi  #
############## under many combinations of repatriation scenarios to generate#
############## a 3-D response surface of how extinction prob is influenced by#
############## propagule size & release program duration#
#
t = 30		# Number of years to project simulations#
r = 100		# Number of simulation replications;#
			# r = 100 here for shorter computing times; ~12 mins#
#
start_time <- Sys.time()#
#
### Population growth & quasi-extinction estimates#
rlam=matrix(0,r,t)		# Real (true) population growth#
olam=matrix(,r,t)		# Observed population growth, after sampling (detection) process#
Pext=matrix(0,r,t)		# Probability of quasi-extinction#
#
# We want to create a 3-D response surface for how extinction probability is influenced by release age (juv vs subadult), propagule size (no. of snakes), and release program duration (no. of years). We will do simulations for both juveniles and subadults and then produce graphs for both stages. We will run simulations for propagule size varying from 1-20 females per year, release duration varying from 1-20 years.#
#
## (1) snake release age (hatchling, juvenile, or subadult)#
## (2) annual propagule size (4-300 individuals/year; will be split into females only later)#
## (3) release duration (1-20 yr)#
#
#### Generate a matrix with all combinations of the aforementioned variables. This #
#
require(utils)#
#
releases = rep(seq(4,300,4),20)#
zeros = rep(0,1500)#
nyr = c(rep(1,75),rep(2,75),rep(3,75),rep(4,75),rep(5,75),	#
			rep(6,75),rep(7,75),rep(8,75),rep(9,75),rep(10,75),#
			rep(11,75),rep(12,75),rep(13,75),rep(14,75),rep(15,75),#
			rep(16,75),rep(17,75),rep(18,75),rep(19,75),rep(20,75))#
total = releases*nyr#
#
# create a dataframe for hatchling release scenarios#
nrelh = as.data.frame(cbind(releases,zeros,zeros,nyr,total))#
colnames(nrelh) = c("nrelh","nrelj","nrelsa","nyr","total")#
#
# now create a dataframe for juvenile release scenarios; slightly different order#
nrelj = as.data.frame(cbind(zeros,releases,zeros,nyr,total))#
colnames(nrelj) = c("nrelh","nrelj","nrelsa","nyr","total")#
#
# create a dataframe for subadult release scenarios#
nrelsa = as.data.frame(cbind(zeros,zeros,releases,nyr,total))#
colnames(nrelsa) = c("nrelh","nrelj","nrelsa","nyr","total")#
# bind the subadult and juvenile scenarios#
releases = rbind(nrelh,nrelj,nrelsa)#
#
# the multiplication of "total = releases*nyr" creates many scenarios that #
# are impractically large; e.g., releasing 300 individuals/year for 20 years. #
# This will cost a lot of computing time and #
# is biologically unfeasible/impractical. So, we can truncate this to only #
# evaluate scenarios that  release a total of 600 individuals (or, 300 females).#
scenarios = releases[ which(releases[,5] < 600),]#
#
n = length(scenarios[,1])#
### Create an empty matrix to dump all the results into#
RESULTS = matrix(0, nrow = 1, ncol = 32, dimnames=list(NA,c("Scenario","Stage",1:30)))#
	# Population projection results#
ProbExt = matrix(0, nrow = 1, ncol = 5, dimnames=list(NA, c("HatchRel","JuvRel","SubadRel","NoYears","ProbExt")))#
	# Probability of extinction results -- for 3D graph -- most important here#
### Use a for-loop to iteratively calculate demography under different management scenarios#
### by using each row of the scenarios object to provide unique combinations of parameters#
for (h in 1:n){			# For-loop for each repatriation scenario#
nrelh=scenarios[h,1] 		# Mean no. of 2-yr old subadults releases (both sexes)#
nrelj=scenarios[h,2]			# Mean number of 1 yr-old juveniles releases (both sexes)#
nrelsa=scenarios[h,3]		# Mean number of 1 yr-old juveniles releases (both sexes)#
nyr=scenarios[h,4] 			# Duration of the release program (years)#
#
mPsamp=0.2 	# Probabilty of sampling snakes (i.e., detection probability); #
			# this is hard-coded here for convenience b/c we aren't evaluating det. prob.#
SDmPsamp = (mPsamp*0.1)*(mPsamp*0.1)#
aPs = mPsamp*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
bPs = (1-mPsamp)*((mPsamp*(1-mPsamp)/SDmPsamp)-1)#
Psamp = matrix(rbeta(r*t,aPs,bPs),r,t)#
#
Sr = 0.5			# Acclimation effect on survival (survival reduction) of released individuals	#
Srt = matrix(0,r,t)	# also hard coded here for convenience#
#
### Create some matrices and parameters for the model loop:#
Nh =  matrix(0,r,t)		# Abundance of hatchlings #
Nj = matrix(0,r,t) 		# Juveniles#
Nsa = matrix(0,r,t) 	# Subadults#
Na1 = matrix(0,r,t) 	# Primiparous adults#
Na = matrix(0,r,t) 		# Adults#
#
Nh[,1]=0		# Initial abundance of hatchlings#
Nj[,1]=0		# Juveniles#
Nsa[,1]=0		# Subadults#
Na1[,1]=0		# Primiparous adults#
Na[,1]=0		# Adults#
#
Nhr = matrix(0,r,t)		# Number of captive-reared hatchlings (0-yr olds) released#
Njr = matrix(0,r,t) 		# Number of captive-reared juveniles (1-yr olds) released#
Nsar = matrix(0,r,t) 	# Number of captive-reared subadults (2-yr olds) released#
#
Nobreeders = matrix(0,r,t) 	# Number of adults observed/counted, given Psamp#
Noimmatures = matrix(0,r,t)	# Number of immatures observed/counted, given Psamp#
#
Nmax=100 			# Population ceiling for density dependence#
#### Population-projection model that accounts for imperfect detection#
#
for(i in 1:r){			# Replication loop; draws replicate-level means for survival at each stage#
#
ASai[i] = 100*Sai[i]			# Adults 		#
BSai[i] = 100*(1-Sai[i])		#
#
ASa1i[i] = 100*Sa1i[i]		 	# Primiparous adults	#
BSa1i[i] = 100*(1-Sa1i[i])#
#
ASsai[i] = 100*Ssai[i]		 	# Subadults	#
BSsai[i] = 100*(1-Ssai[i])#
#
ASji[i] = 100*Sji[i]			# Juveniles  		#
BSji[i] = 100*(1-Sji[i])#
#
AShi[i] = 100*Shi[i]		 	# Hatchlings	#
BShi[i] = 100*(1-Shi[i])#
#
for(j in 1:t){			# Projection loop; drawing annual demographic rates#
Sat[i,j]=rbeta(1,ASai[i],BSai[i])			# Adults#
Sa1t[i,j]=rbeta(1,ASa1i[i],BSa1i[i])		# Primiparous adults#
Ssat[i,j]=rbeta(1,ASsai[i],BSsai[i])		# Subadults#
Sjt[i,j]=rbeta(1,ASji[i],BSji[i])			# Juveniles#
Sht[i,j]=rbeta(1,aSh,bSh)					# Hatchlings#
Set[i,j]=rbeta(1,aSe,bSe)					# Egg survival#
Srt[i,j]=rbeta(1,100*Sr, 100*(1-Sr)) 		# Randomize the acclimation effect (Sr; survival reduction)#
#
# Drawing the number of released subadults and juveniles, and account for sex ratio to remove males#
if (j>0 && j<nyr+1) Nhr[i,j]=runif(1,0.8*nrelh,1.2*nrelh)*rbeta(1,aSR,bSR)#
if (j>0 && j<nyr+1) Njr[i,j]=runif(1,0.8*nrelj,1.2*nrelj)*rbeta(1,aSR,bSR)#
if (j>0 && j<nyr+1) Nsar[i,j]=runif(1,0.8*nrelsa,1.2*nrelsa)*rbeta(1,aSR,bSR)#
#
# Projection equation for adults#
if (j>1) Na[i,j]=round((Na[i,j-1]*Sat[i,j-1]+Na1[i,j-1]*Sa1t[i,j-1]*Ta1a[i,j-1])) else Na[i,j]=0#
round(Na[i,j],0)#
#
# Projection equation for primiparous adults#
if (j>1) Na1[i,j]=round((Na1[i,j-1]*(Sa1t[i,j-1]*(1-Ta1a[i,j-1])))+(Nsa[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1])+(Nsar[i,j-1]*Ssat[i,j-1]*Tsaa1[i,j-1]*Srt[i,j-1])) else Na1[i,j]=0#
round(Na1[i,j],0)#
#
# Density-dependence; decrease subadult survival considerably when population sizes get too high;#
# drop to 0.40 when abundance > nmax population size OR to 0.20 when abundance > 1.5*nmax#
if (Na[i,j]>Nmax) Ssat[i,j]=runif(1,.3,.5)#
if (Na[i,j]>Nmax*1.5) Ssat[i,j]=runif(1,.1,.3)#
#
# Projection equation for subadults#
if (j>1) Nsa[i,j]=round((Nsa[i,j-1]*(Ssat[i,j-1]*(1-Tsaa1[i,j-1])))+(Nj[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1])+(Njr[i,j-1]*Sjt[i,j-1]*Tjsa[i,j-1]*Srt[i,j-1])) else Nsa[i,j]=0#
round(Nsa[i,j],0)#
#
# Projection equation for juveniles#
if (j>1) Nj[i,j]=round((Nj[i,j-1]*(Sjt[i,j-1]*(1-Tjsa[i,j-1])))+(Nh[i,j-1]*Sht[i,j-1]*Thj[i,j-1])+#
(Nhr[i,j-1]*Sht[i,j-1]*Thj[i,j-1]*Srt[i,j-1])) else Nj[i,j]=0#
round(Nj[i,j],0)#
#
# Good-year/bad-year function for probability of breeding#
if (GY[i,j]==1) Pbt[i,j]=1 else Pbt[i,j]=runif(1,.7,.8)#
#
# Calculate the number of eggs produced each year, while accounting for sex ratio (i.e., dividing by two)#
eggsa[i,j] = sum(rpois(round(Na[i,j]*Pbt[i,j],0),muFa))/2#
eggsa1[i,j] = sum(rpois(round(Na1[i,j]*Pbt[i,j],0),muFa1))/2#
round(eggsa[i,j],0)#
round(eggsa1[i,j],0)#
#
# Calculate the number of hatchlings produced each year by accounting for viability (Pva & Pva1) and nest survival (i.e., egg survival; Se) #
if (j>1) Nh[i,j] = round((eggsa[i,j-1]*Pvat[i,j-1]*Set[i,j-1])+(eggsa1[i,j-1]*Pva1t[i,j-1]*Set[i,j-1])) else Nh[i,j]=0#
round(Nh[i,j],0)#
#
# Sum the number of reproductive and immature individuals to facilitate the construction of figures#
Nbreeders = Na+Na1		# Sum all breeders at each time step#
Nimmatures = Nh+Nj+Nsa	# Sum all immatures at each time step#
#
# Implement sampling (detection) probability for adults and immatures#
Nobreeders[i,j]=sum(rbinom(Nbreeders[i,j],1,Psamp[i,j]))#
Noimmatures[i,j]=sum(rbinom(Nimmatures[i,j],1,Psamp[i,j]))#
#
# Calculate population growth rate#
if(j>5) rlam[i,j]=Nbreeders[i,j]/Nbreeders[i,j-1]#
if(j>5 && Nobreeders[i,j-1]>0) olam[i,j]= Nobreeders[i,j]/Nobreeders[i,j-1]#
if (Nbreeders[i,j]<5) Pext[i,j]=1 else Pext[i,j]=0 #
#
}}	# Close replication and projection loops#
#
# Create an categorical identifying variable of length r for each life stage#
stages = c("H","J","SA","PA","A","Imm","Breeders","ObsImm","ObsBreeders")#
for (l in 1:length(stages)){#
	Stage = as.data.frame(rep(stages[l],r))#
	assign(paste0("Stage",stages[l]),Stage)}#
#
# Bind the results from a scenario projection into a data frame#
scenario = rbind.data.frame(cbind.data.frame(StageH,Nh),cbind.data.frame(StageJ,Nj),#
	cbind.data.frame(StageSA,Nsa),cbind.data.frame(StagePA,Na1),cbind.data.frame(StageA,Na),#
	cbind.data.frame(StageImm,Nimmatures),cbind.data.frame(StageBreeders,Nbreeders), #
	cbind.data.frame(StageObsImm,Noimmatures),cbind.data.frame(StageObsBreeders,Nobreeders))#
scenario = cbind.data.frame(rep(rownames(scenarios)[h],r*length(stages)),scenario)#
colnames(scenario) = c("Scenario","Stage",1:30)#
#
RESULTS = rbind(RESULTS,scenario)	#
# Bind results from the scenario to an object with all scenario results#
medrlam = apply(rlam, 2, median, na.rm=TRUE)#
medolam = apply(olam, 2, median, na.rm=TRUE)#
#
PE = apply(Pext,2,sum)/r#
PEt = PE[t]#
#
muNhr = mean(apply(Nhr,1,sum))#
muNjr = mean(apply(Njr,1,sum))#
muNsar = mean(apply(Nsar,1,sum))#
#
assign(paste0("medrlam", rownames(scenarios)[h]), medrlam) #
assign(paste0("medolam", rownames(scenarios)[h]), medolam) #
#
assign(paste0("PE", rownames(scenarios)[h]), PE) #
assign(paste0("PEt", rownames(scenarios)[h]), PEt) #
#
assign(paste0("muNhr", rownames(scenarios)[h]), muNhr) #
assign(paste0("muNjr", rownames(scenarios)[h]), muNjr)#
assign(paste0("muNsar", rownames(scenarios)[h]), muNsar) #
#
# Create a probability of extinction (pe) matrix row that summarizes the total number of individuals released, the release program duration, and the resulting probability of extinction#
pe = as.matrix(0, nrow=1, ncol=5, #
	dimnames=list(NA, c("HatchRel","JuvRel","SubadRel","NoYears","ProbExt")))#
pe[1:5] = c(muNhr, muNjr, muNsar, nyr, PEt)#
#
# Bind the probability of extinction (pe) matrix row to an object that has all of the probability of extinction results together#
ProbExt = rbind(ProbExt, pe)#
#
} 	# Close scenario loop#
#
RESULTS = RESULTS[-c(1),]	# Remove top NA row from RESULTS#
ProbExt = ProbExt[-c(1),]	# Remove top NA row from ProbExt#
#
end_time <- Sys.time()#
end_time - start_time		# See how long model takes to run
cols = c("Scenario","ReleaseDuration","FemalesReleased","Lambda","LambdaObs","Pext")#
rows = c("A","D","G","J","B","E","H","K","C","F","I","L")#
tableX2 = matrix(c(#
	# Hatchling scenarios#
	"A", 10, round(muNhrA), mean(medrlamA[-c(1:5)]), mean(medolamA[-c(1:5)]),PEtA,#
	"D", 5, round(muNhrD), mean(medrlamD[-c(1:5)]), mean(medolamD[-c(1:5)]),PEtD,#
	"G", 10, round(muNhrG), mean(medrlamG[-c(1:5)]), mean(medolamG[-c(1:5)]),PEtG,#
	"J", 5, round(muNhrJ), mean(medrlamJ[-c(1:5)]), mean(medolamJ[-c(1:5)]),PEtJ,#
#
	# Juvenile scenarios#
	"B", 10, round(muNjrB), mean(medrlamB[-c(1:5)]), mean(medolamB[-c(1:5)]),PEtB,#
	"E", 5, round(muNjrE), mean(medrlamE[-c(1:5)]), mean(medolamE[-c(1:5)]),PEtE,#
	"H", 10, round(muNjrH), mean(medrlamH[-c(1:5)]), mean(medolamH[-c(1:5)]),PEtH,#
	"K", 5, round(muNjrK), mean(medrlamK[-c(1:5)]), mean(medolamK[-c(1:5)]),PEtK,#
	# Subadult scenarios#
	"C", 10, round(muNsarC), mean(medrlamC[-c(1:5)]), mean(medolamC[-c(1:5)]),PEtC,#
	"F", 5, round(muNsarF), mean(medrlamF[-c(1:5)]), mean(medolamF[-c(1:5)]),PEtF,#
	"I", 10, round(muNsarI), mean(medrlamI[-c(1:5)]), mean(medolamI[-c(1:5)]),PEtI,#
	"L", 5, round(muNsarL), mean(medrlamL[-c(1:5)]), mean(medolamL[-c(1:5)]),PEtL),#
	nrow=12, ncol=6, byrow=TRUE, dimnames=list(rows,cols))#
tableX2
library(updateR)
install.packages("updateR")
install.packages('devtools') #assuming it is not already installed#
#
library(devtools)#
#
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password='letsgocavs')
letsgocavs
.Library
installed.packages()
packageStatus()
library(RPresence)
install.packages("devtools")#
library(devtools)#
install_github("kassambara/easyGgplot2")
install.packages("devtools")
library(devtools)
devtools
?devtools()
library(devtools)
install_github("kassambara/easyGgplot2")
?install_github()
setwd("/Users/brian/Dropbox/Auburn Ph.D. Spider predators/GitHub")
datum = read.csv("captures.csv", header = TRUE)	# Load the datafile
library(reshape)#
library(tidyr)
datum = subset(datum, Location != "NA")
# Change cells from "C#" to simple numbers#
for (c in 1:21){#
  cell = paste0("C",c)#
  datum[datum==cell] = c#
}#
datum$Cell = as.numeric(datum$Cell)#
#
######## A -- Create a vector of the focal species#
#
species = c("CRABRA", "OOPPUM", "NORHUM", "ctenid") #
#
################ Initiate for-loop for above tasks ################ #
#
for (s in species){#
#
herp = subset(datum, SpeciesCode == s)#
#
#herp = droplevels(subset(herp, herp$SVL != 1))	#
# This line eliminates small ctenids (size class = 1)#
# and only focuses on large indivduals of size classes 2+3#
# HOWEVER, I commented it out, b/c it doesn't change the results.#
#
## Use for-loops to tabulate the number of individuals #
## detected in each grid cell of each plot #
## during each of the surveys in each month#
#
DetHist = matrix(NA, nrow = 1, ncol = 5)#
detections = matrix(0, nrow = 21, ncol = 5)#
#
# Initiate the DETECTION HISTORY for-loop#
#
for (i in 1:14){  # For each plot, 1:14#
  plot = subset(herp, TreeNo == i)  # Subset to a plot#
  if(length(plot[,1])>0){#
    for (j in 1:9){ # For each month, 1:9#
      month = subset(plot, SeshNumeric == j)  # Subset to a month#
      if(length(month[,1])>0){#
        detections = matrix(0, nrow = 21, ncol = 5)#
        for (k in 1:3){ # For each survey occasion#
          survey = subset(month, Occ == k)  # Subset to a survey#
          if(length(survey[,1])>0){#
            (tab = as.data.frame(table(survey$Cell)))	# Tabulate captures by cell#
            for (l in 1:21){#
              if(l %in% tab$Var1){detections[l,k] = subset(tab, Var1==l)$Freq}#
              #  Fill in matrix w/ detections#
            }#
          }#
        } #
      } else {detections = matrix(0, nrow = 21, ncol = 5)}   #
        detections[,4] = j				# Fill in Month column of matrix#
        detections[,5] = i				# Fill in Tree Number2q column of matrix#
        DetHist = rbind(DetHist, detections)#
        # Binds detection history for surveys#
        # in a plot and month to a running tally#
        # of all surveys among all plots/months#
    }						#
  }#
}	# END DETECTION HISTORY for-loops for month and plot#
#
DetHist = DetHist[-c(1),]#
head(DetHist)#
colnames(DetHist)=c("S1","S2","S3","Month","TreeNo")#
for (m in 1:length(DetHist[,1])){#
  if(DetHist[m,4]==2){DetHist[m,3]=NA}#
} # Replace the third survey in March to be NA#
DetHist2 = as.data.frame(DetHist)#
#
## Reshape the data to format it for 'unmarked'#
DetHist2 = melt(DetHist2, id=c("Month","TreeNo"))#
colnames(DetHist2) = c("Month","TreeNo","Survey","Detection")#
head(DetHist2)#
#
# Create a vector for the Months & TreeNo#
Month = DetHist2$Month#
TreeNo = DetHist2$TreeNo#
#
# Create a vector describing dry season (Feb, March, May) and wet (June-Nov)#
Season = Month#
Season[Season==2] = 1#
Season[Season==3] = 1#
Season[Season==4] = 2#
Season[Season==5] = 2#
Season[Season==6] = 2#
Season[Season==7] = 2#
Season[Season==8] = 2#
Season[Season==9] = 2#
#
# Create a new vector, CellNo, which identifies each cell within tree plot#
x = c(1:21)#
#x = c(1,10,11,12,13,14,15,16,17,18,19,2,20,21,3,4,5,6,7,8,9)#
CellNo = as.data.frame(rep(x,378))#
#if (s == "CRABRA"){CellNo = as.data.frame(rep(x,378))}#
#if (s == "OOPPUM"){CellNo = as.data.frame(rep(x,378))}#
#if (s == "NORHUM"){CellNo = as.data.frame(rep(x,339))}#
#if (s == "ctenid"){CellNo = as.data.frame(rep(x,330))}#
colnames(CellNo) = c("CellNo")#
#
# Change all the counts (which can be greater than 1) to be 1#
Detection = DetHist2$Detection#
Detection[ Detection > 0 ] = 1#
#
### If I want to build single-season models, then: #
# Reformat the surveys to be numeric 1:3 in each month#
Survey = as.numeric(DetHist2$Survey)#
#
# Bind these manipulated files back together to generate file for 'unmarked'#
DetHist3 = cbind(TreeNo,Month,Season,CellNo,Survey,Detection)#
DetHist3 = DetHist3[order(DetHist3$TreeNo, DetHist3$Month,#
		 DetHist3$CellNo, DetHist3$Survey),]#
head(DetHist3,20)#
#
# Spread the surveys within months to wide format#
DetHist4 = spread(DetHist3, Survey, Detection, fill=NA)#
#
# Apply a unique name to each reformatted datafile#
assign(paste0(s,"detections"), DetHist4) #
#
} # End the species loop#
#
head(CRABRAdetections,20)	# E.g., CRABRA#
tail(CRABRAdetections,20)	# E.g., CRABRA#
#
head(OOPPUMdetections,10)	# E.g., OOPPUM#
tail(OOPPUMdetections,20)	# E.g., #
#
head(NORHUMdetections,10)	# E.g., NORHUM#
tail(NORHUMdetections,20)	# E.g., #
#
head(cteniddetections,10)	# E.g., CTENIDS#
tail(NORHUMdetections,20)	# E.g., #
######## B -- Create vectors describing arthropod abundance#
#
arthropods = read.csv("arthropod-and-litter-data-v2.csv", header=TRUE)#
# In this datafile, I increased the number of arthropod observations.#
# For each cell corner with a sample, I copied it for#
# each adjacent or katy-cornered cell. #
# Only issue is, after binding this with the herp observations, #
# some herp detection histories in months will be repeatedly used#
# for cells that had two or more adjacent litter samples#
#
bugs = arthropods[,c("Tree.Number","TreeSpecies3","Month3","GridCells",#
		"Dry.Litter.Mass..g.","Acari","Araneae","Coleoptera",#
		"Isopoda","Formicidae","Orthoptera")]#
colnames(bugs) = c("TreeNo","Treatment","Month","CellNo","LitterMass",#
			"Acari","Araneae","Coleoptera","Isopoda",#
			"Formicidae","Orthoptera")#
head(bugs)#
### Merge the detection histories with the observational covariates#
CRABRAdetections = merge(CRABRAdetections, bugs,#
	 all.y=TRUE, by=c("TreeNo","Month","CellNo"))#
#
OOPPUMdetections  = merge(OOPPUMdetections, bugs,#
   all.y=TRUE, by=c("TreeNo","Month","CellNo"))#
#
NORHUMdetections = merge(NORHUMdetections, bugs,#
	 all.y=TRUE, by=c("TreeNo","Month","CellNo"))#
#
cteniddetections = merge(cteniddetections, bugs,#
	 all.y=TRUE, by=c("TreeNo","Month","CellNo"))#
# Bind each frog and lizard dataframe with the ctenid one#
CTENIDvsCRABRA = rbind(cteniddetections,CRABRAdetections)#
CTENIDvsOOPPUM = rbind(cteniddetections,OOPPUMdetections)#
CTENIDvsNORHUM = rbind(cteniddetections,NORHUMdetections)#
head(CTENIDvsNORHUM, 20)#
#
# Analyze the dataframes in R using RPresence#
#
### Tabulate the number of surveys, number of detections for#
### frogs, lizards, and spiders#
#
length(na.omit(subset(CRABRAdetections, LitterMass != "NA")[,5:7])[,1]) # Number of sites#
length(na.omit(subset(CRABRAdetections, LitterMass != "NA")[,5:7])[,1])*3 # Number of surveys#
sum(na.omit(subset(CRABRAdetections, LitterMass != "NA")[,5:7])) # Number of observations#
na.omit(subset(CRABRAdetections, LitterMass != "NA")) # The data#
#
length(na.omit(subset(OOPPUMdetections, LitterMass != "NA")[,5:7])[,1]) # Number of sites#
length(na.omit(subset(OOPPUMdetections, LitterMass != "NA")[,5:7])[,1])*3 # Number of surveys#
sum(na.omit(subset(OOPPUMdetections, LitterMass != "NA")[,5:7])) # Number of observations#
#
length(na.omit(subset(NORHUMdetections, LitterMass != "NA")[,5:7])[,1]) # Number of sites#
length(na.omit(subset(NORHUMdetections, LitterMass != "NA")[,5:7])[,1])*3 # Number of surveys#
sum(na.omit(subset(NORHUMdetections, LitterMass != "NA")[,5:7])) # Number of observations#
#
length(na.omit(subset(cteniddetections, LitterMass != "NA")[,5:7])[,1]) # Number of sites#
length(na.omit(subset(cteniddetections, LitterMass != "NA")[,5:7])[,1])*3 # Number of surveys#
sum(na.omit(subset(cteniddetections, LitterMass != "NA")[,5:7])) # Number of observations#
############################################################################
############# II) Use the R library 'RPresence' to perform	  ##############
#############     single-season two-species occupancy 	  	  ##############
#############	    models for each species in R
install.packages('/Users/brian/Desktop/RRPresence (1).tar.gz')
install.packages('/Users/brian/Desktop/RPresence (1).tar.gz')
install.packages('/Users/brian/Desktop/RPresence_2.12.24.tar.gz')
load("/Users/brian/Desktop/RPresence_2.12.24.tar.gz")
load("/Users/brian/Desktop/RPresence (1).tar.gz")
library(RPresence)
install.packages('/Users/brian/Desktop/RPresence.tar.gz')
install.packages('/Users/brian/Desktop/RPresence.tar.gz')
